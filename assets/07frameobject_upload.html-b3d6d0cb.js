import{_ as t}from"./qrcode2-187b7271.js";import{_ as e,r as p,o,c,a as n,d as s,b as l,e as i}from"./app-6b5e6c63.js";const u={},r=i(`<h1 id="深入理解python虚拟机-程序执行的载体——栈帧" tabindex="-1"><a class="header-anchor" href="#深入理解python虚拟机-程序执行的载体——栈帧" aria-hidden="true">#</a> 深入理解python虚拟机：程序执行的载体——栈帧</h1><p>栈帧（Stack Frame）是 Python 虚拟机中程序执行的载体之一，也是 Python 中的一种执行上下文。每当 Python 执行一个函数或方法时，都会创建一个栈帧来表示当前的函数调用，并将其压入一个称为调用栈（Call Stack）的数据结构中。调用栈是一个后进先出（LIFO）的数据结构，用于管理程序中的函数调用关系。</p><p>栈帧的创建和销毁是动态的，随着函数的调用和返回而不断发生。当一个函数被调用时，一个新的栈帧会被创建并推入调用栈，当函数调用结束后，对应的栈帧会从调用栈中弹出并销毁。</p><p>栈帧的使用使得 Python 能够实现函数的嵌套调用和递归调用。通过不断地创建和销毁栈帧，Python 能够跟踪函数调用关系，保存和恢复局部变量的值，实现函数的嵌套和递归执行。同时，栈帧还可以用于实现异常处理、调试信息的收集和优化技术等。</p><p>需要注意的是，栈帧是有限制的，Python 解释器会对栈帧的数量和大小进行限制，以防止栈溢出和资源耗尽的情况发生。在编写 Python 程序时，合理使用函数调用和栈帧可以帮助提高程序的性能和可维护性。</p><h2 id="栈帧数据结构" tabindex="-1"><a class="header-anchor" href="#栈帧数据结构" aria-hidden="true">#</a> 栈帧数据结构</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">_frame</span> <span class="token punctuation">{</span>
    PyObject_VAR_HEAD
    <span class="token keyword">struct</span> <span class="token class-name">_frame</span> <span class="token operator">*</span>f_back<span class="token punctuation">;</span>      <span class="token comment">/* previous frame, or NULL */</span>
    PyCodeObject <span class="token operator">*</span>f_code<span class="token punctuation">;</span>       <span class="token comment">/* code segment */</span>
    PyObject <span class="token operator">*</span>f_builtins<span class="token punctuation">;</span>       <span class="token comment">/* builtin symbol table (PyDictObject) */</span>
    PyObject <span class="token operator">*</span>f_globals<span class="token punctuation">;</span>        <span class="token comment">/* global symbol table (PyDictObject) */</span>
    PyObject <span class="token operator">*</span>f_locals<span class="token punctuation">;</span>         <span class="token comment">/* local symbol table (any mapping) */</span>
    PyObject <span class="token operator">*</span><span class="token operator">*</span>f_valuestack<span class="token punctuation">;</span>    <span class="token comment">/* points after the last local */</span>
    <span class="token comment">/* Next free slot in f_valuestack.  Frame creation sets to f_valuestack.
       Frame evaluation usually NULLs it, but a frame that yields sets it
       to the current stack top. */</span>
    PyObject <span class="token operator">*</span><span class="token operator">*</span>f_stacktop<span class="token punctuation">;</span>
    PyObject <span class="token operator">*</span>f_trace<span class="token punctuation">;</span>          <span class="token comment">/* Trace function */</span>

    <span class="token comment">/* In a generator, we need to be able to swap between the exception
       state inside the generator and the exception state of the calling
       frame (which shouldn&#39;t be impacted when the generator &quot;yields&quot;
       from an except handler).
       These three fields exist exactly for that, and are unused for
       non-generator frames. See the save_exc_state and swap_exc_state
       functions in ceval.c for details of their use. */</span>
    PyObject <span class="token operator">*</span>f_exc_type<span class="token punctuation">,</span> <span class="token operator">*</span>f_exc_value<span class="token punctuation">,</span> <span class="token operator">*</span>f_exc_traceback<span class="token punctuation">;</span>
    <span class="token comment">/* Borrowed reference to a generator, or NULL */</span>
    PyObject <span class="token operator">*</span>f_gen<span class="token punctuation">;</span>

    <span class="token keyword">int</span> f_lasti<span class="token punctuation">;</span>                <span class="token comment">/* Last instruction if called */</span>
    <span class="token comment">/* Call PyFrame_GetLineNumber() instead of reading this field
       directly.  As of 2.3 f_lineno is only valid when tracing is
       active (i.e. when f_trace is set).  At other times we use
       PyCode_Addr2Line to calculate the line from the current
       bytecode index. */</span>
    <span class="token keyword">int</span> f_lineno<span class="token punctuation">;</span>               <span class="token comment">/* Current line number */</span>
    <span class="token keyword">int</span> f_iblock<span class="token punctuation">;</span>               <span class="token comment">/* index in f_blockstack */</span>
    <span class="token keyword">char</span> f_executing<span class="token punctuation">;</span>           <span class="token comment">/* whether the frame is still executing */</span>
    PyTryBlock f_blockstack<span class="token punctuation">[</span>CO_MAXBLOCKS<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">/* for try and loop blocks */</span>
    PyObject <span class="token operator">*</span>f_localsplus<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">/* locals+stack, dynamically sized */</span>
<span class="token punctuation">}</span> PyFrameObject<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="内存申请和栈帧的内存布局" tabindex="-1"><a class="header-anchor" href="#内存申请和栈帧的内存布局" aria-hidden="true">#</a> 内存申请和栈帧的内存布局</h2><p>在 cpython 当中，当我们需要申请一个 frame object 对象的时候，首先需要申请内存空间，但是在申请内存空间的时候并不是单单申请一个 frameobject 大小的内存，而是会申请额外的内存空间，大致布局如下所示。</p><p><img src="https://img2023.cnblogs.com/blog/2519003/202304/2519003-20230425003254479-1199783462.png" alt=""></p><ul><li>f_localsplus，这是一个数组用户保存函数执行的 local 变量，这样可以直接通过下标得到对应的变量的值。</li><li>ncells 和 nfrees，这个变量和我们前面在分析 code object 的函数闭包相关，ncells 和 ncells 分别表示 cellvars 和 freevars 中变量的个数。</li><li>stack，这个变量就是函数执行的时候函数的栈帧，这个大小在编译期间就可以确定因此可以直接确定栈空间的大小。</li></ul><p>下面是在申请 frame object 的核心代码：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>    Py_ssize_t extras<span class="token punctuation">,</span> ncells<span class="token punctuation">,</span> nfrees<span class="token punctuation">;</span>
    ncells <span class="token operator">=</span> <span class="token function">PyTuple_GET_SIZE</span><span class="token punctuation">(</span>code<span class="token operator">-&gt;</span>co_cellvars<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 得到 co_cellvars 当中元素的个数 没有的话则是 0</span>
    nfrees <span class="token operator">=</span> <span class="token function">PyTuple_GET_SIZE</span><span class="token punctuation">(</span>code<span class="token operator">-&gt;</span>co_freevars<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 得到 co_freevars 当中元素的个数 没有的话则是 0</span>
    <span class="token comment">// extras 就是表示除了申请 frame object 自己的内存之后还需要额外申请多少个 指针对象</span>
    <span class="token comment">// 确切的带来说是用于保存 PyObject 的指针</span>
    extras <span class="token operator">=</span> code<span class="token operator">-&gt;</span>co_stacksize <span class="token operator">+</span> code<span class="token operator">-&gt;</span>co_nlocals <span class="token operator">+</span> ncells <span class="token operator">+</span>
        nfrees<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>free_list <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        f <span class="token operator">=</span> <span class="token function">PyObject_GC_NewVar</span><span class="token punctuation">(</span>PyFrameObject<span class="token punctuation">,</span> <span class="token operator">&amp;</span>PyFrame_Type<span class="token punctuation">,</span>
        extras<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>f <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">Py_DECREF</span><span class="token punctuation">(</span>builtins<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 这个就是函数的 code object 对象 将其保存到栈帧当中 f 就是栈帧对象</span>
    f<span class="token operator">-&gt;</span>f_code <span class="token operator">=</span> code<span class="token punctuation">;</span>
    extras <span class="token operator">=</span> code<span class="token operator">-&gt;</span>co_nlocals <span class="token operator">+</span> ncells <span class="token operator">+</span> nfrees<span class="token punctuation">;</span>
    <span class="token comment">// 这个就是栈顶的位置 注意这里加上的 extras 并不包含栈的大小</span>
    f<span class="token operator">-&gt;</span>f_valuestack <span class="token operator">=</span> f<span class="token operator">-&gt;</span>f_localsplus <span class="token operator">+</span> extras<span class="token punctuation">;</span>
    <span class="token comment">// 对额外申请的内存空间尽心初始化操作</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>extras<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
        f<span class="token operator">-&gt;</span>f_localsplus<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    f<span class="token operator">-&gt;</span>f_locals <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    f<span class="token operator">-&gt;</span>f_trace <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    f<span class="token operator">-&gt;</span>f_exc_type <span class="token operator">=</span> f<span class="token operator">-&gt;</span>f_exc_value <span class="token operator">=</span> f<span class="token operator">-&gt;</span>f_exc_traceback <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

    f<span class="token operator">-&gt;</span>f_stacktop <span class="token operator">=</span> f<span class="token operator">-&gt;</span>f_valuestack<span class="token punctuation">;</span> <span class="token comment">// 将栈顶的指针指向栈的起始位置</span>
    f<span class="token operator">-&gt;</span>f_builtins <span class="token operator">=</span> builtins<span class="token punctuation">;</span>
    <span class="token function">Py_XINCREF</span><span class="token punctuation">(</span>back<span class="token punctuation">)</span><span class="token punctuation">;</span>
    f<span class="token operator">-&gt;</span>f_back <span class="token operator">=</span> back<span class="token punctuation">;</span>
    <span class="token function">Py_INCREF</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">Py_INCREF</span><span class="token punctuation">(</span>globals<span class="token punctuation">)</span><span class="token punctuation">;</span>
    f<span class="token operator">-&gt;</span>f_globals <span class="token operator">=</span> globals<span class="token punctuation">;</span>
    <span class="token comment">/* Most functions have CO_NEWLOCALS and CO_OPTIMIZED set. */</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>code<span class="token operator">-&gt;</span>co_flags <span class="token operator">&amp;</span> <span class="token punctuation">(</span>CO_NEWLOCALS <span class="token operator">|</span> CO_OPTIMIZED<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span>
        <span class="token punctuation">(</span>CO_NEWLOCALS <span class="token operator">|</span> CO_OPTIMIZED<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">;</span> <span class="token comment">/* f_locals = NULL; will be set by PyFrame_FastToLocals() */</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>code<span class="token operator">-&gt;</span>co_flags <span class="token operator">&amp;</span> CO_NEWLOCALS<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        locals <span class="token operator">=</span> <span class="token function">PyDict_New</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>locals <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">Py_DECREF</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        f<span class="token operator">-&gt;</span>f_locals <span class="token operator">=</span> locals<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>locals <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
            locals <span class="token operator">=</span> globals<span class="token punctuation">;</span>
        <span class="token function">Py_INCREF</span><span class="token punctuation">(</span>locals<span class="token punctuation">)</span><span class="token punctuation">;</span>
        f<span class="token operator">-&gt;</span>f_locals <span class="token operator">=</span> locals<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    f<span class="token operator">-&gt;</span>f_lasti <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    f<span class="token operator">-&gt;</span>f_lineno <span class="token operator">=</span> code<span class="token operator">-&gt;</span>co_firstlineno<span class="token punctuation">;</span>
    f<span class="token operator">-&gt;</span>f_iblock <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    f<span class="token operator">-&gt;</span>f_executing <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    f<span class="token operator">-&gt;</span>f_gen <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在我们对 frame object 对象当中的各个字段进行分析，说明他们的作用：</p><ul><li>PyObject_VAR_HEAD：表示对象的头部信息，包括引用计数和类型信息。</li><li>f_back：前一个栈帧对象的指针，或者为NULL。</li><li>f_code：指向 PyCodeObject 对象的指针，表示当前帧执行的代码段。</li><li>f_builtins：指向 PyDictObject 对象的指针，表示当前帧的内置符号表，字典对象，键是字符串，值是对应的 python 对象。</li><li>f_globals：指向 PyDictObject 对象的指针，表示当前帧的全局符号表。</li><li>f_locals：指向任意映射对象的指针，表示当前帧的局部符号表。</li><li>f_valuestack：指向当前帧的值栈底部的指针。</li><li>f_stacktop：指向当前帧的值栈顶部的指针。</li><li>f_trace：指向跟踪函数对象的指针，用于调试和追踪代码执行过程，这个字段我们在后面的文章当中再进行分析。</li><li>f_exc_type、f_exc_value、f_exc_traceback：这个字段和异常相关，在函数执行的时候可能会产生错误异常，这个就是用于处理异常相关的字段。</li><li>f_gen：指向当前生成器对象的指针，如果当前帧不是生成器，则为NULL。</li><li>f_lasti：上一条指令在字节码当中的下标。</li><li>f_lineno：当前执行的代码行号。</li><li>f_iblock：当前执行的代码块在f_blockstack中的索引，这个字段也主要和异常的处理有关系。</li><li>f_executing：表示当前帧是否仍在执行。</li><li>f_blockstack：用于try和loop代码块的堆栈，最多可以嵌套 CO_MAXBLOCKS 层。</li><li>f_localsplus：局部变量和值栈的组合，是一个动态大小的数组。</li></ul><p>如果我们在一个函数当中调用另外一个函数，这个函数再调用其他函数就会形成函数的调用链，就会形成下图所示的链式结构。</p><p><img src="https://img2023.cnblogs.com/blog/2519003/202304/2519003-20230425003254829-2133890674.png" alt=""></p><h2 id="例子分析" tabindex="-1"><a class="header-anchor" href="#例子分析" aria-hidden="true">#</a> 例子分析</h2><p>我们现在来模拟一下下面的函数的执行过程。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>
<span class="token keyword">import</span> dis


<span class="token keyword">def</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    a <span class="token operator">=</span> <span class="token number">1</span>
    b <span class="token operator">=</span> <span class="token number">2</span>
    <span class="token keyword">return</span> a <span class="token operator">+</span> b


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    dis<span class="token punctuation">.</span>dis<span class="token punctuation">(</span>foo<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>foo<span class="token punctuation">.</span>__code__<span class="token punctuation">.</span>co_stacksize<span class="token punctuation">)</span>
    foo<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的 foo 函数的字节码如下所示：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>  <span class="token number">6</span>           <span class="token number">0</span> LOAD_CONST               <span class="token number">1</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
              <span class="token number">2</span> STORE_FAST               <span class="token number">0</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span>

  <span class="token number">7</span>           <span class="token number">4</span> LOAD_CONST               <span class="token number">2</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
              <span class="token number">6</span> STORE_FAST               <span class="token number">1</span> <span class="token punctuation">(</span>b<span class="token punctuation">)</span>

  <span class="token number">8</span>           <span class="token number">8</span> LOAD_FAST                <span class="token number">0</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span>
             <span class="token number">10</span> LOAD_FAST                <span class="token number">1</span> <span class="token punctuation">(</span>b<span class="token punctuation">)</span>
             <span class="token number">12</span> BINARY_ADD
             <span class="token number">14</span> RETURN_VALUE
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>函数 foo 的 stacksize 等于 2 。</p><p>初始时 frameobject 的布局如下所示：</p><p><img src="https://img2023.cnblogs.com/blog/2519003/202304/2519003-20230425003255187-1492136622.png" alt=""></p><p>现在执行第一条指令 LOAD_CONST 此时的 f_lasti 等于 -1，执行完这条字节码之后栈帧情况如下：</p><p><img src="https://img2023.cnblogs.com/blog/2519003/202304/2519003-20230425003255525-225992318.png" alt=""></p><p>在执行完这条字节码之后 f_lasti 的值变成 0。字节码 LOAD_CONST 对应的 c 源代码如下所示：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">TARGET</span><span class="token punctuation">(</span>LOAD_CONST<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    PyObject <span class="token operator">*</span>value <span class="token operator">=</span> <span class="token function">GETITEM</span><span class="token punctuation">(</span>consts<span class="token punctuation">,</span> oparg<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 从常量表当中取出下标为 oparg 的对象</span>
    <span class="token function">Py_INCREF</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">PUSH</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">FAST_DISPATCH</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先是从 consts 将对应的常量拿出来，然后压入栈空间当中。</p><p>再执行 STORE_FAST 指令，这个指令就是将栈顶的元素弹出然后保存到前面提到的 f_localsplus 数组当中去，那么现在栈空间是空的。STORE_FAST 对应的 c 源代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">TARGET</span><span class="token punctuation">(</span>STORE_FAST<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    PyObject <span class="token operator">*</span>value <span class="token operator">=</span> <span class="token function">POP</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将栈顶元素弹出</span>
    <span class="token function">SETLOCAL</span><span class="token punctuation">(</span>oparg<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 保存到 f_localsplus 数组当中去</span>
    <span class="token function">FAST_DISPATCH</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行完这条指令之后 f_lasti 的值变成 2 。</p><p>接下来的两条指令和上面的一样，就不做分析了，在执行完两条指令，f_lasti 变成 6 。</p><p>接下来两条指令分别将 a b 加载进入栈空间单中现在栈空间布局如下所示：</p><p><img src="https://img2023.cnblogs.com/blog/2519003/202304/2519003-20230425003256020-874259084.png" alt=""></p><p>然后执行 BINARY_ADD 指令 弹出栈空间的两个元素并且把他们进行相加操作，最后将得到的结果再压回栈空间当中。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">TARGET</span><span class="token punctuation">(</span>BINARY_ADD<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    PyObject <span class="token operator">*</span>right <span class="token operator">=</span> <span class="token function">POP</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    PyObject <span class="token operator">*</span>left <span class="token operator">=</span> <span class="token function">TOP</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    PyObject <span class="token operator">*</span>sum<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">PyUnicode_CheckExact</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
             <span class="token function">PyUnicode_CheckExact</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        sum <span class="token operator">=</span> <span class="token function">unicode_concatenate</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">,</span> f<span class="token punctuation">,</span> next_instr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">/* unicode_concatenate consumed the ref to left */</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token punctuation">{</span>
        sum <span class="token operator">=</span> <span class="token function">PyNumber_Add</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">Py_DECREF</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">Py_DECREF</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">SET_TOP</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将结果压入栈中</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
        <span class="token keyword">goto</span> error<span class="token punctuation">;</span>
    <span class="token function">DISPATCH</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后执行 RETURN_VALUE 指令将栈空间结果返回。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>在本篇文章当中主要介绍了 cpython 当中的函数执行的时候的栈帧结构，这里面包含的程序执行时候所需要的一些必要的变量，比如说全局变量，python 内置的一些对象等等，同时需要注意的是 python 在查询对象的时候如果本地 f_locals 没有找到就会去全局 f_globals 找，如果还没有找到就会去 f_builtins 里面的找，当一个程序返回的时候就会找到 f_back 他上一个执行的栈帧，将其设置成当前线程正在使用的栈帧，这就完成了函数的调用返回，关于这个栈帧还有一些其他的字段我们没有谈到在后续的文章当中将继续深入其中一些字段。</p><hr><p>本篇文章是深入理解 python 虚拟机系列文章之一，文章地址：https://github.com/Chang-LeHung/dive-into-cpython</p>`,43),k={href:"https://github.com/Chang-LeHung/CSCore",target:"_blank",rel:"noopener noreferrer"},d=n("p",null,[s("关注公众号：一无是处的研究僧，了解更多计算机（Java、Python、计算机系统基础、算法与数据结构）知识。 "),n("img",{src:t,alt:""})],-1);function v(m,b){const a=p("ExternalLinkIcon");return o(),c("div",null,[r,n("p",null,[s("更多精彩内容合集可访问项目："),n("a",k,[s("https://github.com/Chang-LeHung/CSCore"),l(a)])]),d])}const g=e(u,[["render",v],["__file","07frameobject_upload.html.vue"]]);export{g as default};
