import{_ as i}from"./chunks/qrcode2.CrPWRJyg.js";import{_ as a,c as n,a2 as t,o as p}from"./chunks/framework.BEX9PuV7.js";const l="/dive-into-cpython/assets/45-bytecode.CzQ6R7A6.png",h="/dive-into-cpython/assets/46-bytecode.BFs61YkM.png",b=JSON.parse('{"title":"深入理解 python 虚拟机：令人拍案叫绝的字节码设计","description":"","frontmatter":{},"headers":[],"relativePath":"pvm/03bytecode.md","filePath":"pvm/03bytecode.md","lastUpdated":1761064794000}'),e={name:"pvm/03bytecode.md"};function k(d,s,r,E,F,y){return p(),n("div",null,s[0]||(s[0]=[t('<h1 id="深入理解-python-虚拟机-令人拍案叫绝的字节码设计" tabindex="-1">深入理解 python 虚拟机：令人拍案叫绝的字节码设计 <a class="header-anchor" href="#深入理解-python-虚拟机-令人拍案叫绝的字节码设计" aria-label="Permalink to &quot;深入理解 python 虚拟机：令人拍案叫绝的字节码设计&quot;">​</a></h1><p>在本篇文章当中主要给大家介绍 cpython 虚拟机对于字节码的设计以及在调试过程当中一个比较重要的字段 co_lnotab 的设计原理！</p><h2 id="python-字节码设计" tabindex="-1">python 字节码设计 <a class="header-anchor" href="#python-字节码设计" aria-label="Permalink to &quot;python 字节码设计&quot;">​</a></h2><p>一条 python 字节码主要有两部分组成，一部分是操作码，一部分是这个操作码的参数，在 cpython 当中只有部分字节码有参数，如果对应的字节码没有参数，那么 oparg 的值就等于 0 ，在 cpython 当中 opcode &lt; 90 的指令是没有参数的。</p><p><img src="'+l+`" alt="45-bytecode"></p><p>opcode 和 oparg 各占一个字节，cpython 虚拟机使用小端方式保存字节码。</p><p>我们使用下面的代码片段先了解一下字节码的设计：</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dis</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a, b):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> __name__</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;__main__&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(add.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">__code__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.co_code)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;bytecode: &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">list</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">bytearray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(add.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">__code__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.co_code)))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    dis.dis(add)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>上面的代码在 python3.9 的输出如下所示：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">b</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&#39;|\\x00|\\x01\\x17\\x00S\\x00&#39;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bytecode:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  [124, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">0,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 124,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 1,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 23,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 0,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 83,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 0]</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  5</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">           0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> LOAD_FAST</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (a)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">              2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> LOAD_FAST</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (b)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">              4</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> BINARY_ADD</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">              6</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> RETURN_VALUE</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>首先 需要了解的是 add.__code__.co_code 是函数 add 的字节码，是一个字节序列，<code>list(bytearray(add.__code__.co_code))</code> 是将和这个序列一个字节一个字节进行分开，并且将其变成 10 进制形式。根据前面我们谈到的每一条指令——字节码占用 2 个字节，因此上面的字节码有四条指令： <img src="`+h+`" alt="45-bytecode"></p><p>操作码和对应的操作指令在文末有详细的对应表。在上面的代码当中主要使用到了三个字节码指令分别是 124，23 和 83 ，他们对应的操作指令分别为 LOAD_FAST，BINARY_ADD，RETURN_VALUE。他们的含义如下：</p><ul><li>LOAD_FAST：将 varnames[var_num] 压入栈顶。</li><li>BINARY_ADD：从栈中弹出两个对象并且将它们相加的结果压入栈顶。</li><li>RETURN_VALUE：弹出栈顶的元素，将其作为函数的返回值。</li></ul><p>首先我们需要知道的是 BINARY_ADD 和 RETURN_VALUE，这两个操作指令是没有参数的，因此在这两个操作码之后的参数都是 0 。</p><p>但是 LOAD_FAST 是有参数的，在上面我们已经知道 LOAD_FAST 是将 co-varnames[var_num] 压入栈，var_num 就是指令 LOAD_FAST 的参数。在上面的代码当中一共有两条 LOAD_FAST 指令，分别是将 a 和 b 压入到栈中，他们在 varnames 当中的下标分别是 0 和 1，因此他们的操作数就是 0 和 1 。</p><h2 id="字节码扩展参数" tabindex="-1">字节码扩展参数 <a class="header-anchor" href="#字节码扩展参数" aria-label="Permalink to &quot;字节码扩展参数&quot;">​</a></h2><p>在上面我们谈到的 python 字节码操作数和操作码各占一个字节，但是如果 varnames 或者常量表的数据的个数大于 1 个字节的表示范围的话那么改如何处理呢？</p><p>为了解决这个问题，cpython 为字节码设计的扩展参数，比如说我们要加载常量表当中的下标为 66113 的对象，那么对应的字节码如下：</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">144</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">144</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">65</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>其中 144 表示 EXTENDED_ARG，他本质上不是一个 python 虚拟机需要执行的字节码，这个字段设计出来主要是为了用与计算扩展参数的。</p><p>100 对应的操作指令是 LOAD_CONST ，其操作码是 65，但是上面的指令并不会加载常量表当中下标为 65 对象，而是会加载下标为 66113 的对象，原因就是因为 EXTENDED_ARG 。</p><p>现在来模拟一下上面的分析过程：</p><ul><li>先读取一条字节码指令，操作码等于 144 ，说明是扩展参数，那么此时的参数 arg 就等于 (1 x (1 &lt;&lt; 8)) = 256 。</li><li>读取第二条字节码指令，操作码等于 144 ，说明是扩展参数，因为前面 arg 已经存在切不等于 0 了，那么此时 arg 的计算方式已经发生了改变，arg = arg &lt;&lt; 8 + 2 &lt;&lt; 8 ，也就是说原来的 arg 乘以 256 再加上新的操作数乘以 256 ，此时 arg = 66048 。</li><li>读取第三条字节码指令，操作码等于 100，此时是 LOAD_CONST 这条指令，那么此时的操作码等于 arg += 65，因为操作码不是 EXTENDED_ARG 因此操作数不需要在乘以 256 了。</li></ul><p>上面的计算过程用程序代码表示如下，下面的代码当中 code 就是真正的字节序列 HAVE_ARGUMENT = 90 。</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> _unpack_opargs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(code):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    extended_arg </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> range</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">len</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(code), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        op </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> code[i]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> op </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> HAVE_ARGUMENT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            arg </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> code[i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> extended_arg</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            extended_arg </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (arg </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> op </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> EXTENDED_ARG</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> else</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            arg </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> None</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        yield</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (i, op, arg)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>我们可以使用代码来验证我们前面的分析：</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dis</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> num_to_byte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(n):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n.to_bytes(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;little&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> nums_to_bytes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ans </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> b</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.join([num_to_byte(n) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> data])</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ans</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> __name__</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;__main__&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # extended_arg extended_num opcode oparg for python_version &gt; 3.5</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    bytecode </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> nums_to_bytes([</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">144</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">144</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">65</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(bytecode)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    dis.dis(bytecode)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>上面的代码输出结果如下所示：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">b</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&#39;\\x90\\x01\\x90\\x02dA&#39;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">          0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> EXTENDED_ARG</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">             1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">          2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> EXTENDED_ARG</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">           258</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">          4</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> LOAD_CONST</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">           66113</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (66113)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>根据上面程序的输出结果可以看到我们的分析结果是正确的。</p><h2 id="源代码字节码映射表" tabindex="-1">源代码字节码映射表 <a class="header-anchor" href="#源代码字节码映射表" aria-label="Permalink to &quot;源代码字节码映射表&quot;">​</a></h2><p>在本小节主要分析一个 code object 对象当中的 co_lnotab 字段，通过分析一个具体的字段来学习这个字段的设计。</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dis</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a, b):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> __name__</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;__main__&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    dis.dis(add.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">__code__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{list</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">bytearray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(add.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">__code__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.co_lnotab)) = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">add.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">__code__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.co_firstlineno = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>首先 dis 的输出第一列是字节码对应的源代码的行号，第二列是字节码在字节序列当中的位移。</p><p>上面的代码输出结果如下所示：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  源代码的行号</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  字节码的位移</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  6</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">           0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> LOAD_FAST</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (a)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">              2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> LOAD_CONST</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">               1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (1)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">              4</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> INPLACE_ADD</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">              6</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> STORE_FAST</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">               0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (a)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  7</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">           8</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> LOAD_FAST</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (b)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">             10</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> LOAD_CONST</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">               2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (2)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">             12</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> INPLACE_ADD</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">             14</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> STORE_FAST</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">               1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (b)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  8</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">          16</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> LOAD_FAST</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (a)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">             18</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> LOAD_FAST</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (b)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">             20</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> BINARY_ADD</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">             22</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> RETURN_VALUE</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">list(bytearray(add.__code__.co_lnotab</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) = [0, 1, 8, 1, 8, 1]</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add.__code__.co_firstlineno</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>从上面代码的输出结果可以看出字节码一共分成三段，每段表示一行代码的字节码。现在我们来分析一下 co_lnotab 这个字段，这个字段其实也是两个字节为一段的。比如上面的 [0, 1, 8, 1, 8, 1] 就可以分成三段 [0, 1], [8, 1], [8, 1] 。这其中的含义分别为：</p><ul><li>第一个数字表示距离上一行代码的字节码数目。</li><li>第二个数字表示距离上一行有效代码的行数。</li></ul><p>现在我们来模拟上面代码的字节码的位移和源代码行数之间的关系：</p><ul><li>[0, 1]，说明这行代码离上一行代码的字节位移是 0 ，因此我们可以看到使用 dis 输出的字节码 LOAD_FAST ，前面的数字是 0，距离上一行代码的行数等于 1 ，代码的第一行的行号等于 5，因此 LOAD_FAST 对应的行号等于 5 + 1 = 6 。</li><li>[8, 1]，说明这行代码距离上一行代码的字节位移为 8 个字节，因此第二块的 LOAD_FAST 前面是 8 ，距离上一行代码的行数等于 1，因此这个字节码对应的源代码的行号等于 6 + 1 = 7。</li><li>[8, 1]，同理可以知道这块字节码对应源代码的行号是 8 。</li></ul><p>现在有一个问题是当两行代码之间相距的行数超过 一个字节的表示范围怎么办？在 python3.5 以后如果行数差距大于 127，那么就使用 (0, 行数) 对下一个组合进行表示，(0, $x_1$), (0,$ x_2$) ... ，直到 $x_1 + ... + x_n$ = 行数。</p><p>在后面的程序当中我们会使用 compile 这个 python 内嵌函数。当你使用Python编写代码时，可以使用<code>compile()</code>函数将Python代码编译成字节代码对象。这个字节码对象可以被传递给Python的解释器或虚拟机，以执行代码。</p><p><code>compile()</code>函数接受三个参数：</p><ul><li><code>source</code>: 要编译的Python代码，可以是字符串，字节码或AST对象。</li><li><code>filename</code>: 代码来源的文件名（如果有），通常为字符串。</li><li><code>mode</code>: 编译代码的模式。可以是 &#39;exec&#39;、&#39;eval&#39; 或 &#39;single&#39; 中的一个。&#39;exec&#39; 模式用于编译多行代码，&#39;eval&#39; 用于编译单个表达式，&#39;single&#39; 用于编译单行代码。</li></ul><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dis</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">code </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">x=1</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">y=2</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> \\</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 500</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> \\</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">z=x+y</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">code </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> compile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(code, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&lt;string&gt;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;exec&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">list</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">bytearray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(code.co_lnotab)))</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(code.co_firstlineno)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dis.dis(code)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>上面的代码输出结果如下所示：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[0, 1, 4, 1, 4, 127, 0, 127, 0, 127, 0, 121]</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  2</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">           0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> LOAD_CONST</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">               0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (1)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">              2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> STORE_NAME</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">               0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (x)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  3</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">           4</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> LOAD_CONST</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">               1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (2)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">              6</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> STORE_NAME</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">               1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (y)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">505</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">           8</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> LOAD_NAME</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (x)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">             10</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> LOAD_NAME</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (y)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">             12</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> BINARY_ADD</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">             14</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> STORE_NAME</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">               2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (z)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">             16</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> LOAD_CONST</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">               2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (None)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">             18</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> RETURN_VALUE</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>根据我们前面的分析因为第三行和第二行之间的差距大于 127 ，因此后面的多个组合都是用于表示行数的。</p><p>505 = 3(前面已经有三行了) + (127 + 127 + 127 + 121)(这个是第二行和第三行之间的差距，这个值为 502，中间有 500 个换行但是因为字符串相加的原因还增加了两个换行，因此一共是 502 个换行)。</p><p>具体的算法用代码表示如下所示，下面的参数就是我们传递给 dis 模块的 code，也就是一个 code object 对象。</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> findlinestarts</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(code):</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;Find the offsets in a byte code which are start of lines in the source.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    Generate pairs (offset, lineno) as described in Python/compile.c.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    byte_increments </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> code.co_lnotab[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    line_increments </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> code.co_lnotab[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    bytecode_len </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> len</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(code.co_code)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    lastlineno </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> None</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    lineno </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> code.co_firstlineno</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    addr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> byte_incr, line_incr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> zip</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(byte_increments, line_increments):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> byte_incr:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lineno </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lastlineno:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                yield</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (addr, lineno)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                lastlineno </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lineno</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            addr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> byte_incr</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> addr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bytecode_len:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                # The rest of the lnotab byte offsets are past the end of</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                # the bytecode, so the lines were optimized away.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                return</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> line_incr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> 0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">80</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            # line_increments is an array of 8-bit signed integers</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            line_incr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> 0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        lineno </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> line_incr</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lineno </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lastlineno:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        yield</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (addr, lineno)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><h2 id="python-字节码表" tabindex="-1">python 字节码表 <a class="header-anchor" href="#python-字节码表" aria-label="Permalink to &quot;python 字节码表&quot;">​</a></h2><table tabindex="0"><thead><tr><th>操作</th><th>操作码</th></tr></thead><tbody><tr><td>POP_TOP</td><td>1</td></tr><tr><td>ROT_TWO</td><td>2</td></tr><tr><td>ROT_THREE</td><td>3</td></tr><tr><td>DUP_TOP</td><td>4</td></tr><tr><td>DUP_TOP_TWO</td><td>5</td></tr><tr><td>ROT_FOUR</td><td>6</td></tr><tr><td>NOP</td><td>9</td></tr><tr><td>UNARY_POSITIVE</td><td>10</td></tr><tr><td>UNARY_NEGATIVE</td><td>11</td></tr><tr><td>UNARY_NOT</td><td>12</td></tr><tr><td>UNARY_INVERT</td><td>15</td></tr><tr><td>BINARY_MATRIX_MULTIPLY</td><td>16</td></tr><tr><td>INPLACE_MATRIX_MULTIPLY</td><td>17</td></tr><tr><td>BINARY_POWER</td><td>19</td></tr><tr><td>BINARY_MULTIPLY</td><td>20</td></tr><tr><td>BINARY_MODULO</td><td>22</td></tr><tr><td>BINARY_ADD</td><td>23</td></tr><tr><td>BINARY_SUBTRACT</td><td>24</td></tr><tr><td>BINARY_SUBSCR</td><td>25</td></tr><tr><td>BINARY_FLOOR_DIVIDE</td><td>26</td></tr><tr><td>BINARY_TRUE_DIVIDE</td><td>27</td></tr><tr><td>INPLACE_FLOOR_DIVIDE</td><td>28</td></tr><tr><td>INPLACE_TRUE_DIVIDE</td><td>29</td></tr><tr><td>RERAISE</td><td>48</td></tr><tr><td>WITH_EXCEPT_START</td><td>49</td></tr><tr><td>GET_AITER</td><td>50</td></tr><tr><td>GET_ANEXT</td><td>51</td></tr><tr><td>BEFORE_ASYNC_WITH</td><td>52</td></tr><tr><td>END_ASYNC_FOR</td><td>54</td></tr><tr><td>INPLACE_ADD</td><td>55</td></tr><tr><td>INPLACE_SUBTRACT</td><td>56</td></tr><tr><td>INPLACE_MULTIPLY</td><td>57</td></tr><tr><td>INPLACE_MODULO</td><td>59</td></tr><tr><td>STORE_SUBSCR</td><td>60</td></tr><tr><td>DELETE_SUBSCR</td><td>61</td></tr><tr><td>BINARY_LSHIFT</td><td>62</td></tr><tr><td>BINARY_RSHIFT</td><td>63</td></tr><tr><td>BINARY_AND</td><td>64</td></tr><tr><td>BINARY_XOR</td><td>65</td></tr><tr><td>BINARY_OR</td><td>66</td></tr><tr><td>INPLACE_POWER</td><td>67</td></tr><tr><td>GET_ITER</td><td>68</td></tr><tr><td>GET_YIELD_FROM_ITER</td><td>69</td></tr><tr><td>PRINT_EXPR</td><td>70</td></tr><tr><td>LOAD_BUILD_CLASS</td><td>71</td></tr><tr><td>YIELD_FROM</td><td>72</td></tr><tr><td>GET_AWAITABLE</td><td>73</td></tr><tr><td>LOAD_ASSERTION_ERROR</td><td>74</td></tr><tr><td>INPLACE_LSHIFT</td><td>75</td></tr><tr><td>INPLACE_RSHIFT</td><td>76</td></tr><tr><td>INPLACE_AND</td><td>77</td></tr><tr><td>INPLACE_XOR</td><td>78</td></tr><tr><td>INPLACE_OR</td><td>79</td></tr><tr><td>LIST_TO_TUPLE</td><td>82</td></tr><tr><td>RETURN_VALUE</td><td>83</td></tr><tr><td>IMPORT_STAR</td><td>84</td></tr><tr><td>SETUP_ANNOTATIONS</td><td>85</td></tr><tr><td>YIELD_VALUE</td><td>86</td></tr><tr><td>POP_BLOCK</td><td>87</td></tr><tr><td>POP_EXCEPT</td><td>89</td></tr><tr><td>STORE_NAME</td><td>90</td></tr><tr><td>DELETE_NAME</td><td>91</td></tr><tr><td>UNPACK_SEQUENCE</td><td>92</td></tr><tr><td>FOR_ITER</td><td>93</td></tr><tr><td>UNPACK_EX</td><td>94</td></tr><tr><td>STORE_ATTR</td><td>95</td></tr><tr><td>DELETE_ATTR</td><td>96</td></tr><tr><td>STORE_GLOBAL</td><td>97</td></tr><tr><td>DELETE_GLOBAL</td><td>98</td></tr><tr><td>LOAD_CONST</td><td>100</td></tr><tr><td>LOAD_NAME</td><td>101</td></tr><tr><td>BUILD_TUPLE</td><td>102</td></tr><tr><td>BUILD_LIST</td><td>103</td></tr><tr><td>BUILD_SET</td><td>104</td></tr><tr><td>BUILD_MAP</td><td>105</td></tr><tr><td>LOAD_ATTR</td><td>106</td></tr><tr><td>COMPARE_OP</td><td>107</td></tr><tr><td>IMPORT_NAME</td><td>108</td></tr><tr><td>IMPORT_FROM</td><td>109</td></tr><tr><td>JUMP_FORWARD</td><td>110</td></tr><tr><td>JUMP_IF_FALSE_OR_POP</td><td>111</td></tr><tr><td>JUMP_IF_TRUE_OR_POP</td><td>112</td></tr><tr><td>JUMP_ABSOLUTE</td><td>113</td></tr><tr><td>POP_JUMP_IF_FALSE</td><td>114</td></tr><tr><td>POP_JUMP_IF_TRUE</td><td>115</td></tr><tr><td>LOAD_GLOBAL</td><td>116</td></tr><tr><td>IS_OP</td><td>117</td></tr><tr><td>CONTAINS_OP</td><td>118</td></tr><tr><td>JUMP_IF_NOT_EXC_MATCH</td><td>121</td></tr><tr><td>SETUP_FINALLY</td><td>122</td></tr><tr><td>LOAD_FAST</td><td>124</td></tr><tr><td>STORE_FAST</td><td>125</td></tr><tr><td>DELETE_FAST</td><td>126</td></tr><tr><td>RAISE_VARARGS</td><td>130</td></tr><tr><td>CALL_FUNCTION</td><td>131</td></tr><tr><td>MAKE_FUNCTION</td><td>132</td></tr><tr><td>BUILD_SLICE</td><td>133</td></tr><tr><td>LOAD_CLOSURE</td><td>135</td></tr><tr><td>LOAD_DEREF</td><td>136</td></tr><tr><td>STORE_DEREF</td><td>137</td></tr><tr><td>DELETE_DEREF</td><td>138</td></tr><tr><td>CALL_FUNCTION_KW</td><td>141</td></tr><tr><td>CALL_FUNCTION_EX</td><td>142</td></tr><tr><td>SETUP_WITH</td><td>143</td></tr><tr><td>LIST_APPEND</td><td>145</td></tr><tr><td>SET_ADD</td><td>146</td></tr><tr><td>MAP_ADD</td><td>147</td></tr><tr><td>LOAD_CLASSDEREF</td><td>148</td></tr><tr><td>EXTENDED_ARG</td><td>144</td></tr><tr><td>SETUP_ASYNC_WITH</td><td>154</td></tr><tr><td>FORMAT_VALUE</td><td>155</td></tr><tr><td>BUILD_CONST_KEY_MAP</td><td>156</td></tr><tr><td>BUILD_STRING</td><td>157</td></tr><tr><td>LOAD_METHOD</td><td>160</td></tr><tr><td>CALL_METHOD</td><td>161</td></tr><tr><td>LIST_EXTEND</td><td>162</td></tr><tr><td>SET_UPDATE</td><td>163</td></tr><tr><td>DICT_MERGE</td><td>164</td></tr><tr><td>DICT_UPDATE</td><td>165</td></tr></tbody></table><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>在本篇文章当中主要给大家介绍了 cpython 当中对于字节码和源代码和字节码之间的映射关系的具体设计，这对于我们深入去理解 cpython 虚拟机的设计非常有帮助！</p><hr><p>本篇文章是深入理解 python 虚拟机系列文章之一，文章地址：<a href="https://github.com/Chang-LeHung/dive-into-cpython" target="_blank" rel="noreferrer">https://github.com/Chang-LeHung/dive-into-cpython</a></p><p>更多精彩内容合集可访问项目：<a href="https://github.com/Chang-LeHung/CSCore" target="_blank" rel="noreferrer">https://github.com/Chang-LeHung/CSCore</a></p><p>关注公众号：一无是处的研究僧，了解更多计算机（Java、Python、计算机系统基础、算法与数据结构）知识。</p><p><img src="`+i+'" alt=""></p>',60)]))}const o=a(e,[["render",k]]);export{b as __pageData,o as default};
