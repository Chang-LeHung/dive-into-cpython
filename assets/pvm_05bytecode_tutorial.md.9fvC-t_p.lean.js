import{_ as i}from"./chunks/qrcode2.CrPWRJyg.js";import{_ as a,c as n,a2 as p,o as t}from"./chunks/framework.BEX9PuV7.js";const l="/dive-into-cpython/assets/56-bytecode.DAvVyAtx.png",h="/dive-into-cpython/assets/57-bytecode.APGH-pYN.png",e="/dive-into-cpython/assets/58-bytecode.pHFgJZEZ.png",k="/dive-into-cpython/assets/59-bytecode.DS5CjXmC.png",r="/dive-into-cpython/assets/60-bytecode.oW-wJ9yx.png",F="/dive-into-cpython/assets/61-bytecode.DAMsndiA.png",d="/dive-into-cpython/assets/62-bytecode.CYyTvjM_.png",g="/dive-into-cpython/assets/63-bytecode.vkIMzE9E.png",E="/dive-into-cpython/assets/64-bytecode.C0Atzn6X.png",c="/dive-into-cpython/assets/65-bytecode.5Tif1Fut.png",P=JSON.parse('{"title":"深入理解 python 虚拟机：字节码教程(2)——控制流是如何实现的？","description":"","frontmatter":{},"headers":[],"relativePath":"pvm/05bytecode_tutorial.md","filePath":"pvm/05bytecode_tutorial.md","lastUpdated":1759555172000}'),y={name:"pvm/05bytecode_tutorial.md"};function o(C,s,b,_,u,B){return t(),n("div",null,s[0]||(s[0]=[p(`<h1 id="深入理解-python-虚拟机-字节码教程-2-——控制流是如何实现的" tabindex="-1">深入理解 python 虚拟机：字节码教程(2)——控制流是如何实现的？ <a class="header-anchor" href="#深入理解-python-虚拟机-字节码教程-2-——控制流是如何实现的" aria-label="Permalink to &quot;深入理解 python 虚拟机：字节码教程(2)——控制流是如何实现的？&quot;">​</a></h1><p>在本篇文章当中主要给大家分析 python 当中与控制流有关的字节码，通过对这部分字节码的了解，我们可以更加深入了解 python 字节码的执行过程和控制流实现原理。</p><h2 id="控制流实现" tabindex="-1">控制流实现 <a class="header-anchor" href="#控制流实现" aria-label="Permalink to &quot;控制流实现&quot;">​</a></h2><p>控制流这部分代码主要涉及下面几条字节码指令，下面的所有字节码指令都会有一个参数：</p><ul><li><strong>JUMP_FORWARD</strong>，指令完整条指令会将当前执行字节码指令的位置加上这个参数，然后跳到对应的结果继续执行。</li><li><strong>POP_JUMP_IF_TRUE</strong>，如果栈顶元素等于 true，将字节码的执行位置改成参数的值。将栈顶元素弹出。</li><li><strong>POP_JUMP_IF_FALSE</strong>，这条指令和 <strong>POP_JUMP_IF_TRUE</strong> 一样，唯一差别就是判断栈顶元素是否等于 true。</li><li><strong>JUMP_IF_TRUE_OR_POP</strong>，如果栈顶元素等于等于 true 则将字节码执行位置设置成参数对应的值，并且不需要将栈顶元素弹出。但是如果栈顶元素是 false 的话那么就需要将栈顶元素弹出。</li><li><strong>JUMP_IF_FALSE_OR_POP</strong>，和<strong>JUMP_IF_TRUE_OR_POP</strong>一样只不过需要栈顶元素等于 false 。</li><li><strong>JUMP_ABSOLUTE</strong>，直接将字节码的执行位置设置成参数的值。</li></ul><p>总的来说，这些跳转指令可以让 Python 的解释器在执行字节码时根据特定条件来改变执行流程，实现循环、条件语句等基本语言结构。</p><p>现在我们使用一个例子来深入理解上面的各种指令的执行过程。</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dis</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test_control01</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">():</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;a &gt; 1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    elif</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;a &lt; 1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;a == 1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> __name__</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;__main__&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    dis.dis(test_control01)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>上面的程序输出结果如下所示：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  6</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">           0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> LOAD_CONST</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">               1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (1)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">              2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> STORE_FAST</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">               0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (a)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  8</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">           4</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> LOAD_FAST</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (a)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">              6</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> LOAD_CONST</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">               1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (1)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">              8</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> COMPARE_OP</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">               4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (&gt;)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">             10</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> POP_JUMP_IF_FALSE</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">       22</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  9</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">          12</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> LOAD_GLOBAL</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (print)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">             14</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> LOAD_CONST</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">               2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;a &gt; 1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">             16</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> CALL_FUNCTION</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">             18</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> POP_TOP</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">             20</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> JUMP_FORWARD</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            26</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (to </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">48</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> 10</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     &gt;&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   22</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> LOAD_FAST</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (a)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">             24</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> LOAD_CONST</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">               1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (1)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">             26</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> COMPARE_OP</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">               0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (&lt;)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">             28</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> POP_JUMP_IF_FALSE</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">       40</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> 11</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">          30</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> LOAD_GLOBAL</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (print)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">             32</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> LOAD_CONST</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">               3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;a &lt; 1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">             34</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> CALL_FUNCTION</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">             36</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> POP_TOP</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">             38</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> JUMP_FORWARD</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">             8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (to </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">48</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> 13</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     &gt;&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   40</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> LOAD_GLOBAL</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (print)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">             42</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> LOAD_CONST</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">               4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;a == 1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">             44</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> CALL_FUNCTION</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">             46</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> POP_TOP</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        &gt;&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   48</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> LOAD_CONST</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">               0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (None)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">             50</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> RETURN_VALUE</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><p>我们现在来模拟一下上面的字节码执行过程，我们使用 counter 表示当前字节码的执行位置：</p><p>在字节码还没开始执行之前，栈空间和 counter 的状态如下：</p><p><img src="`+l+'" alt="56-bytecode"></p><p>现在执行第一条字节码 LOAD_CONST，执行完之后 counter = 2，因为这条字节码占一个字节，参数栈一个字节，因此下次执行的字节码的位置在 bytecode 的低三个位置，对应的下标为 2，因此 counter = 2 。</p><p><img src="'+h+'" alt="56-bytecode"></p><p>现在执行第二条字节码 STORE_FAST，让 a 指向 1 ，同样的 STORE_FAST 操作码和操作数各占一个字节，因此执行完这条字节码之后栈空间没有数据，counter = 4 。</p><p><img src="'+e+'" alt="56-bytecode"></p><p>接下来 LOAD_FAST 将 a 指向的对象也就是 1 加载进入栈中，此时的 counter = 6，LOAD_CONST 将常量 1 加载进行入栈空间当中，此时 counter = 8，在执行完这两条指令之后，栈空间的变化如下图所示：</p><p><img src="'+k+'" alt="56-bytecode"></p><p>接下来的一条指令是 COMPARE_OP ，这个指令有一个参数表示比较的符号，这里是比较 a &gt; 1，并且会将比较的结果压入栈中，比较的结果是 false ，因为 COMPARE_OP 首先会将栈空间的两个输入弹出，因此在执行完这条指令之后栈空间和 counter 的值如下：</p><p><img src="'+r+'" alt="56-bytecode"></p><p>下面一条指令为 POP_JUMP_IF_FALSE，根据前面的字节码含义，这个字节码会将栈顶的 false 弹出，并且会进行跳转，并且将 counter 的值直接编程参数的值，这里他的参数是 22 ，因此 counter = 22，在执行完这条指令之后，结果如下：</p><p><img src="'+F+'" alt="56-bytecode"></p><p>因为现在已经跳转到了 22 ，因此接下来执行的指令为 LOAD_FAST，将变量 a 加载进入栈空间，LOAD_CONST 将常量 1 加载进入栈空间，在执行完这两条执行之后，变化情况如下：</p><p><img src="'+d+'" alt="56-bytecode"></p><p>在次执行 POP_JUMP_IF_FALSE，这回的结果也是 false ，因此继续执行 POP_JUMP_IF_FALSE，这次的参数是 40，直接将 counter 的值设置成 40 。</p><p><img src="'+g+'" alt="56-bytecode"></p><p>接下来 LOAD_GLOBAL 加载一个全局变量 print 函数 counter 变成 42 ，LOAD_CONST 加载字符串 &quot;a == 1&quot; 进入栈空间，counter = 44，此时状态如下：</p><p><img src="'+E+'" alt="56-bytecode"></p><p>CALL_FUNCTION 这个字节码有一个参数，表示调用函数的参数的个数，这里是 1，因为 print 函数只有一个参数，然后输出字符串 &quot;a== 1&quot;，但是这里需要注意的是 print 函数会返回一个 None，因此执行完 CALL_FUNCTION 之后状态如下：</p><p><img src="'+c+'" alt="56-bytecode"></p><p>至此差不多上面的函数差不多执行完了，后面几条字节码很简单，就不再进行叙述了。</p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>在 Python 中，控制流指令可以让解释器根据特定条件改变执行流程，实现循环、条件语句等基本语言结构。Python 中与控制流有关的字节码指令包括 JUMP_FORWARD、POP_JUMP_IF_TRUE、POP_JUMP_IF_FALSE、JUMP_IF_TRUE_OR_POP、JUMP_IF_FALSE_OR_POP 和 JUMP_ABSOLUTE 等。这些指令都有一个参数，主要是用来计算跳转的目标位置等。通过对这些指令的了解，我们可以更深入地理解 Python 字节码的执行过程和控制流实现原理。</p><hr><p>本篇文章是深入理解 python 虚拟机系列文章之一，文章地址：<a href="https://github.com/Chang-LeHung/dive-into-cpython" target="_blank" rel="noreferrer">https://github.com/Chang-LeHung/dive-into-cpython</a></p><p>更多精彩内容合集可访问项目：<a href="https://github.com/Chang-LeHung/CSCore" target="_blank" rel="noreferrer">https://github.com/Chang-LeHung/CSCore</a></p><p>关注公众号：一无是处的研究僧，了解更多计算机（Java、Python、计算机系统基础、算法与数据结构）知识。</p><p><img src="'+i+'" alt=""></p>',39)]))}const A=a(y,[["render",o]]);export{P as __pageData,A as default};
