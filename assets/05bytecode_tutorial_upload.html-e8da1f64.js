import{_ as p}from"./qrcode2-187b7271.js";import{_ as e,r as t,o,c,a as n,d as s,b as l,e as i}from"./app-6b5e6c63.js";const u={},r=i(`<h1 id="深入理解-python-虚拟机-字节码教程-2-——控制流是如何实现的" tabindex="-1"><a class="header-anchor" href="#深入理解-python-虚拟机-字节码教程-2-——控制流是如何实现的" aria-hidden="true">#</a> 深入理解 python 虚拟机：字节码教程(2)——控制流是如何实现的？</h1><p>在本篇文章当中主要给大家分析 python 当中与控制流有关的字节码，通过对这部分字节码的了解，我们可以更加深入了解 python 字节码的执行过程和控制流实现原理。</p><h2 id="控制流实现" tabindex="-1"><a class="header-anchor" href="#控制流实现" aria-hidden="true">#</a> 控制流实现</h2><p>控制流这部分代码主要涉及下面几条字节码指令，下面的所有字节码指令都会有一个参数：</p><ul><li><strong>JUMP_FORWARD</strong>，指令完整条指令会将当前执行字节码指令的位置加上这个参数，然后跳到对应的结果继续执行。</li><li><strong>POP_JUMP_IF_TRUE</strong>，如果栈顶元素等于 true，将字节码的执行位置改成参数的值。将栈顶元素弹出。</li><li><strong>POP_JUMP_IF_FALSE</strong>，这条指令和 <strong>POP_JUMP_IF_TRUE</strong> 一样，唯一差别就是判断栈顶元素是否等于 true。</li><li><strong>JUMP_IF_TRUE_OR_POP</strong>，如果栈顶元素等于等于 true 则将字节码执行位置设置成参数对应的值，并且不需要将栈顶元素弹出。但是如果栈顶元素是 false 的话那么就需要将栈顶元素弹出。</li><li><strong>JUMP_IF_FALSE_OR_POP</strong>，和<strong>JUMP_IF_TRUE_OR_POP</strong>一样只不过需要栈顶元素等于 false 。</li><li><strong>JUMP_ABSOLUTE</strong>，直接将字节码的执行位置设置成参数的值。</li></ul><p>总的来说，这些跳转指令可以让 Python 的解释器在执行字节码时根据特定条件来改变执行流程，实现循环、条件语句等基本语言结构。</p><p>现在我们使用一个例子来深入理解上面的各种指令的执行过程。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>
<span class="token keyword">import</span> dis


<span class="token keyword">def</span> <span class="token function">test_control01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    a <span class="token operator">=</span> <span class="token number">1</span>

    <span class="token keyword">if</span> a <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;a &gt; 1&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">elif</span> a <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;a &lt; 1&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;a == 1&quot;</span><span class="token punctuation">)</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    dis<span class="token punctuation">.</span>dis<span class="token punctuation">(</span>test_control01<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的程序输出结果如下所示：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>  <span class="token number">6</span>           <span class="token number">0</span> LOAD_CONST               <span class="token number">1</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
              <span class="token number">2</span> STORE_FAST               <span class="token number">0</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span>

  <span class="token number">8</span>           <span class="token number">4</span> LOAD_FAST                <span class="token number">0</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span>
              <span class="token number">6</span> LOAD_CONST               <span class="token number">1</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
              <span class="token number">8</span> COMPARE_OP               <span class="token number">4</span> <span class="token punctuation">(</span><span class="token operator">&gt;</span><span class="token punctuation">)</span>
             <span class="token number">10</span> POP_JUMP_IF_FALSE       <span class="token number">22</span>

  <span class="token number">9</span>          <span class="token number">12</span> LOAD_GLOBAL              <span class="token number">0</span> <span class="token punctuation">(</span>print<span class="token punctuation">)</span>
             <span class="token number">14</span> LOAD_CONST               <span class="token number">2</span> <span class="token punctuation">(</span><span class="token string">&#39;a &gt; 1&#39;</span><span class="token punctuation">)</span>
             <span class="token number">16</span> CALL_FUNCTION            <span class="token number">1</span>
             <span class="token number">18</span> POP_TOP
             <span class="token number">20</span> JUMP_FORWARD            <span class="token number">26</span> <span class="token punctuation">(</span>to <span class="token number">48</span><span class="token punctuation">)</span>

 <span class="token number">10</span>     <span class="token operator">&gt;&gt;</span>   <span class="token number">22</span> LOAD_FAST                <span class="token number">0</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span>
             <span class="token number">24</span> LOAD_CONST               <span class="token number">1</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
             <span class="token number">26</span> COMPARE_OP               <span class="token number">0</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token punctuation">)</span>
             <span class="token number">28</span> POP_JUMP_IF_FALSE       <span class="token number">40</span>

 <span class="token number">11</span>          <span class="token number">30</span> LOAD_GLOBAL              <span class="token number">0</span> <span class="token punctuation">(</span>print<span class="token punctuation">)</span>
             <span class="token number">32</span> LOAD_CONST               <span class="token number">3</span> <span class="token punctuation">(</span><span class="token string">&#39;a &lt; 1&#39;</span><span class="token punctuation">)</span>
             <span class="token number">34</span> CALL_FUNCTION            <span class="token number">1</span>
             <span class="token number">36</span> POP_TOP
             <span class="token number">38</span> JUMP_FORWARD             <span class="token number">8</span> <span class="token punctuation">(</span>to <span class="token number">48</span><span class="token punctuation">)</span>

 <span class="token number">13</span>     <span class="token operator">&gt;&gt;</span>   <span class="token number">40</span> LOAD_GLOBAL              <span class="token number">0</span> <span class="token punctuation">(</span>print<span class="token punctuation">)</span>
             <span class="token number">42</span> LOAD_CONST               <span class="token number">4</span> <span class="token punctuation">(</span><span class="token string">&#39;a == 1&#39;</span><span class="token punctuation">)</span>
             <span class="token number">44</span> CALL_FUNCTION            <span class="token number">1</span>
             <span class="token number">46</span> POP_TOP
        <span class="token operator">&gt;&gt;</span>   <span class="token number">48</span> LOAD_CONST               <span class="token number">0</span> <span class="token punctuation">(</span>None<span class="token punctuation">)</span>
             <span class="token number">50</span> RETURN_VALUE
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们现在来模拟一下上面的字节码执行过程，我们使用 counter 表示当前字节码的执行位置：</p><p>在字节码还没开始执行之前，栈空间和 counter 的状态如下：</p><p><img src="https://img2023.cnblogs.com/blog/2519003/202304/2519003-20230410183232525-1509836492.png" alt=""></p><p>现在执行第一条字节码 LOAD_CONST，执行完之后 counter = 2，因为这条字节码占一个字节，参数栈一个字节，因此下次执行的字节码的位置在 bytecode 的低三个位置，对应的下标为 2，因此 counter = 2 。</p><p><img src="https://img2023.cnblogs.com/blog/2519003/202304/2519003-20230410183232827-626636991.png" alt=""></p><p>现在执行第二条字节码 STORE_FAST，让 a 指向 1 ，同样的 STORE_FAST 操作码和操作数各占一个字节，因此执行完这条字节码之后栈空间没有数据，counter = 4 。</p><p><img src="https://img2023.cnblogs.com/blog/2519003/202304/2519003-20230410183233153-308067382.png" alt=""></p><p>接下来 LOAD_FAST 将 a 指向的对象也就是 1 加载进入栈中，此时的 counter = 6，LOAD_CONST 将常量 1 加载进行入栈空间当中，此时 counter = 8，在执行完这两条指令之后，栈空间的变化如下图所示：</p><p><img src="https://img2023.cnblogs.com/blog/2519003/202304/2519003-20230410183233423-159621690.png" alt=""></p><p>接下来的一条指令是 COMPARE_OP ，这个指令有一个参数表示比较的符号，这里是比较 a &gt; 1，并且会将比较的结果压入栈中，比较的结果是 false ，因为 COMPARE_OP 首先会将栈空间的两个输入弹出，因此在执行完这条指令之后栈空间和 counter 的值如下：</p><p><img src="https://img2023.cnblogs.com/blog/2519003/202304/2519003-20230410183233696-1403260426.png" alt=""></p><p>下面一条指令为 POP_JUMP_IF_FALSE，根据前面的字节码含义，这个字节码会将栈顶的 false 弹出，并且会进行跳转，并且将 counter 的值直接编程参数的值，这里他的参数是 22 ，因此 counter = 22，在执行完这条指令之后，结果如下：</p><p><img src="https://img2023.cnblogs.com/blog/2519003/202304/2519003-20230410183233983-1429924381.png" alt=""></p><p>因为现在已经跳转到了 22 ，因此接下来执行的指令为 LOAD_FAST，将变量 a 加载进入栈空间，LOAD_CONST 将常量 1 加载进入栈空间，在执行完这两条执行之后，变化情况如下：</p><p><img src="https://img2023.cnblogs.com/blog/2519003/202304/2519003-20230410183234285-1813252832.png" alt=""></p><p>在次执行 POP_JUMP_IF_FALSE，这回的结果也是 false ，因此继续执行 POP_JUMP_IF_FALSE，这次的参数是 40，直接将 counter 的值设置成 40 。</p><p><img src="https://img2023.cnblogs.com/blog/2519003/202304/2519003-20230410183234602-1978151706.png" alt=""></p><p>接下来 LOAD_GLOBAL 加载一个全局变量 print 函数 counter 变成 42 ，LOAD_CONST 加载字符串 &quot;a == 1&quot; 进入栈空间，counter = 44，此时状态如下：</p><p><img src="https://img2023.cnblogs.com/blog/2519003/202304/2519003-20230410183234905-866387084.png" alt=""></p><p>CALL_FUNCTION 这个字节码有一个参数，表示调用函数的参数的个数，这里是 1，因为 print 函数只有一个参数，然后输出字符串 &quot;a== 1&quot;，但是这里需要注意的是 print 函数会返回一个 None，因此执行完 CALL_FUNCTION 之后状态如下：</p><p><img src="https://img2023.cnblogs.com/blog/2519003/202304/2519003-20230410183235221-351530226.png" alt=""></p><p>至此差不多上面的函数差不多执行完了，后面几条字节码很简单，就不再进行叙述了。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>在 Python 中，控制流指令可以让解释器根据特定条件改变执行流程，实现循环、条件语句等基本语言结构。Python 中与控制流有关的字节码指令包括 JUMP_FORWARD、POP_JUMP_IF_TRUE、POP_JUMP_IF_FALSE、JUMP_IF_TRUE_OR_POP、JUMP_IF_FALSE_OR_POP 和 JUMP_ABSOLUTE 等。这些指令都有一个参数，主要是用来计算跳转的目标位置等。通过对这些指令的了解，我们可以更深入地理解 Python 字节码的执行过程和控制流实现原理。</p><hr><p>本篇文章是深入理解 python 虚拟机系列文章之一，文章地址：https://github.com/Chang-LeHung/dive-into-cpython</p>`,36),m={href:"https://github.com/Chang-LeHung/CSCore",target:"_blank",rel:"noopener noreferrer"},d=n("p",null,"关注公众号：一无是处的研究僧，了解更多计算机（Java、Python、计算机系统基础、算法与数据结构）知识。",-1),k=n("p",null,[n("img",{src:p,alt:""})],-1);function b(_,v){const a=t("ExternalLinkIcon");return o(),c("div",null,[r,n("p",null,[s("更多精彩内容合集可访问项目："),n("a",m,[s("https://github.com/Chang-LeHung/CSCore"),l(a)])]),d,k])}const P=e(u,[["render",b],["__file","05bytecode_tutorial_upload.html.vue"]]);export{P as default};
