import{_ as i}from"./chunks/qrcode2.CrPWRJyg.js";import{_ as a,c as n,a2 as l,o as p}from"./chunks/framework.BEX9PuV7.js";const h="/dive-into-cpython/assets/47-bytecode.BjJovBrL.png",k="/dive-into-cpython/assets/48-bytecode.D0v8I6A9.png",t="/dive-into-cpython/assets/49-bytecode.CIwfO40-.png",e="/dive-into-cpython/assets/50-bytecode.hInB6i25.png",r="/dive-into-cpython/assets/51-bytecode.CaXxDhJ6.png",d="/dive-into-cpython/assets/52-bytecode.BN_J-Drk.png",F="/dive-into-cpython/assets/54-bytecode.DgeVCPFs.png",m=JSON.parse('{"title":"深入理解 python 虚拟机：字节码教程(1)——原来装饰器是这样实现的","description":"","frontmatter":{},"headers":[],"relativePath":"pvm/04bytecode_tutorial.md","filePath":"pvm/04bytecode_tutorial.md","lastUpdated":1759555029000}'),g={name:"pvm/04bytecode_tutorial.md"};function E(y,s,C,c,b,o){return p(),n("div",null,s[0]||(s[0]=[l(`<h1 id="深入理解-python-虚拟机-字节码教程-1-——原来装饰器是这样实现的" tabindex="-1">深入理解 python 虚拟机：字节码教程(1)——原来装饰器是这样实现的 <a class="header-anchor" href="#深入理解-python-虚拟机-字节码教程-1-——原来装饰器是这样实现的" aria-label="Permalink to &quot;深入理解 python 虚拟机：字节码教程(1)——原来装饰器是这样实现的&quot;">​</a></h1><p>在本篇文章当中主要给大家介绍在 cpython 当中一些比较常见的字节码，从根本上理解 python 程序的执行。在本文当中主要介绍一些 python 基本操作的字节码，并且将从字节码的角度分析函数装饰器的原理！</p><h2 id="python-常见字节码" tabindex="-1">Python 常见字节码 <a class="header-anchor" href="#python-常见字节码" aria-label="Permalink to &quot;Python 常见字节码&quot;">​</a></h2><h3 id="load-const" tabindex="-1">LOAD_CONST <a class="header-anchor" href="#load-const" aria-label="Permalink to &quot;LOAD_CONST&quot;">​</a></h3><p>这个指令用于将一个常量加载到栈中。常量可以是数字、字符串、元组、列表、字典等对象。例如：</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;&gt;&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dis.dis(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">lambda</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">42</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">           0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> LOAD_CONST</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">               1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">42</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              2</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> RETURN_VALUE</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="load-name" tabindex="-1">LOAD_NAME <a class="header-anchor" href="#load-name" aria-label="Permalink to &quot;LOAD_NAME&quot;">​</a></h3><p>这个指令用于将一个变量加载到栈中。例如：</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;&gt;&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dis.dis(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">lambda</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: x)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">           0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> LOAD_GLOBAL</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (x)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              2</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> RETURN_VALUE</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;&gt;&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="store-name" tabindex="-1">STORE_NAME <a class="header-anchor" href="#store-name" aria-label="Permalink to &quot;STORE_NAME&quot;">​</a></h3><p>这个指令用于将栈顶的值存储到一个变量中。例如：</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;&gt;&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dis.dis(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;x=42&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">           0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> LOAD_CONST</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">               0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">42</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              2</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> STORE_NAME</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">               0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (x)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              4</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> LOAD_CONST</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">               1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">None</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              6</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> RETURN_VALUE</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="binary-add" tabindex="-1">BINARY_ADD <a class="header-anchor" href="#binary-add" aria-label="Permalink to &quot;BINARY_ADD&quot;">​</a></h3><p>这个指令用于对栈顶的两个值进行加法运算并将结果推送到栈中。</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;&gt;&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dis.dis(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">lambda</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">           0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> LOAD_GLOBAL</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (x)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              2</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> LOAD_GLOBAL</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (y)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              4</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> BINARY_ADD</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              6</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> RETURN_VALUE</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="binary-subtract" tabindex="-1">BINARY_SUBTRACT <a class="header-anchor" href="#binary-subtract" aria-label="Permalink to &quot;BINARY_SUBTRACT&quot;">​</a></h3><p>这个指令用于对栈顶的两个值进行减法运算并将结果推送到栈中。</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;&gt;&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dis.dis(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">lambda</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">           0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> LOAD_GLOBAL</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (x)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              2</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> LOAD_GLOBAL</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (y)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              4</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> BINARY_SUBTRACT</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              6</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> RETURN_VALUE</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>同样的加减乘除取余数的字节码如下所示：</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;&gt;&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dis.dis(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">lambda</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">           0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> LOAD_GLOBAL</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (x)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              2</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> LOAD_GLOBAL</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (y)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              4</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> BINARY_ADD</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              6</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> RETURN_VALUE</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;&gt;&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dis.dis(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">lambda</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">           0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> LOAD_GLOBAL</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (x)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              2</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> LOAD_GLOBAL</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (y)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              4</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> BINARY_SUBTRACT</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              6</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> RETURN_VALUE</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;&gt;&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dis.dis(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">lambda</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">           0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> LOAD_GLOBAL</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (x)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              2</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> LOAD_GLOBAL</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (y)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              4</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> BINARY_MULTIPLY</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              6</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> RETURN_VALUE</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;&gt;&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dis.dis(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">lambda</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">           0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> LOAD_GLOBAL</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (x)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              2</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> LOAD_GLOBAL</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (y)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              4</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> BINARY_TRUE_DIVIDE</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              6</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> RETURN_VALUE</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;&gt;&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dis.dis(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">lambda</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">//</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">           0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> LOAD_GLOBAL</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (x)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              2</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> LOAD_GLOBAL</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (y)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              4</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> BINARY_FLOOR_DIVIDE</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              6</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> RETURN_VALUE</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;&gt;&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dis.dis(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">lambda</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">           0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> LOAD_GLOBAL</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (x)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              2</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> LOAD_GLOBAL</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (y)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              4</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> BINARY_MODULO</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              6</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> RETURN_VALUE</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div><h3 id="compare-op" tabindex="-1">COMPARE_OP <a class="header-anchor" href="#compare-op" aria-label="Permalink to &quot;COMPARE_OP&quot;">​</a></h3><p>这个指令用于比较栈顶的两个值，并且将比较得到的结果压入栈中，这个字节码后面后一个字节的参数，表示小于大于不等于等等比较符号。例如：</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;&gt;&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dis.dis(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">lambda</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">           0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> LOAD_GLOBAL</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (x)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              2</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> LOAD_GLOBAL</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (y)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              4</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> BINARY_SUBTRACT</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              6</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> RETURN_VALUE</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;&gt;&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dis.dis(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">lambda</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">           0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> LOAD_GLOBAL</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (x)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              2</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> LOAD_GLOBAL</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (y)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              4</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> COMPARE_OP</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">               4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              6</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> RETURN_VALUE</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;&gt;&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dis.dis(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">lambda</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">           0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> LOAD_GLOBAL</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (x)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              2</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> LOAD_GLOBAL</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (y)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              4</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> COMPARE_OP</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">               0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              6</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> RETURN_VALUE</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;&gt;&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dis.dis(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">lambda</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">           0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> LOAD_GLOBAL</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (x)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              2</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> LOAD_GLOBAL</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (y)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              4</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> COMPARE_OP</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">               3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              6</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> RETURN_VALUE</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;&gt;&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dis.dis(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">lambda</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">           0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> LOAD_GLOBAL</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (x)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              2</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> LOAD_GLOBAL</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (y)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              4</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> COMPARE_OP</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">               1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              6</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> RETURN_VALUE</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;&gt;&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dis.dis(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">lambda</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">           0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> LOAD_GLOBAL</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (x)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              2</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> LOAD_GLOBAL</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (y)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              4</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> COMPARE_OP</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">               5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              6</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> RETURN_VALUE</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;&gt;&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dis.dis(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">lambda</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">           0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> LOAD_GLOBAL</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (x)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              2</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> LOAD_GLOBAL</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (y)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              4</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> COMPARE_OP</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">               2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              6</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> RETURN_VALUE</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br></div></div><h3 id="return-value" tabindex="-1">RETURN_VALUE <a class="header-anchor" href="#return-value" aria-label="Permalink to &quot;RETURN_VALUE&quot;">​</a></h3><p>将栈顶元素弹出作为返回值。</p><h3 id="build-list" tabindex="-1">BUILD_LIST <a class="header-anchor" href="#build-list" aria-label="Permalink to &quot;BUILD_LIST&quot;">​</a></h3><p>这个指令用于创建一个列表。例如：</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;&gt;&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dis.dis(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">lambda</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [a, b, c, e])</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">           0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> LOAD_GLOBAL</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (a)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              2</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> LOAD_GLOBAL</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (b)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              4</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> LOAD_GLOBAL</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (c)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              6</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> LOAD_GLOBAL</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (e)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              8</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> BUILD_LIST</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">               4</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">             10</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> RETURN_VALUE</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>这条字节码指令有一个参数表示栈空间当中列表元素的个数，在上面的例子当中这个参数是 4 。</p><h3 id="build-tuple" tabindex="-1">BUILD_TUPLE <a class="header-anchor" href="#build-tuple" aria-label="Permalink to &quot;BUILD_TUPLE&quot;">​</a></h3><p>这个指令用于创建一个元组。例如：</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;&gt;&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dis.dis(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">lambda</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: (a, b, c))</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">           0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> LOAD_GLOBAL</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (a)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              2</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> LOAD_GLOBAL</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (b)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              4</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> LOAD_GLOBAL</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (c)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              6</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> BUILD_TUPLE</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              3</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              8</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> RETURN_VALUE</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>同样的这个字节码也有一个参数，表示创建元组的元素个数。</p><h3 id="build-map" tabindex="-1">BUILD_MAP <a class="header-anchor" href="#build-map" aria-label="Permalink to &quot;BUILD_MAP&quot;">​</a></h3><p>这个指令用于创建一个字典。例如：</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="build-set" tabindex="-1">BUILD_SET <a class="header-anchor" href="#build-set" aria-label="Permalink to &quot;BUILD_SET&quot;">​</a></h3><p>和 list 和 tuple 一样，这条指令是用于创建一个集合对象，同样的这条指令也有一个参数表示用于创建集合的元素的个数。</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;&gt;&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dis.dis(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">lambda</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {a, b, c, d})</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">           0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> LOAD_GLOBAL</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (a)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              2</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> LOAD_GLOBAL</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (b)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              4</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> LOAD_GLOBAL</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (c)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              6</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> LOAD_GLOBAL</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (d)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              8</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> BUILD_SET</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                4</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">             10</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> RETURN_VALUE</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="build-const-key-map" tabindex="-1">BUILD_CONST_KEY_MAP <a class="header-anchor" href="#build-const-key-map" aria-label="Permalink to &quot;BUILD_CONST_KEY_MAP&quot;">​</a></h3><p>这条指令是用于创建一个字典对象，同样的这条指令也有一个参数，表示字典当中元素的个数。</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;&gt;&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dis.dis(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">lambda</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">           0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> LOAD_CONST</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">               1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              2</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> LOAD_CONST</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">               2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              4</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> LOAD_CONST</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">               3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ((</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              6</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> BUILD_CONST_KEY_MAP</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      2</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              8</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> RETURN_VALUE</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="从字节码角度分析装饰器的原理" tabindex="-1">从字节码角度分析装饰器的原理 <a class="header-anchor" href="#从字节码角度分析装饰器的原理" aria-label="Permalink to &quot;从字节码角度分析装饰器的原理&quot;">​</a></h2><p>如果你是一个 pythoner 那么你肯定或多或少听说过装饰器，这是一个 python 的语法糖我们可以用它来做很多有趣的事情，比如在不修改源代码的基础之上给函数附加一些功能，比如说计算时间。</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> time</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> eval_time</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(func):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> cal_time</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">args, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">**</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">kwargs):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        start </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> time.time()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        r </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> func(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">args, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">**</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">kwargs)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        end </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> time.time()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> r, end </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> start</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cal_time</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@eval_time</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fib</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(n):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        a, b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b, a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>在上面的代码当中我们实现了一个计算斐波拉契数列的函数，除此之外还写了一个 eval_time 函数用于计算函数执行的时间，现在调用函数 fib(10)，程序的输出如下所示：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&gt;&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fib(10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">55,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 5.9604644775390625e-06</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>可以看到实现了我们想要的效果。</p><p>现在我们使用一个更加简单的例子来模拟上面的代码结构，方便我们对上面函数执行的过程进行分析：</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">def decorator(func):</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    print(&quot;Hello&quot;)</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    return func</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">@decorator</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">def fib(n):</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    pass</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dis.dis(s)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>上面的 dis 函数的输出对应代码的字节码如下所示：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  2</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">           0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> LOAD_CONST</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">               0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (&lt;code </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">object</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> decorator</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 0x108068d40,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> file</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&lt;dis&gt;&quot;,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> line</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> 2&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">              2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> LOAD_CONST</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">               1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;decorator&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">              4</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> MAKE_FUNCTION</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">              6</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> STORE_NAME</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">               0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (decorator)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  6</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">           8</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> LOAD_NAME</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (decorator)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  7</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">          10</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> LOAD_CONST</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">               2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (&lt;code </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">object</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> fib</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 0x1075c1710,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> file</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&lt;dis&gt;&quot;,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> line</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> 6&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">             12</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> LOAD_CONST</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">               3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;fib&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">             14</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> MAKE_FUNCTION</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">             16</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> CALL_FUNCTION</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">             18</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> STORE_NAME</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">               1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (fib)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">             20</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> LOAD_CONST</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">               4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (None)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">             22</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> RETURN_VALUE</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Disassembly</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> of</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">code</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> object</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> decorator</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 0x108068d40,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> file</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&lt;dis&gt;&quot;,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> line</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> 2&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  3</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">           0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> LOAD_GLOBAL</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (print)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">              2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> LOAD_CONST</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">               1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Hello&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">              4</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> CALL_FUNCTION</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">              6</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> POP_TOP</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  4</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">           8</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> LOAD_FAST</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (func)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">             10</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> RETURN_VALUE</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Disassembly</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> of</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">code</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> object</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> fib</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 0x1075c1710,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> file</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&lt;dis&gt;&quot;,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> line</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> 6&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  8</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">           0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> LOAD_CONST</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">               0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (None)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">              2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> RETURN_VALUE</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><ul><li>执行第一条指令 LOAD_CONST，这条指令主要是加载一个 code object 对象，这个对象里面主要是包含函数 decorator 的字节码，主要是上面字节码的第二块内容。在执行完这条字节码之后栈空间如下所示：</li></ul><p><img src="`+h+'" alt="47-bytecode"></p><ul><li>执行完第二条指令 LOAD_CONST 之后，会将字符串 decorator 加载进入栈空间当中。</li></ul><p><img src="'+k+'" alt="47-bytecode"></p><ul><li>执行第三条指令 MAKE_FUNCTION，这条字节码的作用是在虚拟机内部创建一个函数，函数的名称为 decorator，函数对应的字节码则是在先前压入栈空间当中的 code object 对象，这条指令还会将创建好的函数对象压入栈中。</li></ul><p><img src="'+t+'" alt="47-bytecode"></p><ul><li>STORE_NAME，条字节码会将栈顶的元素弹出，并且将 co_names[oparg] 指向这个对象，在上面的字节码当中 co_names[oparg] 就是 decorator 。</li></ul><p><img src="'+e+'" alt="47-bytecode"></p><ul><li>LOAD_NAME，这条字节码就是将 co_names[oparg] 对应的名字指向的对象重新加载进入栈空间当中，也就是上面的 decorator 函数加入进行栈空间当中。</li></ul><p><img src="'+r+'" alt="47-bytecode"></p><ul><li>接下来的三条字节码 LOAD_CONST，LOAD_CONST 和 MAKE_FUNCTION，在执行这三条字节码之后，栈空间如下所示：</li></ul><p><img src="'+d+'" alt="47-bytecode"></p><ul><li>接下来的一条指令非常重要，这条指令便是装饰器的核心原理，CALL_FUNCTION 这条指令有一个参数 i，在上面的字节码当中为 1，也就是说从栈顶开始的前 i 个元素都是函数参数，调用的函数在栈空间的位置为 i + 1 （从栈顶往下数），那么在上面的情况下就是说调用 decorator 函数，并且将 fib 函数作为 decorator 函数的参数，decorator 函数的返回值再压入栈顶。在上面的代码当中 decorator 函数返回值也是一个函数，也就是 decorator 函数的参数，即 fib 函数。</li></ul><p><img src="'+F+`" alt="47-bytecode"></p><ul><li>接下来便是 STORE_NAME 字节码，这条字节码的含义我们在前面已经说过了，就是将栈顶元素弹出，保存到 co_names[oparg] 指向的对象当中，在上面的代码当中也就是将栈顶的对象保存到 fib 当中。栈顶元素 fib 函数是调用函数 decorator 的返回值。</li></ul><p>看到这里就能够理解了原来装饰器的最根本的原理不就是函数调用嘛，比如我们最前面的用于计算函数执行时间的装饰器的原理就是：</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fib </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> eval_time(fib)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>将 fib 函数作为 eval_time 函数的参数，再将这个函数的返回值保存到 fib 当中，当然这个对象必须是可调用的，不然后面使用 fib() 就会保存，我们可以使用下面的代码来验证这个效果。</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> decorator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(func):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> func()</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@decorator</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> demo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">():</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;function demo return string : Demo&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(demo)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>执行上面的程序结果为：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> demo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> return string </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Demo</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>可以看到 demo 已经变成了一个字符串对象而不再是一个函数了，因为 <code>demo = decorator(demo)</code>，而在函数 decorator 当中返回值是 demo 函数自己的返回值，因此才打印了字符串。</p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>在本篇文章当中主要给大家介绍了 python 当中一些基础的字节码对应的含义以及示例代码，本篇文章最重要的便是从字节码的角度解释了装饰器的本质原理，这对我们以后使用装饰器非常有帮助，可以灵活的控制和了解装饰器其中发生的故事。</p><hr><p>本篇文章是深入理解 python 虚拟机系列文章之一，文章地址：<a href="https://github.com/Chang-LeHung/dive-into-cpython" target="_blank" rel="noreferrer">https://github.com/Chang-LeHung/dive-into-cpython</a></p><p>更多精彩内容合集可访问项目：<a href="https://github.com/Chang-LeHung/CSCore" target="_blank" rel="noreferrer">https://github.com/Chang-LeHung/CSCore</a></p><p>关注公众号：一无是处的研究僧，了解更多计算机（Java、Python、计算机系统基础、算法与数据结构）知识。</p><p><img src="`+i+'" alt=""></p>',81)]))}const A=a(g,[["render",E]]);export{m as __pageData,A as default};
