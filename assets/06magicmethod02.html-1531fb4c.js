import{_ as e,r as t,o as p,c as o,a as n,d as s,b as c,e as l}from"./app-6b5e6c63.js";const i={},u=l(`<h1 id="深入理解-python-虚拟机-花里胡哨的魔术方法" tabindex="-1"><a class="header-anchor" href="#深入理解-python-虚拟机-花里胡哨的魔术方法" aria-hidden="true">#</a> 深入理解 python 虚拟机：花里胡哨的魔术方法</h1><p>在本篇文章当中主要给大家介绍在 cpython 当中一些比较花里胡哨的魔术方法，以帮助我们自己实现比较花哨的功能，当然这其中也包含一些也非常实用的魔术方法。</p><h2 id="深入分析-hash-方法" tabindex="-1"><a class="header-anchor" href="#深入分析-hash-方法" aria-hidden="true">#</a> 深入分析 hash 方法</h2><p>在 Python 中，<code>__hash__()</code> 方法是一种特殊方法（也称为魔术方法或双下划线方法），用于返回对象的哈希值。哈希值是一个整数，用于在字典（<code>dict</code>）和集合（<code>set</code>）等数据结构中进行快速查找和比较。<code>__hash__()</code> 方法在创建自定义的可哈希对象时非常有用，例如自定义类的实例，以便可以将这些对象用作字典的键或集合的元素。</p><p>下面是一些需要注意的问题和示例来帮助理解 <code>__hash__()</code> 方法：</p><ul><li>如果两个对象相等（根据 <code>__eq__()</code> 方法的定义），它们的哈希值应该相等。即，如果 <code>a == b</code> 为真，则 <code>hash(a) == hash(b)</code> 也为真，这一点非常重要，因为我们在使用集合和字典的时候，就需要保证容器当中每种对象只能够有一个，如果不满足这个条还的话，那么就可能会导致同一种对象在容器当中会存在多个。</li><li>重写 <code>__hash__()</code> 方法通常需要同时重写 <code>__eq__()</code> 方法，以确保对象的相等性和哈希值的一致性。</li><li>如果对象没有定义 <code>__eq__</code>方法，那么也不要定义 <code>__hash__</code>方法，因为如果遇到哈希值相等的对象时候，如果无法对两个对象进行比较的话，那么也会导致容易当中有多个相同的对象。</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> random


<span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name
        self<span class="token punctuation">.</span>age <span class="token operator">=</span> age

    <span class="token keyword">def</span> <span class="token function">__eq__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> other<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>name <span class="token operator">==</span> other<span class="token punctuation">.</span>name <span class="token keyword">and</span> self<span class="token punctuation">.</span>age <span class="token operator">==</span> other<span class="token punctuation">.</span>age

    <span class="token keyword">def</span> <span class="token function">__hash__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token builtin">hash</span><span class="token punctuation">(</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span> self<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">__repr__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f&quot;[name=</span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>name<span class="token punctuation">}</span></span><span class="token string">, age=</span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>age<span class="token punctuation">}</span></span><span class="token string">]&quot;</span></span>


person1 <span class="token operator">=</span> Person<span class="token punctuation">(</span><span class="token string">&quot;Alice&quot;</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span>
person2 <span class="token operator">=</span> Person<span class="token punctuation">(</span><span class="token string">&quot;Alice&quot;</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span>


<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">hash</span><span class="token punctuation">(</span>person1<span class="token punctuation">)</span><span class="token punctuation">)</span>  
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">hash</span><span class="token punctuation">(</span>person2<span class="token punctuation">)</span><span class="token punctuation">)</span>  


container <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
container<span class="token punctuation">.</span>add<span class="token punctuation">(</span>person1<span class="token punctuation">)</span>
container<span class="token punctuation">.</span>add<span class="token punctuation">(</span>person2<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>container<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面代码当中我们重写了 <code>__hash__</code> 函数，但是对象的哈希值每次调用的时候我们都加入一个随机数，因此即使 name 和 age 都相等，如果 hash 值不想等，那么可能会造成容器当中存在多个相同的对象，上面的代码就会造成相同的对象，上面的程序输出结果如下所示：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">1930083569156318318</span>
<span class="token number">1930083569156318292</span>
<span class="token punctuation">{</span><span class="token punctuation">[</span>name<span class="token operator">=</span>Alice, <span class="token assign-left variable">age</span><span class="token operator">=</span><span class="token number">25</span><span class="token punctuation">]</span>, <span class="token punctuation">[</span>name<span class="token operator">=</span>Alice, <span class="token assign-left variable">age</span><span class="token operator">=</span><span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果重写上面的类对象：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name
        self<span class="token punctuation">.</span>age <span class="token operator">=</span> age

    <span class="token keyword">def</span> <span class="token function">__eq__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> other<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>name <span class="token operator">==</span> other<span class="token punctuation">.</span>name <span class="token keyword">and</span> self<span class="token punctuation">.</span>age <span class="token operator">==</span> other<span class="token punctuation">.</span>age

    <span class="token keyword">def</span> <span class="token function">__hash__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token builtin">hash</span><span class="token punctuation">(</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span> self<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">__repr__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f&quot;[name=</span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>name<span class="token punctuation">}</span></span><span class="token string">, age=</span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>age<span class="token punctuation">}</span></span><span class="token string">]&quot;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么容器器当中只会有一个对象。</p><p>如果我们只重写了 <code>__hash__</code>方法的时候也会造成容器当中有多个相同的对象。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name
        self<span class="token punctuation">.</span>age <span class="token operator">=</span> age

    <span class="token comment"># def __eq__(self, other):</span>
    <span class="token comment">#     return self.name == other.name and self.age == other.age</span>

    <span class="token keyword">def</span> <span class="token function">__hash__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token builtin">hash</span><span class="token punctuation">(</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span> self<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># + random.randint(0, 1024)</span>

    <span class="token keyword">def</span> <span class="token function">__repr__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f&quot;[name=</span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>name<span class="token punctuation">}</span></span><span class="token string">, age=</span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>age<span class="token punctuation">}</span></span><span class="token string">]&quot;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是因为如果哈希值相同的时候还需要在比较两个对象是否相等，如果相等那么就不需要将这个对象保存到容器当中，如果不相等那么将会将这个对象加入到容器当中。</p><h2 id="bool-方法" tabindex="-1"><a class="header-anchor" href="#bool-方法" aria-hidden="true">#</a> bool 方法</h2><p>在 Python 中，<code>object.__bool__()</code> 方法是一种特殊方法，用于定义对象的布尔值。它在使用布尔运算符（如 <code>if</code> 语句和逻辑运算）时自动调用。<code>__bool__()</code> 方法应该返回一个布尔值，表示对象的真值。如果 <code>__bool__()</code> 方法未定义，Python 将尝试调用 <code>__len__()</code> 方法来确定对象的真值。如果 <code>__len__()</code> 方法返回零，则对象被视为假；否则，对象被视为真。</p><p>下面是一些需要注意的事项来帮助理解 <code>__bool__()</code> 方法：</p><ul><li><code>__bool__()</code> 方法在对象被应用布尔运算时自动调用。例如，在 <code>if</code> 语句中，对象的真值由 <code>__bool__()</code> 方法确定。</li><li><code>__bool__()</code> 方法应该返回一个布尔值（<code>True</code> 或 <code>False</code>）。</li><li>如果 <code>__bool__()</code> 方法未定义，Python 将尝试调用 <code>__len__()</code> 方法来确定对象的真值。</li><li>当对象的长度为零时，即 <code>__len__()</code> 方法返回零，对象被视为假；否则，对象被视为真。</li><li>如果既未定义 <code>__bool__()</code> 方法，也未定义 <code>__len__()</code> 方法，则对象默认为真。</li></ul><p>下面是一个示例，展示了如何在自定义类中使用 <code>__bool__()</code> 方法：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">NonEmptyList</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> items<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>items <span class="token operator">=</span> items
    
    <span class="token keyword">def</span> <span class="token function">__bool__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>items<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span>

my_list <span class="token operator">=</span> NonEmptyList<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token keyword">if</span> my_list<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;The list is not empty.&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;The list is empty.&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="对象的属性访问" tabindex="-1"><a class="header-anchor" href="#对象的属性访问" aria-hidden="true">#</a> 对象的属性访问</h2><p>在Python中，我们可以通过一些特殊方法来定制属性访问的行为。本文将深入介绍这些特殊方法，包括<code>__getitem__()</code>、<code>__setitem__()</code>、<code>__delitem__()</code>和<code>__getattr__()</code>方法，以帮助更好地理解属性访问的机制和应用场景。</p><p><code>__getitem__()</code>方法是用于索引操作的特殊方法。当我们通过索引访问对象的属性时，Python会自动调用该方法，并传入索引值作为参数。我们可以在该方法中实现对属性的获取操作，并返回相应的值。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">MyList</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    
    <span class="token keyword">def</span> <span class="token function">__getitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>data<span class="token punctuation">[</span>index<span class="token punctuation">]</span>

my_list <span class="token operator">=</span> MyList<span class="token punctuation">(</span><span class="token punctuation">)</span>
my_list<span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>my_list<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 输出: 2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的例子中，我们定义了一个名为MyList的类，它具有一个属性data，该属性是一个列表。通过重写__getitem__()方法，我们使得可以通过索引来访问MyList对象的data属性。当我们使用my_list[1]的形式进行索引操作时，Python会自动调用__getitem__()方法，并将索引值1作为参数传递给该方法。</p><p><code>__setitem__()</code>方法用于属性的设置操作，即通过索引为对象的属性赋值。当我们使用索引操作并赋值给对象的属性时，Python会自动调用<code>__setitem__()</code>方法，并传入索引值和赋值的值作为参数。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">MyList</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span>

    <span class="token keyword">def</span> <span class="token function">__setitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> index<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>data<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> value


my_list <span class="token operator">=</span> MyList<span class="token punctuation">(</span><span class="token punctuation">)</span>

my_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>
my_list<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>my_list<span class="token punctuation">.</span>data<span class="token punctuation">)</span>  <span class="token comment"># 输出: [1, 2]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述示例中，我们重写了<code>__setitem__()</code>方法来实现对对象属性的设置操作。当我们执行my_list[0] = 1和my_list[1] = 2的赋值操作时，Python会自动调用<code>__setitem__()</code>方法，并将索引值和赋值的值传递给该方法。在<code>__setitem__()</code>方法中，我们将值赋给了对象的data属性的相应索引位置。</p><p><code>__delitem__()</code>方法用于删除对象属性的特殊方法。当我们使用del语句删除对象属性时，Python会自动调用<code>__delitem__()</code>方法，并传入要删除的属性的索引值作为参数。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">MyDict</span><span class="token punctuation">:</span>
    
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">__delitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;In __delitem__&quot;</span><span class="token punctuation">)</span>
        <span class="token keyword">del</span> self<span class="token punctuation">.</span>data<span class="token punctuation">[</span>key<span class="token punctuation">]</span>


obj <span class="token operator">=</span> MyDict<span class="token punctuation">(</span><span class="token punctuation">)</span>
obj<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token string">&quot;key&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;val&quot;</span>
<span class="token keyword">del</span> obj<span class="token punctuation">[</span><span class="token string">&quot;key&quot;</span><span class="token punctuation">]</span> <span class="token comment"># 输出 In __delitem__</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>__getattr__()</code> 是一个特殊方法，用于在访问不存在的属性时自动调用。它接收一个参数，即属性名，然后返回相应的值或引发 <code>AttributeError</code> 异常。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">MyClass</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__getattr__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> name <span class="token operator">==</span> <span class="token string">&#39;color&#39;</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token string">&#39;blue&#39;</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            <span class="token keyword">raise</span> AttributeError<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;&#39;MyClass&#39; object has no attribute &#39;</span><span class="token interpolation"><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span><span class="token string">&#39;&quot;</span></span><span class="token punctuation">)</span>

my_obj <span class="token operator">=</span> MyClass<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>my_obj<span class="token punctuation">.</span>color<span class="token punctuation">)</span>  <span class="token comment"># 输出: blue</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>my_obj<span class="token punctuation">.</span>size<span class="token punctuation">)</span>   <span class="token comment"># 引发 AttributeError: &#39;MyClass&#39; object has no attribute &#39;size&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的示例中，当访问 <code>my_obj.color</code> 时，由于 <code>color</code> 属性不存在，Python 会自动调用 <code>__getattr__()</code> 方法，并返回预定义的值 <code>&#39;blue&#39;</code>。而当访问 <code>my_obj.size</code> 时，由于该属性也不存在，<code>__getattr__()</code> 方法会引发 <code>AttributeError</code> 异常。</p><p><code>__setattr__()</code> 是一个特殊方法，用于在设置属性值时自动调用。它接收两个参数，即属性名和属性值。我们可以在该方法中对属性进行处理、验证或记录。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">MyClass</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">&#39;red&#39;</span> <span class="token comment"># 输出：Setting attribute &#39;color&#39; to &#39;red&#39;</span>

    <span class="token keyword">def</span> <span class="token function">__setattr__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;Setting attribute &#39;</span><span class="token interpolation"><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span><span class="token string">&#39; to &#39;</span><span class="token interpolation"><span class="token punctuation">{</span>value<span class="token punctuation">}</span></span><span class="token string">&#39;&quot;</span></span><span class="token punctuation">)</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__setattr__<span class="token punctuation">(</span>name<span class="token punctuation">,</span> value<span class="token punctuation">)</span>


my_obj <span class="token operator">=</span> MyClass<span class="token punctuation">(</span><span class="token punctuation">)</span>
my_obj<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">&#39;blue&#39;</span>  <span class="token comment"># 输出: Setting attribute &#39;color&#39; to &#39;blue&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当我们使用 . 的方式去访问对象属性的时候，首先会调用对象的 <code>__getattribute__</code> 函数，如果属性不存在才会调用 <code>__getattr__</code>。当 <code>__getattribute__</code> 方法无法找到指定的属性时，Python 会调用 <code>__getattr__</code> 方法。以下是在之前的示例类 <code>CustomClass</code> 上添加 <code>__getattr__</code> 方法的代码：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">CustomClass</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>attribute <span class="token operator">=</span> <span class="token string">&quot;Hello, world!&quot;</span>

    <span class="token keyword">def</span> <span class="token function">__getattribute__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;Accessing attribute: </span><span class="token interpolation"><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__getattribute__<span class="token punctuation">(</span>name<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">__getattr__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;Attribute </span><span class="token interpolation"><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span><span class="token string"> not found&quot;</span></span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token boolean">None</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个示例中，我们在 <code>CustomClass</code> 中添加了 <code>__getattr__</code> 方法。当 <code>__getattribute__</code> 方法无法找到指定的属性时，会自动调用 <code>__getattr__</code> 方法，并打印出属性名称 &quot;attribute&quot; 以及未找到属性的提示信息。</p><p>我们执行下面的代码：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>obj <span class="token operator">=</span> CustomClass<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>attribute<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>nonexistent_attribute<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果如下所示：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>Accessing attribute: attribute
Hello, world<span class="token operator">!</span>
Accessing attribute: nonexistent_attribute
Attribute nonexistent_attribute not found
None
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先，我们访问存在的属性 <code>attribute</code>，此时 <code>__getattribute__</code> 方法被调用，并打印出属性名称 &quot;attribute&quot;，然后返回属性的实际值 &quot;Hello, world!&quot;。接着，我们尝试访问不存在的属性 <code>nonexistent_attribute</code>，由于 <code>__getattribute__</code> 方法无法找到该属性，因此会调用 <code>__getattr__</code> 方法，并打印出属性名称 &quot;nonexistent_attribute&quot; 以及未找到属性的提示信息，然后返回 <code>None</code>。</p><h2 id="上下文管理器" tabindex="-1"><a class="header-anchor" href="#上下文管理器" aria-hidden="true">#</a> 上下文管理器</h2><p>当我们需要在特定的代码块执行前后进行一些操作时，上下文管理器是一种非常有用的工具。上下文管理器可以确保资源的正确分配和释放，无论代码块是否出现异常。在Python中，我们可以通过实现 <code>__enter__</code> 和 <code>__exit__</code> 方法来创建自定义的上下文管理器。</p><p>下面是一个简单的上下文管理器示例，展示了如何使用 <code>object.__enter__</code> 和 <code>object.__exit__</code> 方法来创建一个文件操作的上下文管理器：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">FileContextManager</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> filename<span class="token punctuation">,</span> mode<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>filename <span class="token operator">=</span> filename
        self<span class="token punctuation">.</span>mode <span class="token operator">=</span> mode
        self<span class="token punctuation">.</span><span class="token builtin">file</span> <span class="token operator">=</span> <span class="token boolean">None</span>

    <span class="token keyword">def</span> <span class="token function">__enter__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span><span class="token builtin">file</span> <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>filename<span class="token punctuation">,</span> self<span class="token punctuation">.</span>mode<span class="token punctuation">)</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span><span class="token builtin">file</span>

    <span class="token keyword">def</span> <span class="token function">__exit__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> exc_type<span class="token punctuation">,</span> exc_value<span class="token punctuation">,</span> traceback<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span><span class="token builtin">file</span><span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">with</span> FileContextManager<span class="token punctuation">(</span><span class="token string">&#39;example.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;w&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>
    <span class="token builtin">file</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">&#39;Hello, world!&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述示例中，<code>FileContextManager</code> 类实现了 <code>__enter__</code> 和 <code>__exit__</code> 方法。在 <code>__enter__</code> 方法中，我们打开文件并返回文件对象，这样在 <code>with</code> 语句块中就可以使用该文件对象。在 <code>__exit__</code> 方法中，我们关闭文件。</p><p>无论代码块是否抛出异常，<code>__exit__</code> 方法都会被调用来确保文件被正确关闭。这样可以避免资源泄露和文件锁定等问题。使用上下文管理器可以简化代码，并提供一致的资源管理方式，特别适用于需要打开和关闭资源的情况，如文件操作、数据库连接等。</p><p>上述上下文管理器的 <code>__exit__</code> 方法有三个参数：<code>exc_type</code>、<code>exc_value</code> 和 <code>traceback</code>。下面是对这些参数的详细介绍：</p><ul><li><p><code>exc_type</code>（异常类型）：这个参数表示引发的异常的类型。如果在上下文管理器的代码块中没有引发异常，它的值将为 <code>None</code>。如果有异常被引发，<code>exc_type</code> 将是引发异常的类型。</p></li><li><p><code>exc_value</code>（异常值）：这个参数表示引发的异常的实例。它包含了关于异常的详细信息，如错误消息。如果没有异常被引发，它的值也将为 <code>None</code>。</p></li><li><p><code>traceback</code>（回溯信息）：这个参数是一个回溯对象，它包含了关于异常的堆栈跟踪信息。它提供了导致异常的代码路径和调用关系。如果没有异常被引发，它的值将为 <code>None</code>。</p></li></ul><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>在本篇文章当中主要给大家介绍了一些常用和比较重要的魔术方法，这些方法在我们平时用的可能也比较多，比如 hash 和 eq 还有对象的属性访问，为了方便异常处理可以使用 exit 和 enter 这个方法，其实还有很多其他的魔术方法，这些方法在 python 官网都有介绍，可以直接访问 https://docs.python.org/3/reference/datamodel.html 。</p><hr><p>本篇文章是深入理解 python 虚拟机系列文章之一，文章地址：https://github.com/Chang-LeHung/dive-into-cpython</p>`,56),d={href:"https://github.com/Chang-LeHung/CSCore",target:"_blank",rel:"noopener noreferrer"},r=n("p",null,"关注公众号：一无是处的研究僧，了解更多计算机（Java、Python、计算机系统基础、算法与数据结构）知识。",-1),k=n("p",null,[n("img",{src:"https://img2023.cnblogs.com/blog/2519003/202305/2519003-20230515205927052-1345839185.png",alt:""})],-1);function _(v,m){const a=t("ExternalLinkIcon");return p(),o("div",null,[u,n("p",null,[s("更多精彩内容合集可访问项目："),n("a",d,[s("https://github.com/Chang-LeHung/CSCore"),c(a)])]),r,k])}const y=e(i,[["render",_],["__file","06magicmethod02.html.vue"]]);export{y as default};
