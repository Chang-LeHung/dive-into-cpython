import{_ as p}from"./qrcode2-187b7271.js";import{_ as t,r as e,o,c,a as n,d as s,b as l,e as i}from"./app-6b5e6c63.js";const u="/dive-into-cpython/assets/26-dict-c70e9a56.png",r="/dive-into-cpython/assets/27-dict-709df637.png",k={},d=i(`<h1 id="深入理解-python-虚拟机-字典-dict-的实现原理及源码剖析" tabindex="-1"><a class="header-anchor" href="#深入理解-python-虚拟机-字典-dict-的实现原理及源码剖析" aria-hidden="true">#</a> 深入理解 Python 虚拟机：字典（dict）的实现原理及源码剖析</h1><p>在本篇文章当中主要给大家深入介绍一下在 cpython 当中字典的实现原理，在本篇文章当中主要介绍在早期 python3 当中的版本字典的实现，现在的字典做了部分优化，我们在后面的文章当中再介绍。</p><h2 id="字典数据结构分析" tabindex="-1"><a class="header-anchor" href="#字典数据结构分析" aria-hidden="true">#</a> 字典数据结构分析</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">/* The ma_values pointer is NULL for a combined table
 * or points to an array of PyObject* for a split table
 */</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    PyObject_HEAD
    Py_ssize_t ma_used<span class="token punctuation">;</span>
    PyDictKeysObject <span class="token operator">*</span>ma_keys<span class="token punctuation">;</span>
    PyObject <span class="token operator">*</span><span class="token operator">*</span>ma_values<span class="token punctuation">;</span>
<span class="token punctuation">}</span> PyDictObject<span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">_dictkeysobject</span> <span class="token punctuation">{</span>
    Py_ssize_t dk_refcnt<span class="token punctuation">;</span>
    Py_ssize_t dk_size<span class="token punctuation">;</span>
    dict_lookup_func dk_lookup<span class="token punctuation">;</span>
    Py_ssize_t dk_usable<span class="token punctuation">;</span>
    PyDictKeyEntry dk_entries<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    <span class="token comment">/* Cached hash code of me_key. */</span>
    Py_hash_t me_hash<span class="token punctuation">;</span>
    PyObject <span class="token operator">*</span>me_key<span class="token punctuation">;</span>
    PyObject <span class="token operator">*</span>me_value<span class="token punctuation">;</span> <span class="token comment">/* This field is only meaningful for combined tables */</span>
<span class="token punctuation">}</span> PyDictKeyEntry<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+u+'" alt="26-dict"></p><p>上面的各个字段的含义为：</p><ul><li>ob_refcnt，对象的引用计数。</li><li>ob_type，对象的数据类型。</li><li>ma_used，当前哈希表当中的数据个数。</li><li>ma_keys，指向保存键值对的数组。</li><li>ma_values，这个指向值的数组，但是在 cpython 的具体实现当中不一定使用这个值，因为 _dictkeysobject 当中的 PyDictKeyEntry 数组当中的对象也是可以存储 value 的，这个值只有在键全部是字符串的时候才可能会使用，在本篇文章当中主要使用 PyDictKeyEntry 当中的 value 来讨论字典的实现，因此大家可以忽略这个变量。</li><li>dk_refcnt，这个也是用于表示引用计数，这个跟字典的视图有关系，原理和引用计数类似，这里暂时不管。</li><li>dk_size，这个表示哈希表的大小，必须是 $2^n$，这样的话可以将模运算变成位与运算。</li><li>dk_lookup，这个表示哈希表的查找函数，他是一个函数指针。</li><li>dk_usable，表示当前数组当中还有多少个可以使用的键值对。</li><li>dk_entries，哈希表，真正存储键值对的地方。</li></ul><p>整个哈希表的布局大致如下图所示：</p><p><img src="'+r+`" alt="26-dict"></p><h2 id="创建新字典对象" tabindex="-1"><a class="header-anchor" href="#创建新字典对象" aria-hidden="true">#</a> 创建新字典对象</h2><p>这个函数还是比较简单，首先申请内存空间，然后进行一些初始化操作，申请哈希表用于保存键值对。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> PyObject <span class="token operator">*</span>
<span class="token function">dict_new</span><span class="token punctuation">(</span>PyTypeObject <span class="token operator">*</span>type<span class="token punctuation">,</span> PyObject <span class="token operator">*</span>args<span class="token punctuation">,</span> PyObject <span class="token operator">*</span>kwds<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    PyObject <span class="token operator">*</span>self<span class="token punctuation">;</span>
    PyDictObject <span class="token operator">*</span>d<span class="token punctuation">;</span>

    <span class="token function">assert</span><span class="token punctuation">(</span>type <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> type<span class="token operator">-&gt;</span>tp_alloc <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 申请内存空间</span>
    self <span class="token operator">=</span> type<span class="token operator">-&gt;</span><span class="token function">tp_alloc</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>self <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    d <span class="token operator">=</span> <span class="token punctuation">(</span>PyDictObject <span class="token operator">*</span><span class="token punctuation">)</span>self<span class="token punctuation">;</span>

    <span class="token comment">/* The object has been implicitly tracked by tp_alloc */</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">==</span> <span class="token operator">&amp;</span>PyDict_Type<span class="token punctuation">)</span>
        <span class="token function">_PyObject_GC_UNTRACK</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 因为还没有增加数据 因此哈希表当中 ma_used = 0</span>
    d<span class="token operator">-&gt;</span>ma_used <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">// 申请保存键值对的数组  PyDict_MINSIZE_COMBINED 是一个宏定义 值为 8 表示哈希表数组的最小长度</span>
    d<span class="token operator">-&gt;</span>ma_keys <span class="token operator">=</span> <span class="token function">new_keys_object</span><span class="token punctuation">(</span>PyDict_MINSIZE_COMBINED<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 如果申请失败返回 NULL</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>d<span class="token operator">-&gt;</span>ma_keys <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">Py_DECREF</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> self<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// new_keys_object 函数如下所示</span>
<span class="token keyword">static</span> PyDictKeysObject <span class="token operator">*</span><span class="token function">new_keys_object</span><span class="token punctuation">(</span>Py_ssize_t size<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    PyDictKeysObject <span class="token operator">*</span>dk<span class="token punctuation">;</span>
    Py_ssize_t i<span class="token punctuation">;</span>
    PyDictKeyEntry <span class="token operator">*</span>ep0<span class="token punctuation">;</span>

    <span class="token function">assert</span><span class="token punctuation">(</span>size <span class="token operator">&gt;=</span> PyDict_MINSIZE_SPLIT<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assert</span><span class="token punctuation">(</span><span class="token function">IS_POWER_OF_2</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 这里是申请内存的位置真正申请内存空间的大小为 PyDictKeysObject 的大小加上 size-1 个PyDictKeyEntry的大小</span>
    <span class="token comment">// 这里你可能会有一位为啥不是 size 个 PyDictKeyEntry 的大小 因为在结构体 PyDictKeysObject 当中已经申请了一个 PyDictKeyEntry 对象了</span>
    dk <span class="token operator">=</span> <span class="token function">PyMem_MALLOC</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>PyDictKeysObject<span class="token punctuation">)</span> <span class="token operator">+</span>
                      <span class="token keyword">sizeof</span><span class="token punctuation">(</span>PyDictKeyEntry<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>size<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>dk <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">PyErr_NoMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 下面主要是一些初始化的操作 dk_refcnt 设置成 1 因为目前只有一个字典对象使用 这个 PyDictKeysObject 对象</span>
    DK_DEBUG_INCREF dk<span class="token operator">-&gt;</span>dk_refcnt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    dk<span class="token operator">-&gt;</span>dk_size <span class="token operator">=</span> size<span class="token punctuation">;</span> <span class="token comment">// 哈希表的大小</span>
    <span class="token comment">// 下面这行代码主要是表示哈希表当中目前还能存储多少个键值对 在 cpython 的实现当中允许有 2/3 的数组空间去存储数据 超过这个数则需要进行扩容</span>
    dk<span class="token operator">-&gt;</span>dk_usable <span class="token operator">=</span> <span class="token function">USABLE_FRACTION</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// #define USABLE_FRACTION(n) ((((n) &lt;&lt; 1)+1)/3)</span>
    ep0 <span class="token operator">=</span> <span class="token operator">&amp;</span>dk<span class="token operator">-&gt;</span>dk_entries<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">/* Hash value of slot 0 is used by popitem, so it must be initialized */</span>
    ep0<span class="token operator">-&gt;</span>me_hash <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">// 将所有的键值对初始化成 NULL</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ep0<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>me_key <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
        ep0<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>me_value <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    dk<span class="token operator">-&gt;</span>dk_lookup <span class="token operator">=</span> lookdict_unicode_nodummy<span class="token punctuation">;</span>
    <span class="token keyword">return</span> dk<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="哈希表扩容机制" tabindex="-1"><a class="header-anchor" href="#哈希表扩容机制" aria-hidden="true">#</a> 哈希表扩容机制</h2><p>首先我们先了解一下字典实现当中哈希表的扩容机制，当我们不断的往字典当中加入新的数据的时候，很快字典当中的数据就会达到数组长度的 $\\frac{2}{3}$ ，这个时候就需要扩容，扩容之后的数组大小计算方式如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">GROWTH_RATE</span><span class="token expression"><span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token operator">-&gt;</span>ma_used<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token operator">-&gt;</span>ma_keys<span class="token operator">-&gt;</span>dk_size<span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>新的数组的大小等于原来键值对的个数乘以 2 加上原来数组长度的一半。</p><p>总的来说扩容主要有三个步骤：</p><ul><li><p>计算新的数组的大小。</p></li><li><p>创建新的数组。</p></li><li><p>将原来的哈希表当中的数据加入到新的数组当中（也就是再哈希的过程）。</p></li></ul><p>具体的实现代码如下所示：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span>
<span class="token function">insertion_resize</span><span class="token punctuation">(</span>PyDictObject <span class="token operator">*</span>mp<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">dictresize</span><span class="token punctuation">(</span>mp<span class="token punctuation">,</span> <span class="token function">GROWTH_RATE</span><span class="token punctuation">(</span>mp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">int</span>
<span class="token function">dictresize</span><span class="token punctuation">(</span>PyDictObject <span class="token operator">*</span>mp<span class="token punctuation">,</span> Py_ssize_t minused<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Py_ssize_t newsize<span class="token punctuation">;</span>
    PyDictKeysObject <span class="token operator">*</span>oldkeys<span class="token punctuation">;</span>
    PyObject <span class="token operator">*</span><span class="token operator">*</span>oldvalues<span class="token punctuation">;</span>
    Py_ssize_t i<span class="token punctuation">,</span> oldsize<span class="token punctuation">;</span>
    <span class="token comment">// 下面的代码的主要作用就是计算得到能够大于等于 minused 最小的 2 的整数次幂</span>
<span class="token comment">/* Find the smallest table size &gt; minused. */</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>newsize <span class="token operator">=</span> PyDict_MINSIZE_COMBINED<span class="token punctuation">;</span>
         newsize <span class="token operator">&lt;=</span> minused <span class="token operator">&amp;&amp;</span> newsize <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span>
         newsize <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>newsize <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">PyErr_NoMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    oldkeys <span class="token operator">=</span> mp<span class="token operator">-&gt;</span>ma_keys<span class="token punctuation">;</span>
    oldvalues <span class="token operator">=</span> mp<span class="token operator">-&gt;</span>ma_values<span class="token punctuation">;</span>
    <span class="token comment">/* Allocate a new table. */</span>
   <span class="token comment">// 创建新的数组</span>
    mp<span class="token operator">-&gt;</span>ma_keys <span class="token operator">=</span> <span class="token function">new_keys_object</span><span class="token punctuation">(</span>newsize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>mp<span class="token operator">-&gt;</span>ma_keys <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        mp<span class="token operator">-&gt;</span>ma_keys <span class="token operator">=</span> oldkeys<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldkeys<span class="token operator">-&gt;</span>dk_lookup <span class="token operator">==</span> lookdict<span class="token punctuation">)</span>
        mp<span class="token operator">-&gt;</span>ma_keys<span class="token operator">-&gt;</span>dk_lookup <span class="token operator">=</span> lookdict<span class="token punctuation">;</span>
    oldsize <span class="token operator">=</span> <span class="token function">DK_SIZE</span><span class="token punctuation">(</span>oldkeys<span class="token punctuation">)</span><span class="token punctuation">;</span>
    mp<span class="token operator">-&gt;</span>ma_values <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token comment">/* If empty then nothing to copy so just return */</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldsize <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">assert</span><span class="token punctuation">(</span>oldkeys <span class="token operator">==</span> Py_EMPTY_KEYS<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">DK_DECREF</span><span class="token punctuation">(</span>oldkeys<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">/* Main loop below assumes we can transfer refcount to new keys
     * and that value is stored in me_value.
     * Increment ref-counts and copy values here to compensate
     * This (resizing a split table) should be relatively rare */</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldvalues <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> oldsize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>oldvalues<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">Py_INCREF</span><span class="token punctuation">(</span>oldkeys<span class="token operator">-&gt;</span>dk_entries<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>me_key<span class="token punctuation">)</span><span class="token punctuation">;</span>
                oldkeys<span class="token operator">-&gt;</span>dk_entries<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>me_value <span class="token operator">=</span> oldvalues<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">/* Main loop */</span>
    <span class="token comment">// 将原来数组当中的元素加入到新的数组当中</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> oldsize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        PyDictKeyEntry <span class="token operator">*</span>ep <span class="token operator">=</span> <span class="token operator">&amp;</span>oldkeys<span class="token operator">-&gt;</span>dk_entries<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>ep<span class="token operator">-&gt;</span>me_value <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">assert</span><span class="token punctuation">(</span>ep<span class="token operator">-&gt;</span>me_key <span class="token operator">!=</span> dummy<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">insertdict_clean</span><span class="token punctuation">(</span>mp<span class="token punctuation">,</span> ep<span class="token operator">-&gt;</span>me_key<span class="token punctuation">,</span> ep<span class="token operator">-&gt;</span>me_hash<span class="token punctuation">,</span> ep<span class="token operator">-&gt;</span>me_value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 更新一下当前哈希表当中能够插入多少数据</span>
    mp<span class="token operator">-&gt;</span>ma_keys<span class="token operator">-&gt;</span>dk_usable <span class="token operator">-=</span> mp<span class="token operator">-&gt;</span>ma_used<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldvalues <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">/* NULL out me_value slot in oldkeys, in case it was shared */</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> oldsize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
            oldkeys<span class="token operator">-&gt;</span>dk_entries<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>me_value <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
        <span class="token function">assert</span><span class="token punctuation">(</span>oldvalues <span class="token operator">!=</span> empty_values<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">free_values</span><span class="token punctuation">(</span>oldvalues<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">DK_DECREF</span><span class="token punctuation">(</span>oldkeys<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">assert</span><span class="token punctuation">(</span>oldkeys<span class="token operator">-&gt;</span>dk_lookup <span class="token operator">!=</span> lookdict_split<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>oldkeys<span class="token operator">-&gt;</span>dk_lookup <span class="token operator">!=</span> lookdict_unicode_nodummy<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            PyDictKeyEntry <span class="token operator">*</span>ep0 <span class="token operator">=</span> <span class="token operator">&amp;</span>oldkeys<span class="token operator">-&gt;</span>dk_entries<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> oldsize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>ep0<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>me_key <span class="token operator">==</span> dummy<span class="token punctuation">)</span>
                    <span class="token function">Py_DECREF</span><span class="token punctuation">(</span>dummy<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token function">assert</span><span class="token punctuation">(</span>oldkeys<span class="token operator">-&gt;</span>dk_refcnt <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        DK_DEBUG_DECREF <span class="token function">PyMem_FREE</span><span class="token punctuation">(</span>oldkeys<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="字典插入数据" tabindex="-1"><a class="header-anchor" href="#字典插入数据" aria-hidden="true">#</a> 字典插入数据</h2><p>我们在不断的往字典当中插入数据的时候很可能会遇到哈希冲突，字典处理哈希冲突的方法基本和集合遇到哈希冲突的处理方法是差不多的，都是使用开发地址法，但是这个开放地址法实现的相对比较复杂，具体程序如下所示：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span>
<span class="token function">insertdict_clean</span><span class="token punctuation">(</span>PyDictObject <span class="token operator">*</span>mp<span class="token punctuation">,</span> PyObject <span class="token operator">*</span>key<span class="token punctuation">,</span> Py_hash_t hash<span class="token punctuation">,</span>
                 PyObject <span class="token operator">*</span>value<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">size_t</span> i<span class="token punctuation">;</span>
    <span class="token class-name">size_t</span> perturb<span class="token punctuation">;</span>
    PyDictKeysObject <span class="token operator">*</span>k <span class="token operator">=</span> mp<span class="token operator">-&gt;</span>ma_keys<span class="token punctuation">;</span>
    <span class="token comment">// 首先得到 mask 的值</span>
    <span class="token class-name">size_t</span> mask <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">size_t</span><span class="token punctuation">)</span><span class="token function">DK_SIZE</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    PyDictKeyEntry <span class="token operator">*</span>ep0 <span class="token operator">=</span> <span class="token operator">&amp;</span>k<span class="token operator">-&gt;</span>dk_entries<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    PyDictKeyEntry <span class="token operator">*</span>ep<span class="token punctuation">;</span>
  
    i <span class="token operator">=</span> hash <span class="token operator">&amp;</span> mask<span class="token punctuation">;</span>
    ep <span class="token operator">=</span> <span class="token operator">&amp;</span>ep0<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>perturb <span class="token operator">=</span> hash<span class="token punctuation">;</span> ep<span class="token operator">-&gt;</span>me_key <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> perturb <span class="token operator">&gt;&gt;=</span> PERTURB_SHIFT<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 下面便是遇到哈希冲突时的处理办法</span>
        i <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> i <span class="token operator">+</span> perturb <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        ep <span class="token operator">=</span> <span class="token operator">&amp;</span>ep0<span class="token punctuation">[</span>i <span class="token operator">&amp;</span> mask<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">assert</span><span class="token punctuation">(</span>ep<span class="token operator">-&gt;</span>me_value <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ep<span class="token operator">-&gt;</span>me_key <span class="token operator">=</span> key<span class="token punctuation">;</span>
    ep<span class="token operator">-&gt;</span>me_hash <span class="token operator">=</span> hash<span class="token punctuation">;</span>
    ep<span class="token operator">-&gt;</span>me_value <span class="token operator">=</span> value<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>在本篇文章当中主要给大家简单介绍了一下在 cpython 内部字典的实现机制，总的来说整个字典的实现机制还是相当复杂的，本篇文章只是谈到了整个字典实现的一小部分，主要设计字典的内存布局以及相关的数据结构，最重要的字典的创建扩容和插入，这对我们理解哈希表的结构还是非常有帮助的！！！</p><hr><p>本篇文章是深入理解 python 虚拟机系列文章之一，文章地址：https://github.com/Chang-LeHung/dive-into-cpython</p>`,27),v={href:"https://github.com/Chang-LeHung/CSCore",target:"_blank",rel:"noopener noreferrer"},m=n("p",null,"关注公众号：一无是处的研究僧，了解更多计算机（Java、Python、计算机系统基础、算法与数据结构）知识。",-1),b=n("p",null,[n("img",{src:p,alt:""})],-1);function y(_,h){const a=e("ExternalLinkIcon");return o(),c("div",null,[d,n("p",null,[s("更多精彩内容合集可访问项目："),n("a",v,[s("https://github.com/Chang-LeHung/CSCore"),l(a)])]),m,b])}const P=t(k,[["render",y],["__file","07dict.html.vue"]]);export{P as default};
