import{_ as t}from"./qrcode2-187b7271.js";import{_ as p,r as e,o,c,a as n,d as s,b as i,e as l}from"./app-6b5e6c63.js";const u="/dive-into-cpython/assets/28-bytes-e5ae191a.png",r="/dive-into-cpython/assets/29-bytes-0a5ffd25.png",k="/dive-into-cpython/assets/30-bytes-59d4c630.png",d={},v=l(`<h1 id="深入理解-python-虚拟机-字节-bytes-的实现原理及源码剖析" tabindex="-1"><a class="header-anchor" href="#深入理解-python-虚拟机-字节-bytes-的实现原理及源码剖析" aria-hidden="true">#</a> 深入理解 Python 虚拟机：字节（bytes）的实现原理及源码剖析</h1><p>在本篇文章当中主要给大家介绍在 cpython 内部，bytes 的实现原理、内存布局以及与 bytes 相关的一个比较重要的优化点—— bytes 的拼接。</p><h2 id="数据结构" tabindex="-1"><a class="header-anchor" href="#数据结构" aria-hidden="true">#</a> 数据结构</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    PyObject_VAR_HEAD
    Py_hash_t ob_shash<span class="token punctuation">;</span>
    <span class="token keyword">char</span> ob_sval<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token comment">/* Invariants:
     *     ob_sval contains space for &#39;ob_size+1&#39; elements.
     *     ob_sval[ob_size] == 0.
     *     ob_shash is the hash of the string or -1 if not computed yet.
     */</span>
<span class="token punctuation">}</span> PyBytesObject<span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    PyObject ob_base<span class="token punctuation">;</span>
    Py_ssize_t ob_size<span class="token punctuation">;</span> <span class="token comment">/* Number of items in variable part */</span>
<span class="token punctuation">}</span> PyVarObject<span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">_object</span> <span class="token punctuation">{</span>
    Py_ssize_t ob_refcnt<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">_typeobject</span> <span class="token operator">*</span>ob_type<span class="token punctuation">;</span>
<span class="token punctuation">}</span> PyObject<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的数据结构用图示如下所示：</p><p><img src="`+u+'" alt="28-bytes"></p><p>现在我们来解释一下上面的数据结构各个字段的含义：</p><ul><li>ob_refcnt，这个还是对象的引用计数的个数，主要是在垃圾回收的时候有用。</li><li>ob_type，这个是对象的数据类型。</li><li>ob_size，表示这个对象当中字节的个数。</li><li>ob_shash，对象的哈希值，如果还没有计算，哈希值为 -1 。</li><li>ob_sval，一个数据存储一个字节的数据，需要注意的是 ob_sval[size] 一定等于 &#39;\\0&#39; ，表示字符串的结尾。</li></ul><p>可能你会有疑问上面的结构体当中并没有后面的那么多字节啊，数组只有一个字节的数据啊，这是因为在 cpython 的实现当中除了申请 PyBytesObject 大的小内存空间之外，还会在这个基础之上申请连续的额外的内存空间用于保存数据，在后续的源码分析当中可以看到这一点。</p><p>下面我们举几个例子来说明一下上面的布局：</p><p><img src="'+r+`" alt="29-bytes"></p><p>上面是空和字符串 abc 的字节表示。</p><h2 id="创建字节对象" tabindex="-1"><a class="header-anchor" href="#创建字节对象" aria-hidden="true">#</a> 创建字节对象</h2><p>下面是在 cpython 当中通过字节数创建 PyBytesObject 对象的函数。下面的函数的主要功能是创建一个能够存储 size 个字节大小的数据的 PyBytesObject 对象，下面的函数最重要的一个步骤就是申请内存空间。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> PyObject <span class="token operator">*</span>
<span class="token function">_PyBytes_FromSize</span><span class="token punctuation">(</span>Py_ssize_t size<span class="token punctuation">,</span> <span class="token keyword">int</span> use_calloc<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    PyBytesObject <span class="token operator">*</span>op<span class="token punctuation">;</span>
    <span class="token function">assert</span><span class="token punctuation">(</span>size <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>op <span class="token operator">=</span> nullstring<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">COUNT_ALLOCS</span></span>
        null_strings<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
        <span class="token function">Py_INCREF</span><span class="token punctuation">(</span>op<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>PyObject <span class="token operator">*</span><span class="token punctuation">)</span>op<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">size_t</span><span class="token punctuation">)</span>size <span class="token operator">&gt;</span> <span class="token punctuation">(</span><span class="token class-name">size_t</span><span class="token punctuation">)</span>PY_SSIZE_T_MAX <span class="token operator">-</span> PyBytesObject_SIZE<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">PyErr_SetString</span><span class="token punctuation">(</span>PyExc_OverflowError<span class="token punctuation">,</span>
                        <span class="token string">&quot;byte string is too large&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/* Inline PyObject_NewVar */</span>
    <span class="token comment">// PyBytesObject_SIZE + size 就是实际申请的内存空间的大小 PyBytesObject_SIZE 就是表示 PyBytesObject 各个字段占用的实际的内存空间大小</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>use_calloc<span class="token punctuation">)</span>
        op <span class="token operator">=</span> <span class="token punctuation">(</span>PyBytesObject <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">PyObject_Calloc</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> PyBytesObject_SIZE <span class="token operator">+</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span>
        op <span class="token operator">=</span> <span class="token punctuation">(</span>PyBytesObject <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">PyObject_Malloc</span><span class="token punctuation">(</span>PyBytesObject_SIZE <span class="token operator">+</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>op <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token function">PyErr_NoMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 将对象的 ob_size 字段赋值成 size </span>
    <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token function">PyObject_INIT_VAR</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> <span class="token operator">&amp;</span>PyBytes_Type<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 由于对象的哈希值还没有进行计算 因此现将哈希值赋值成 -1</span>
    op<span class="token operator">-&gt;</span>ob_shash <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>use_calloc<span class="token punctuation">)</span>
        op<span class="token operator">-&gt;</span>ob_sval<span class="token punctuation">[</span>size<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;\\0&#39;</span><span class="token punctuation">;</span>
    <span class="token comment">/* empty byte string singleton */</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        nullstring <span class="token operator">=</span> op<span class="token punctuation">;</span>
        <span class="token function">Py_INCREF</span><span class="token punctuation">(</span>op<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>PyObject <span class="token operator">*</span><span class="token punctuation">)</span> op<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以使用一个写例子来看一下实际的 PyBytesObject 内存空间的大小。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> sys
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a <span class="token operator">=</span> <span class="token string">b&quot;hello world&quot;</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> sys<span class="token punctuation">.</span>getsizeof<span class="token punctuation">(</span>a<span class="token punctuation">)</span>
<span class="token number">44</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的 44 = 32 + 11 + 1 。</p><p>其中 32 是 PyBytesObject 4 个字段所占用的内存空间，ob_refcnt、ob_type、ob_size和 ob_shash 各占 8 个字节。11 是表示字符串 &quot;hello world&quot; 占用 11 个字节，最后一个字节是 &#39;\\0&#39; 。</p><h2 id="查看字节长度" tabindex="-1"><a class="header-anchor" href="#查看字节长度" aria-hidden="true">#</a> 查看字节长度</h2><p>这个函数主要是返回 PyBytesObject 对象的字节长度，也就是直接返回 ob_size 的值。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> Py_ssize_t
<span class="token function">bytes_length</span><span class="token punctuation">(</span>PyBytesObject <span class="token operator">*</span>a<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// (((PyVarObject*)(ob))-&gt;ob_size)</span>
    <span class="token keyword">return</span> <span class="token function">Py_SIZE</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="字节拼接" tabindex="-1"><a class="header-anchor" href="#字节拼接" aria-hidden="true">#</a> 字节拼接</h2><p>在 python 当中执行下面的代码就会执行字节拼接函数：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">b&quot;abc&quot;</span> <span class="token operator">+</span> <span class="token string">b&quot;edf&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>下方就是具体的执行字节拼接的函数：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">/* This is also used by PyBytes_Concat() */</span>
<span class="token keyword">static</span> PyObject <span class="token operator">*</span>
<span class="token function">bytes_concat</span><span class="token punctuation">(</span>PyObject <span class="token operator">*</span>a<span class="token punctuation">,</span> PyObject <span class="token operator">*</span>b<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Py_buffer va<span class="token punctuation">,</span> vb<span class="token punctuation">;</span>
    PyObject <span class="token operator">*</span>result <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

    va<span class="token punctuation">.</span>len <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    vb<span class="token punctuation">.</span>len <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token comment">// Py_buffer 当中有一个指针字段 buf 可以用户保存 PyBytesObject 当中字节数据的首地址</span>
    <span class="token comment">// PyObject_GetBuffer 函数的主要作用是将 对象 a 当中的字节数组赋值给 va 当中的 buf</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">PyObject_GetBuffer</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>va<span class="token punctuation">,</span> PyBUF_SIMPLE<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">||</span>
        <span class="token function">PyObject_GetBuffer</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token operator">&amp;</span>vb<span class="token punctuation">,</span> PyBUF_SIMPLE<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">PyErr_Format</span><span class="token punctuation">(</span>PyExc_TypeError<span class="token punctuation">,</span> <span class="token string">&quot;can&#39;t concat %.100s to %.100s&quot;</span><span class="token punctuation">,</span>
                     <span class="token function">Py_TYPE</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token operator">-&gt;</span>tp_name<span class="token punctuation">,</span> <span class="token function">Py_TYPE</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">-&gt;</span>tp_name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">goto</span> done<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/* Optimize end cases */</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>va<span class="token punctuation">.</span>len <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token function">PyBytes_CheckExact</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        result <span class="token operator">=</span> b<span class="token punctuation">;</span>
        <span class="token function">Py_INCREF</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">goto</span> done<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>vb<span class="token punctuation">.</span>len <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token function">PyBytes_CheckExact</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        result <span class="token operator">=</span> a<span class="token punctuation">;</span>
        <span class="token function">Py_INCREF</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">goto</span> done<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>va<span class="token punctuation">.</span>len <span class="token operator">&gt;</span> PY_SSIZE_T_MAX <span class="token operator">-</span> vb<span class="token punctuation">.</span>len<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">PyErr_NoMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">goto</span> done<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    result <span class="token operator">=</span> <span class="token function">PyBytes_FromStringAndSize</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> va<span class="token punctuation">.</span>len <span class="token operator">+</span> vb<span class="token punctuation">.</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 下方就是将对象 a b 当中的字节数据拷贝到新的</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// PyBytes_AS_STRING 宏定义在下方当中 主要就是使用 PyBytesObject 对象当中的</span>
        <span class="token comment">// ob_sval 字段 也就是将 buf 数据（也就是 a 或者 b 当中的字节数据）拷贝到 ob_sval当中</span>
        <span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token function">PyBytes_AS_STRING</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">,</span> va<span class="token punctuation">.</span>buf<span class="token punctuation">,</span> va<span class="token punctuation">.</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token function">PyBytes_AS_STRING</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">+</span> va<span class="token punctuation">.</span>len<span class="token punctuation">,</span> vb<span class="token punctuation">.</span>buf<span class="token punctuation">,</span> vb<span class="token punctuation">.</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

  done<span class="token operator">:</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>va<span class="token punctuation">.</span>len <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token function">PyBuffer_Release</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>va<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>vb<span class="token punctuation">.</span>len <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token function">PyBuffer_Release</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>vb<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">PyBytes_AS_STRING</span><span class="token expression"><span class="token punctuation">(</span>op<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token function">assert</span><span class="token punctuation">(</span><span class="token function">PyBytes_Check</span><span class="token punctuation">(</span>op<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> </span><span class="token punctuation">\\</span>
                                <span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>PyBytesObject <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>op<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span>ob_sval<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>我们修改一个这个函数，在其中加入一条打印语句，然后重新编译 python 执行结果如下所示：</p><p><img src="`+k+`" alt="30-bytes"></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>Python <span class="token number">3.9</span><span class="token punctuation">.</span><span class="token number">0b1</span> <span class="token punctuation">(</span>default<span class="token punctuation">,</span> Mar <span class="token number">23</span> <span class="token number">2023</span><span class="token punctuation">,</span> <span class="token number">08</span><span class="token punctuation">:</span><span class="token number">35</span><span class="token punctuation">:</span><span class="token number">33</span><span class="token punctuation">)</span> 
<span class="token punctuation">[</span>GCC <span class="token number">4.8</span><span class="token number">.5</span> <span class="token number">20150623</span> <span class="token punctuation">(</span>Red Hat <span class="token number">4.8</span><span class="token number">.5</span><span class="token operator">-</span><span class="token number">44</span><span class="token punctuation">)</span><span class="token punctuation">]</span> on linux
Type <span class="token string">&quot;help&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;copyright&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;credits&quot;</span> <span class="token keyword">or</span> <span class="token string">&quot;license&quot;</span> <span class="token keyword">for</span> more information<span class="token punctuation">.</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">b&quot;abc&quot;</span> <span class="token operator">+</span> <span class="token string">b&quot;edf&quot;</span>
In concat function<span class="token punctuation">:</span> abc <span class="token operator">&lt;&gt;</span> edf
<span class="token string">b&#39;abcedf&#39;</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的拼接函数当中会拷贝原来的两个字节对象，因此需要谨慎使用，一旦发生非常多的拷贝的话是非常耗费内存的。因此需要警惕使用循环内的内存拼接。比如对于 [b&quot;a&quot;, b&quot;b&quot;, b&quot;c&quot;] 来说，如果使用循环拼接的话，那么会将 b&quot;a&quot; 拷贝两次。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> res <span class="token operator">=</span> b<span class="token string">&quot;&quot;</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> item in  <span class="token punctuation">[</span>b<span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> b<span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> b<span class="token string">&quot;c&quot;</span><span class="token punctuation">]</span><span class="token operator">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     res <span class="token operator">+=</span> item
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> res
b<span class="token char">&#39;abc&#39;</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为 b&quot;a&quot;, b&quot;b&quot; 在拼接的时候会将他们分别拷贝一次，在进行 b&quot;ab&quot;，b&quot;c&quot; 拼接的时候又会将 ab 和 c 拷贝一次，那么具体的拷贝情况如下所示：</p><ul><li>&quot;a&quot; 拷贝了一次。</li><li>&quot;b&quot; 拷贝了一次。</li><li>&quot;ab&quot; 拷贝了一次。</li><li>&quot;c&quot; 拷贝了一次。</li></ul><p>但是实际上我们的需求是只需要对 [b&quot;a&quot;, b&quot;b&quot;, b&quot;c&quot;] 当中的数据各拷贝一次，如果我们要实现这一点可以使用 b&quot;&quot;.join([b&quot;a&quot;, b&quot;b&quot;, b&quot;c&quot;])，直接将 [b&quot;a&quot;, b&quot;b&quot;, b&quot;c&quot;] 作为参数传递，然后各自只拷贝一次，具体的实现代码如下所示，在这个例子当中 sep 就是空串 b&quot;&quot;，iterable 就是 [b&quot;a&quot;, b&quot;b&quot;, b&quot;c&quot;] 。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">Py_LOCAL_INLINE</span><span class="token punctuation">(</span>PyObject <span class="token operator">*</span><span class="token punctuation">)</span>
<span class="token function">STRINGLIB</span><span class="token punctuation">(</span>bytes_join<span class="token punctuation">)</span><span class="token punctuation">(</span>PyObject <span class="token operator">*</span>sep<span class="token punctuation">,</span> PyObject <span class="token operator">*</span>iterable<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>sepstr <span class="token operator">=</span> <span class="token function">STRINGLIB_STR</span><span class="token punctuation">(</span>sep<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> Py_ssize_t seplen <span class="token operator">=</span> <span class="token function">STRINGLIB_LEN</span><span class="token punctuation">(</span>sep<span class="token punctuation">)</span><span class="token punctuation">;</span>
    PyObject <span class="token operator">*</span>res <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>
    Py_ssize_t seqlen <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    Py_ssize_t sz <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    Py_ssize_t i<span class="token punctuation">,</span> nbufs<span class="token punctuation">;</span>
    PyObject <span class="token operator">*</span>seq<span class="token punctuation">,</span> <span class="token operator">*</span>item<span class="token punctuation">;</span>
    Py_buffer <span class="token operator">*</span>buffers <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">NB_STATIC_BUFFERS</span> <span class="token expression"><span class="token number">10</span></span></span>
    Py_buffer static_buffers<span class="token punctuation">[</span>NB_STATIC_BUFFERS<span class="token punctuation">]</span><span class="token punctuation">;</span>

    seq <span class="token operator">=</span> <span class="token function">PySequence_Fast</span><span class="token punctuation">(</span>iterable<span class="token punctuation">,</span> <span class="token string">&quot;can only join an iterable&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>seq <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    seqlen <span class="token operator">=</span> <span class="token function">PySequence_Fast_GET_SIZE</span><span class="token punctuation">(</span>seq<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>seqlen <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">Py_DECREF</span><span class="token punctuation">(</span>seq<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token function">STRINGLIB_NEW</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">STRINGLIB_MUTABLE</span></span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>seqlen <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        item <span class="token operator">=</span> <span class="token function">PySequence_Fast_GET_ITEM</span><span class="token punctuation">(</span>seq<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">STRINGLIB_CHECK_EXACT</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">Py_INCREF</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">Py_DECREF</span><span class="token punctuation">(</span>seq<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> item<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>seqlen <span class="token operator">&gt;</span> NB_STATIC_BUFFERS<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        buffers <span class="token operator">=</span> <span class="token function">PyMem_NEW</span><span class="token punctuation">(</span>Py_buffer<span class="token punctuation">,</span> seqlen<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>buffers <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">Py_DECREF</span><span class="token punctuation">(</span>seq<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">PyErr_NoMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token punctuation">{</span>
        buffers <span class="token operator">=</span> static_buffers<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/* Here is the general case.  Do a pre-pass to figure out the total
     * amount of space we&#39;ll need (sz), and see whether all arguments are
     * bytes-like.
     */</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> nbufs <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> seqlen<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Py_ssize_t itemlen<span class="token punctuation">;</span>
        item <span class="token operator">=</span> <span class="token function">PySequence_Fast_GET_ITEM</span><span class="token punctuation">(</span>seq<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">PyBytes_CheckExact</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">/* Fast path. */</span>
            <span class="token function">Py_INCREF</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
            buffers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>obj <span class="token operator">=</span> item<span class="token punctuation">;</span>
            buffers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>buf <span class="token operator">=</span> <span class="token function">PyBytes_AS_STRING</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
            buffers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>len <span class="token operator">=</span> <span class="token function">PyBytes_GET_SIZE</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">PyObject_GetBuffer</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> <span class="token operator">&amp;</span>buffers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> PyBUF_SIMPLE<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">PyErr_Format</span><span class="token punctuation">(</span>PyExc_TypeError<span class="token punctuation">,</span>
                         <span class="token string">&quot;sequence item %zd: expected a bytes-like object, &quot;</span>
                         <span class="token string">&quot;%.80s found&quot;</span><span class="token punctuation">,</span>
                         i<span class="token punctuation">,</span> <span class="token function">Py_TYPE</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token operator">-&gt;</span>tp_name<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">goto</span> error<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        nbufs <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">/* for error cleanup */</span>
        itemlen <span class="token operator">=</span> buffers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>len<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>itemlen <span class="token operator">&gt;</span> PY_SSIZE_T_MAX <span class="token operator">-</span> sz<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">PyErr_SetString</span><span class="token punctuation">(</span>PyExc_OverflowError<span class="token punctuation">,</span>
                            <span class="token string">&quot;join() result is too long&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">goto</span> error<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        sz <span class="token operator">+=</span> itemlen<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>seplen <span class="token operator">&gt;</span> PY_SSIZE_T_MAX <span class="token operator">-</span> sz<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">PyErr_SetString</span><span class="token punctuation">(</span>PyExc_OverflowError<span class="token punctuation">,</span>
                                <span class="token string">&quot;join() result is too long&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">goto</span> error<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            sz <span class="token operator">+=</span> seplen<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>seqlen <span class="token operator">!=</span> <span class="token function">PySequence_Fast_GET_SIZE</span><span class="token punctuation">(</span>seq<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">PyErr_SetString</span><span class="token punctuation">(</span>PyExc_RuntimeError<span class="token punctuation">,</span>
                            <span class="token string">&quot;sequence changed size during iteration&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">goto</span> error<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/* Allocate result space. */</span>
    res <span class="token operator">=</span> <span class="token function">STRINGLIB_NEW</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> sz<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
        <span class="token keyword">goto</span> error<span class="token punctuation">;</span>

    <span class="token comment">/* Catenate everything. */</span>
    p <span class="token operator">=</span> <span class="token function">STRINGLIB_STR</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>seplen<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">/* fast path */</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nbufs<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            Py_ssize_t n <span class="token operator">=</span> buffers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>len<span class="token punctuation">;</span>
            <span class="token keyword">char</span> <span class="token operator">*</span>q <span class="token operator">=</span> buffers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>buf<span class="token punctuation">;</span>
            <span class="token function">Py_MEMCPY</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> q<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
            p <span class="token operator">+=</span> n<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">goto</span> done<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 具体的实现逻辑就是在这里</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nbufs<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Py_ssize_t n<span class="token punctuation">;</span>
        <span class="token keyword">char</span> <span class="token operator">*</span>q<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 首先现将 sepstr 拷贝到新的数组里面但是在我们举的例子当中是空串 b&quot;&quot;</span>
            <span class="token function">Py_MEMCPY</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> sepstr<span class="token punctuation">,</span> seplen<span class="token punctuation">)</span><span class="token punctuation">;</span>
            p <span class="token operator">+=</span> seplen<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        n <span class="token operator">=</span> buffers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>len<span class="token punctuation">;</span>
        q <span class="token operator">=</span> buffers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>buf<span class="token punctuation">;</span>
        <span class="token comment">// 然后将列表当中第 i 个 bytes 的数据拷贝到 p 当中 这样就是实现了我们所需要的效果</span>
        <span class="token function">Py_MEMCPY</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> q<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
        p <span class="token operator">+=</span> n<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">goto</span> done<span class="token punctuation">;</span>

error<span class="token operator">:</span>
    res <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
done<span class="token operator">:</span>
    <span class="token function">Py_DECREF</span><span class="token punctuation">(</span>seq<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nbufs<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token function">PyBuffer_Release</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>buffers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>buffers <span class="token operator">!=</span> static_buffers<span class="token punctuation">)</span>
        <span class="token function">PyMem_FREE</span><span class="token punctuation">(</span>buffers<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="单字节字符" tabindex="-1"><a class="header-anchor" href="#单字节字符" aria-hidden="true">#</a> 单字节字符</h2><p>在 cpython 的内部实现当中给单字节的字符做了一个小的缓冲池：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> PyBytesObject <span class="token operator">*</span>characters<span class="token punctuation">[</span>UCHAR_MAX <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// UCHAR_MAX 在 64 位系统当中等于 255</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>当创建的 bytes 只有一个字符的时候就可以检查是否 characters 当中已经存在了，如果存在就直接返回这个已经创建好的 PyBytesObject 对象，否则再进行创建。新创建的 PyBytesObject 对象如果长度等于 1 的话也会被加入到这个数组当中。下面是 PyBytesObject 的另外一个创建函数：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>PyObject <span class="token operator">*</span>
<span class="token function">PyBytes_FromStringAndSize</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">,</span> Py_ssize_t size<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    PyBytesObject <span class="token operator">*</span>op<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">PyErr_SetString</span><span class="token punctuation">(</span>PyExc_SystemError<span class="token punctuation">,</span>
            <span class="token string">&quot;Negative size passed to PyBytes_FromStringAndSize&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 如果创建长度等于 1 而且对象在 characters 当中存在的话那么就直接返回</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> str <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span>
        <span class="token punctuation">(</span>op <span class="token operator">=</span> characters<span class="token punctuation">[</span><span class="token operator">*</span>str <span class="token operator">&amp;</span> UCHAR_MAX<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">COUNT_ALLOCS</span></span>
        one_strings<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
        <span class="token function">Py_INCREF</span><span class="token punctuation">(</span>op<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>PyObject <span class="token operator">*</span><span class="token punctuation">)</span>op<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    op <span class="token operator">=</span> <span class="token punctuation">(</span>PyBytesObject <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">_PyBytes_FromSize</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>op <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>str <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>PyObject <span class="token operator">*</span><span class="token punctuation">)</span> op<span class="token punctuation">;</span>

    <span class="token function">Py_MEMCPY</span><span class="token punctuation">(</span>op<span class="token operator">-&gt;</span>ob_sval<span class="token punctuation">,</span> str<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/* share short strings */</span>
    <span class="token comment">// 如果创建的对象的长度等于 1 那么久将这个对象保存到 characters 当中</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        characters<span class="token punctuation">[</span><span class="token operator">*</span>str <span class="token operator">&amp;</span> UCHAR_MAX<span class="token punctuation">]</span> <span class="token operator">=</span> op<span class="token punctuation">;</span>
        <span class="token function">Py_INCREF</span><span class="token punctuation">(</span>op<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>PyObject <span class="token operator">*</span><span class="token punctuation">)</span> op<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以使用下面的代码进行验证：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a <span class="token operator">=</span> <span class="token string">b&quot;a&quot;</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> b  <span class="token operator">=</span><span class="token string">b&quot;a&quot;</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a <span class="token operator">==</span> b
<span class="token boolean">True</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a <span class="token keyword">is</span> b
<span class="token boolean">True</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a <span class="token operator">=</span> <span class="token string">b&quot;aa&quot;</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> b <span class="token operator">=</span> <span class="token string">b&quot;aa&quot;</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a <span class="token operator">==</span> b
<span class="token boolean">True</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a <span class="token keyword">is</span> b
<span class="token boolean">False</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从上面的代码可以知道，确实当我们创建的 bytes 的长度等于 1 的时候对象确实是同一个对象。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>在本篇文章当中主要给大家介绍了在 cpython 内部对于 bytes 的实现，重点介绍了 cpython 当中 PyBytesObject 的内存布局和创建 PyBytesObject 的函数，以及对于 bytes 对象的拼接细节和 cpython 内部单字节字符的缓冲池。在程序当中最好使用 join 操作进行 btyes 的拼接操作，否则效率会比较低。</p><hr><p>本篇文章是深入理解 python 虚拟机系列文章之一，文章地址：https://github.com/Chang-LeHung/dive-into-cpython</p>`,49),b={href:"https://github.com/Chang-LeHung/CSCore",target:"_blank",rel:"noopener noreferrer"},m=n("p",null,"关注公众号：一无是处的研究僧，了解更多计算机（Java、Python、计算机系统基础、算法与数据结构）知识。",-1),y=n("p",null,[n("img",{src:t,alt:""})],-1);function f(_,g){const a=e("ExternalLinkIcon");return o(),c("div",null,[v,n("p",null,[s("更多精彩内容合集可访问项目："),n("a",b,[s("https://github.com/Chang-LeHung/CSCore"),i(a)])]),m,y])}const q=p(d,[["render",f],["__file","08bytes.html.vue"]]);export{q as default};
