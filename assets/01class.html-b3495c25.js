import{_ as e}from"./qrcode2-187b7271.js";import{_ as t,r as p,o,c,a as n,d as s,b as l,e as i}from"./app-6b5e6c63.js";const u={},r=i(`<h1 id="深入理解python虚拟机-黑科技的幕后英雄——描述器" tabindex="-1"><a class="header-anchor" href="#深入理解python虚拟机-黑科技的幕后英雄——描述器" aria-hidden="true">#</a> 深入理解python虚拟机：黑科技的幕后英雄——描述器</h1><p>在本篇文章当中主要给大家介绍一个我们在使用类的时候经常使用但是却很少在意的黑科技——描述器，在本篇文章当中主要分析描述器的原理，以及介绍使用描述器实现属性访问控制和 orm 映射等等功能！在后面的文章当中我们将继续去分析描述器的实现原理。</p><h2 id="描述器的基本用法" tabindex="-1"><a class="header-anchor" href="#描述器的基本用法" aria-hidden="true">#</a> 描述器的基本用法</h2><p>描述器是一个实现了 <code>__get__</code>、<code>__set__</code> 或 <code>__delete__</code> 中至少一个方法的 Python 类。这些方法分别用于在属性被访问、设置或删除时调用。当一个描述器被定义为一个类的属性时，它可以控制该属性的访问、修改和删除。</p><p>下面是一个示例，演示了如何定义一个简单的描述器：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Descriptor</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__get__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> instance<span class="token punctuation">,</span> owner<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;Getting </span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__name__<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> instance<span class="token punctuation">.</span>__dict__<span class="token punctuation">.</span>get<span class="token punctuation">(</span>self<span class="token punctuation">.</span>attrname<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">__set__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> instance<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;Setting </span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__name__<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
        instance<span class="token punctuation">.</span>__dict__<span class="token punctuation">[</span>self<span class="token punctuation">.</span>attrname<span class="token punctuation">]</span> <span class="token operator">=</span> value

    <span class="token keyword">def</span> <span class="token function">__delete__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> instance<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;Deleting </span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__name__<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
        <span class="token keyword">del</span> instance<span class="token punctuation">.</span>__dict__<span class="token punctuation">[</span>self<span class="token punctuation">.</span>attrname<span class="token punctuation">]</span>

    <span class="token keyword">def</span> <span class="token function">__set_name__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> owner<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>attrname <span class="token operator">=</span> name
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，我们定义了一个名为 Descriptor 的描述器类，它有三个方法：<code>__get__</code>、<code>__set__</code> 和 <code>__delete__</code>。当我们在另一个类中使用这个描述器时，这些方法将被调用，以控制该类的属性的访问和修改。</p><p>要使用这个描述器，我们可以在另一个类中将其定义为一个类属性：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">MyClass</span><span class="token punctuation">:</span>
    x <span class="token operator">=</span> Descriptor<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，我们可以创建一个 MyClass 对象并访问其属性：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> obj <span class="token operator">=</span> MyClass<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> obj<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">1</span>
Setting Descriptor
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> obj<span class="token punctuation">.</span>x
Getting Descriptor
<span class="token number">1</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">del</span> obj<span class="token punctuation">.</span>x
Deleting Descriptor
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> obj<span class="token punctuation">.</span>x
Getting Descriptor

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，我们首先创建了一个 MyClass 对象，并将其 x 属性设置为 1。然后，我们再次访问 x 属性时，会调用 <code>__get__</code> 方法并返回 1。最后，我们删除了 x 属性，并再次访问它时，会调用 <code>__get__</code> 方法并返回 None。从上面的输出结果可以看到对应的方法都被调用了，这是符合上面对描述器的定义的。如果一个类对象不是描述器，那么在使用对应的属性的时候是不会调用<code>__get__</code>、<code>__set__</code> 和 <code>__delete__</code>三个方法的。比如下面的代码：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>
<span class="token keyword">class</span> <span class="token class-name">NonDescriptor</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span>


<span class="token keyword">class</span> <span class="token class-name">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>

    nd <span class="token operator">=</span> NonDescriptor<span class="token punctuation">(</span><span class="token punctuation">)</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    a <span class="token operator">=</span> MyClass<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>nd<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的代码输出结果如下所示：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&lt;</span>__main__<span class="token punctuation">.</span>NonDescriptor <span class="token builtin">object</span> at <span class="token number">0x1012cce20</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>从上面程序的输出结果可以知道，当使用一个非描述器的类属性的时候是不会调用对应的方法的，而是直接得到对应的对象。</p><h2 id="描述器的实现原理" tabindex="-1"><a class="header-anchor" href="#描述器的实现原理" aria-hidden="true">#</a> 描述器的实现原理</h2><p>描述器的实现原理可以用以下三个步骤来概括：</p><ul><li><p>当一个类的属性被访问时，Python 解释器会检查该属性是否是一个描述器。如果是，它会调用描述器的 <code>__get__</code> 方法，并将该类的实例作为第一个参数，该实例所属的类作为第二个参数，并将属性名称作为第三个参数传递给 <code>__get__</code> 方法。</p></li><li><p>当一个类的属性被设置时，Python 解释器会检查该属性是否是一个描述器。如果是，它会调用描述器的 <code>__set__</code> 方法，并将该类的实例作为第一个参数，设置的值作为第二个参数，并将属性名称作为第三个参数传递给 <code>__set__</code> 方法。</p></li><li><p>当一个类的属性被删除时，Python 解释器会检查该属性是否是一个描述器。如果是，它会调用描述器的 <code>__delete__</code> 方法，并将该类的实例作为第一个参数和属性名称作为第二个参数传递给 <code>__delete__</code> 方法。</p></li></ul><p>在描述器的实现中，通常还会使用 <code>__set_name__</code> 方法来在描述器被绑定到类属性时设置属性名称。这使得描述器可以在被多个属性使用时，正确地识别每个属性的名称。</p><p>现在来仔细了解一下上面的几个函数的参数，我们以下面的代码为例子进行说明：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>

<span class="token keyword">class</span> <span class="token class-name">Descriptor</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>

    <span class="token keyword">def</span> <span class="token function">__set_name__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> obj_type<span class="token punctuation">,</span> attr_name<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;__set_name__ : </span><span class="token interpolation"><span class="token punctuation">{</span>obj_type <span class="token punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token punctuation">{</span>attr_name <span class="token operator">=</span> <span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token string">&quot;__set_name__&quot;</span>

    <span class="token keyword">def</span> <span class="token function">__get__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> obj<span class="token punctuation">,</span> obj_type<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;__get__ : </span><span class="token interpolation"><span class="token punctuation">{</span>obj <span class="token operator">=</span> <span class="token punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token punctuation">{</span> obj_type <span class="token operator">=</span> <span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token string">&quot;__get__&quot;</span>

    <span class="token keyword">def</span> <span class="token function">__set__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> instance<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;__set__ : </span><span class="token interpolation"><span class="token punctuation">{</span>instance <span class="token operator">=</span> <span class="token punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token punctuation">{</span>value <span class="token operator">=</span> <span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token string">&quot;__set__&quot;</span>

    <span class="token keyword">def</span> <span class="token function">__delete__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;__delete__ : </span><span class="token interpolation"><span class="token punctuation">{</span>obj <span class="token operator">=</span> <span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token string">&quot;__delete__&quot;</span>


<span class="token keyword">class</span> <span class="token class-name">MyClass</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>

    des <span class="token operator">=</span> Descriptor<span class="token punctuation">(</span><span class="token punctuation">)</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    a <span class="token operator">=</span> MyClass<span class="token punctuation">(</span><span class="token punctuation">)</span>
    _ <span class="token operator">=</span> MyClass<span class="token punctuation">.</span>des
    _ <span class="token operator">=</span> a<span class="token punctuation">.</span>des
    a<span class="token punctuation">.</span>des <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span>
    <span class="token keyword">del</span> a<span class="token punctuation">.</span>des

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的代码输入结果如下所示：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>__set_name__ <span class="token builtin class-name">:</span> <span class="token operator">&lt;</span>class <span class="token string">&#39;__main__.MyClass&#39;</span><span class="token operator">&gt;</span> attr_name <span class="token operator">=</span> <span class="token string">&#39;des&#39;</span>
__get__ <span class="token builtin class-name">:</span> obj <span class="token operator">=</span> None  obj_type <span class="token operator">=</span> <span class="token operator">&lt;</span>class <span class="token string">&#39;__main__.MyClass&#39;</span><span class="token operator">&gt;</span>
__get__ <span class="token builtin class-name">:</span> obj <span class="token operator">=</span> <span class="token operator">&lt;</span>__main__.MyClass object at 0x1054abeb<span class="token operator"><span class="token file-descriptor important">0</span>&gt;</span>  obj_type <span class="token operator">=</span> <span class="token operator">&lt;</span>class <span class="token string">&#39;__main__.MyClass&#39;</span><span class="token operator">&gt;</span>
__set__ <span class="token builtin class-name">:</span> instance <span class="token operator">=</span> <span class="token operator">&lt;</span>__main__.MyClass object at 0x1054abeb<span class="token operator"><span class="token file-descriptor important">0</span>&gt;</span> value <span class="token operator">=</span> <span class="token string">&#39;hello&#39;</span>
__delete__ <span class="token builtin class-name">:</span> obj <span class="token operator">=</span> <span class="token operator">&lt;</span>__main__.MyClass object at 0x1054abeb<span class="token operator"><span class="token file-descriptor important">0</span>&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>__set_name__</code> 这个函数一共有两个参数传入的参数第一个参数是使用描述器的类，第二个参数是使用这个描述器的类当中使用的属性名字，在上面的例子当中就是 &quot;des&quot; 。</li><li><code>__get__</code>，这个函数主要有两个参数，一个是使用属性的对象，另外一个是对象的类型，如果是直接使用类名使用属性的话，obj 就是 None，比如上面的 MyClass.des 。</li><li><code>__set__</code>，这个函数主要有两个参数一个是对象，另外一个是需要设置的值。</li><li><code>__delete__</code>，这函数有一个参数，就是传入的对象，比如 del a.des 传入的就是对象 a 。</li></ul><h2 id="描述器的应用场景" tabindex="-1"><a class="header-anchor" href="#描述器的应用场景" aria-hidden="true">#</a> 描述器的应用场景</h2><p>描述器在 Python 中有很多应用场景。以下是其中的一些示例：</p><h3 id="实现属性访问控制" tabindex="-1"><a class="header-anchor" href="#实现属性访问控制" aria-hidden="true">#</a> 实现属性访问控制</h3><p>通过使用描述器，可以实现对类属性的访问控制，例如只读属性、只写属性、只读/只写属性等。通过在 <code>__get__</code> 和 <code>__set__</code> 方法中添加相应的访问控制逻辑，可以限制对类属性的访问和修改。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">ReadOnly</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>_value <span class="token operator">=</span> value
    
    <span class="token keyword">def</span> <span class="token function">__get__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> instance<span class="token punctuation">,</span> owner<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_value
    
    <span class="token keyword">def</span> <span class="token function">__set__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> instance<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">raise</span> AttributeError<span class="token punctuation">(</span><span class="token string">&quot;Read only attribute&quot;</span><span class="token punctuation">)</span>
        
<span class="token keyword">class</span> <span class="token class-name">MyClass</span><span class="token punctuation">:</span>
    read_only_prop <span class="token operator">=</span> ReadOnly<span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span>
    writeable_prop <span class="token operator">=</span> <span class="token boolean">None</span>
    
my_obj <span class="token operator">=</span> MyClass<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>my_obj<span class="token punctuation">.</span>read_only_prop<span class="token punctuation">)</span>  <span class="token comment"># 42</span>
my_obj<span class="token punctuation">.</span>writeable_prop <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>my_obj<span class="token punctuation">.</span>writeable_prop<span class="token punctuation">)</span>  <span class="token comment"># hello</span>
my_obj<span class="token punctuation">.</span>read_only_prop <span class="token operator">=</span> <span class="token number">100</span>  <span class="token comment"># raises AttributeError</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的例子中，<code>ReadOnly</code> 描述器只实现了 <code>__get__</code> 方法，而 <code>__set__</code> 方法则抛出了 <code>AttributeError</code> 异常，从而实现了只读属性的访问控制。</p><h3 id="实现数据验证和转换" tabindex="-1"><a class="header-anchor" href="#实现数据验证和转换" aria-hidden="true">#</a> 实现数据验证和转换</h3><p>描述器还可以用于实现数据验证和转换逻辑。通过在 <code>__set__</code> 方法中添加数据验证和转换逻辑，可以确保设置的值符合某些特定的要求。例如，可以使用描述器来确保设置的值是整数、在某个范围内、符合某个正则表达式等。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Bounded</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> low<span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>_low <span class="token operator">=</span> low
        self<span class="token punctuation">.</span>_high <span class="token operator">=</span> high
    
    <span class="token keyword">def</span> <span class="token function">__get__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> instance<span class="token punctuation">,</span> owner<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_value
    
    <span class="token keyword">def</span> <span class="token function">__set__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> instance<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> self<span class="token punctuation">.</span>_low <span class="token operator">&lt;=</span> value <span class="token operator">&lt;=</span> self<span class="token punctuation">.</span>_high<span class="token punctuation">:</span>
            <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;Value must be between </span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>_low<span class="token punctuation">}</span></span><span class="token string"> and </span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>_high<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>_value <span class="token operator">=</span> value

<span class="token keyword">class</span> <span class="token class-name">MyClass</span><span class="token punctuation">:</span>
    bounded_prop <span class="token operator">=</span> Bounded<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>

my_obj <span class="token operator">=</span> MyClass<span class="token punctuation">(</span><span class="token punctuation">)</span>
my_obj<span class="token punctuation">.</span>bounded_prop <span class="token operator">=</span> <span class="token number">50</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>my_obj<span class="token punctuation">.</span>bounded_prop<span class="token punctuation">)</span>  <span class="token comment"># 50</span>
my_obj<span class="token punctuation">.</span>bounded_prop <span class="token operator">=</span> <span class="token number">200</span>  <span class="token comment"># raises ValueError</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的例子中，<code>Bounded</code> 描述器在 <code>__set__</code> 方法中进行了数值范围的检查，如果值不在指定范围内，则抛出了 <code>ValueError</code> 异常。</p><h3 id="实现延迟加载和缓存" tabindex="-1"><a class="header-anchor" href="#实现延迟加载和缓存" aria-hidden="true">#</a> 实现延迟加载和缓存</h3><p>描述器还可以用于实现延迟加载和缓存逻辑。通过在 <code>__get__</code> 方法中添加逻辑，可以实现属性的延迟加载，即当属性第一次被访问时才进行加载。此外，还可以使用描述器来实现缓存逻辑，以避免重复计算。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">LazyLoad</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> func<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>_func <span class="token operator">=</span> func

    <span class="token keyword">def</span> <span class="token function">__get__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> instance<span class="token punctuation">,</span> owner<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> instance <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> self
        value <span class="token operator">=</span> self<span class="token punctuation">.</span>_func<span class="token punctuation">(</span>instance<span class="token punctuation">)</span>
        <span class="token builtin">setattr</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> self<span class="token punctuation">.</span>_func<span class="token punctuation">.</span>__name__<span class="token punctuation">,</span> value<span class="token punctuation">)</span>
        <span class="token keyword">return</span> value


<span class="token keyword">class</span> <span class="token class-name">MyClass</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>_expensive_data <span class="token operator">=</span> <span class="token boolean">None</span>

    <span class="token decorator annotation punctuation">@LazyLoad</span>
    <span class="token keyword">def</span> <span class="token function">expensive_data</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Calculating expensive data...&quot;</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>_expensive_data <span class="token operator">=</span> <span class="token punctuation">[</span>i <span class="token operator">**</span> <span class="token number">2</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_expensive_data


my_obj <span class="token operator">=</span> MyClass<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>my_obj<span class="token punctuation">.</span>expensive_data<span class="token punctuation">)</span>  <span class="token comment"># Calculating expensive data... </span>
<span class="token keyword">print</span><span class="token punctuation">(</span>my_obj<span class="token punctuation">.</span>expensive_data<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的程序的输出结果如下所示：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>Calculating expensive data<span class="token punctuation">..</span>.
<span class="token punctuation">[</span><span class="token number">0</span>, <span class="token number">1</span>, <span class="token number">4</span>, <span class="token number">9</span>, <span class="token number">16</span>, <span class="token number">25</span>, <span class="token number">36</span>, <span class="token number">49</span>, <span class="token number">64</span>, <span class="token number">81</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token number">0</span>, <span class="token number">1</span>, <span class="token number">4</span>, <span class="token number">9</span>, <span class="token number">16</span>, <span class="token number">25</span>, <span class="token number">36</span>, <span class="token number">49</span>, <span class="token number">64</span>, <span class="token number">81</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从上面的结果可以看到，只有在第一次使用属性的时候才调用函数，后续再次调用函数将不会再调用函数而是直接返回缓存的结果。</p><h3 id="实现-orm-映射" tabindex="-1"><a class="header-anchor" href="#实现-orm-映射" aria-hidden="true">#</a> 实现 ORM 映射</h3><p>ORM 的主要作用是把数据库中的关系数据转化为面向对象的数据，让开发者可以通过编写面向对象的代码来操作数据库。ORM 技术可以把面向对象的编程语言和关系数据库之间的映射关系抽象出来，开发者可以不用写 SQL 语句，而是直接使用面向对象的语法进行数据库操作。</p><p>我们现在需要实现一个功能，user.name 直接从数据库的 user 表当中查询 name 等于 user.name 的数据，user.name = &quot;xxx&quot; 根据 user 的主键 id 进行更新数据。这个功能我们就可以使用描述器实现，因为只需要了解如何使用描述器的，因此在下面的代码当中并没有连接数据库：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>
conn <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">)</span>


<span class="token keyword">class</span> <span class="token class-name">Field</span><span class="token punctuation">:</span>

    <span class="token keyword">def</span> <span class="token function">__set_name__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> owner<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>fetch <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f&#39;SELECT </span><span class="token interpolation"><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span><span class="token string"> FROM </span><span class="token interpolation"><span class="token punctuation">{</span>owner<span class="token punctuation">.</span>table<span class="token punctuation">}</span></span><span class="token string"> WHERE </span><span class="token interpolation"><span class="token punctuation">{</span>owner<span class="token punctuation">.</span>key<span class="token punctuation">}</span></span><span class="token string">=?;&#39;</span></span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;</span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>fetch <span class="token operator">=</span> <span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>store <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f&#39;UPDATE </span><span class="token interpolation"><span class="token punctuation">{</span>owner<span class="token punctuation">.</span>table<span class="token punctuation">}</span></span><span class="token string"> SET </span><span class="token interpolation"><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span><span class="token string">=? WHERE </span><span class="token interpolation"><span class="token punctuation">{</span>owner<span class="token punctuation">.</span>key<span class="token punctuation">}</span></span><span class="token string">=?;&#39;</span></span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;</span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>store <span class="token operator">=</span> <span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">__get__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> obj<span class="token punctuation">,</span> objtype<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> conn<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>self<span class="token punctuation">.</span>fetch<span class="token punctuation">,</span> <span class="token punctuation">[</span>obj<span class="token punctuation">.</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>fetchone<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>

    <span class="token keyword">def</span> <span class="token function">__set__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> obj<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>
        conn<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>self<span class="token punctuation">.</span>store<span class="token punctuation">,</span> <span class="token punctuation">[</span>value<span class="token punctuation">,</span> obj<span class="token punctuation">.</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>
        conn<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>


<span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">:</span>
    table <span class="token operator">=</span> <span class="token string">&#39;User&#39;</span>                    <span class="token comment"># Table name</span>
    key <span class="token operator">=</span> <span class="token string">&#39;id&#39;</span>                       <span class="token comment"># Primary key</span>
    name <span class="token operator">=</span> Field<span class="token punctuation">(</span><span class="token punctuation">)</span>
    age <span class="token operator">=</span> Field<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>key <span class="token operator">=</span> key


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    u <span class="token operator">=</span> User<span class="token punctuation">(</span><span class="token string">&quot;Bob&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的程序输出结果如下所示：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>self.fetch <span class="token operator">=</span> <span class="token string">&#39;SELECT name FROM User WHERE id=?;&#39;</span>
self.store <span class="token operator">=</span> <span class="token string">&#39;UPDATE User SET name=? WHERE id=?;&#39;</span>
self.fetch <span class="token operator">=</span> <span class="token string">&#39;SELECT age FROM User WHERE id=?;&#39;</span>
self.store <span class="token operator">=</span> &#39;UPDATE User SET <span class="token assign-left variable">age</span><span class="token operator">=</span>? WHERE <span class="token assign-left variable">id</span><span class="token operator">=</span>?<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从上面的输出结果我们可以看到针对 name 和 age 两个字段的查询和更新语句确实生成了，当我们调用 u.name = xxx 或者 u.age = xxx 的时候就执行 <code>__set__</code> 函数，就会连接数据库进行相应的操作了。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>在本篇文章当中主要给大家介绍了什么是描述器以及我们能够使用描述器来实现什么样的功能，事实上 python 是一个比较随意的语言，因此我们可以利用很多有意思的语法做出黑多黑科技。python 语言本身也利用描述器实现了很多有意思的功能，比如 property、staticmethod 等等，这些内容我们在后面的文章当中再进行分析。</p><hr><p>本篇文章是深入理解 python 虚拟机系列文章之一，文章地址：https://github.com/Chang-LeHung/dive-into-cpython</p>`,52),d={href:"https://github.com/Chang-LeHung/CSCore",target:"_blank",rel:"noopener noreferrer"},k=n("p",null,"关注公众号：一无是处的研究僧，了解更多计算机（Java、Python、计算机系统基础、算法与数据结构）知识。",-1),v=n("p",null,[n("img",{src:e,alt:""})],-1);function _(m,b){const a=p("ExternalLinkIcon");return o(),c("div",null,[r,n("p",null,[s("更多精彩内容合集可访问项目："),n("a",d,[s("https://github.com/Chang-LeHung/CSCore"),l(a)])]),k,v])}const f=t(u,[["render",_],["__file","01class.html.vue"]]);export{f as default};
