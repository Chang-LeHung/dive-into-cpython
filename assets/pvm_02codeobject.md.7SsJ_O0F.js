import{_ as i}from"./chunks/qrcode2.CrPWRJyg.js";import{_ as a,c as n,a2 as l,o as p}from"./chunks/framework.BEX9PuV7.js";const e="/dive-into-cpython/assets/39-codeobject.BO97npnJ.png",h="/dive-into-cpython/assets/40-codeobject.CZ_by5xy.png",t="/dive-into-cpython/assets/41-codeobject.C0A5ztq0.png",k="/dive-into-cpython/assets/42-codeobject.CDrU2XIV.png",r="/dive-into-cpython/assets/43-codeobject.oWAm4spI.png",c="/dive-into-cpython/assets/44-codeobject.CGeHvYb6.png",u=JSON.parse('{"title":"深入理解 python 虚拟机：字节码灵魂——Code object","description":"","frontmatter":{},"headers":[],"relativePath":"pvm/02codeobject.md","filePath":"pvm/02codeobject.md","lastUpdated":1761068341000}'),d={name:"pvm/02codeobject.md"};function F(g,s,E,b,y,o){return p(),n("div",null,s[0]||(s[0]=[l(`<h1 id="深入理解-python-虚拟机-字节码灵魂——code-object" tabindex="-1">深入理解 python 虚拟机：字节码灵魂——Code object <a class="header-anchor" href="#深入理解-python-虚拟机-字节码灵魂——code-object" aria-label="Permalink to &quot;深入理解 python 虚拟机：字节码灵魂——Code object&quot;">​</a></h1><p>在本篇文章当中主要给大家深入介绍在 cpython 当中非常重要的一个数据结构 code object! 在上一篇文章 <a href="https://mp.weixin.qq.com/s?__biz=Mzg3ODgyNDgwNg==&amp;mid=2247488040&amp;idx=1&amp;sn=665b5b6080d5ec7910f586b252281bcf&amp;chksm=cf0c8e21f87b073748c82af61a5c7c9d73bca95e5b6558d50d1d5b1cc97e50c4a93d9daffcfa&amp;token=1257007364&amp;lang=zh_CN#rd" target="_blank" rel="noreferrer">深入理解 python 虚拟机：pyc 文件结构</a> ，我们简单介绍了一下在 code object 当中有哪些字段以及这些字段的简单含义，在本篇文章当中将会举一些例子以便更加深入理解这些字段。</p><h2 id="code-object-数据结构" tabindex="-1">Code Object 数据结构 <a class="header-anchor" href="#code-object-数据结构" aria-label="Permalink to &quot;Code Object 数据结构&quot;">​</a></h2><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    PyObject_HEAD</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> co_argcount;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		/* #arguments, except *args */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> co_kwonlyargcount;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	/* #keyword only arguments */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> co_nlocals;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		/* #local variables */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> co_stacksize;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		/* #entries needed for evaluation stack */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> co_flags;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		/* CO_..., see below */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    PyObject </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">co_code;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		/* instruction opcodes */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    PyObject </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">co_consts;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	/* list (constants used) */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    PyObject </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">co_names;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		/* list of strings (names used) */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    PyObject </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">co_varnames;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	/* tuple of strings (local variable names) */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    PyObject </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">co_freevars;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	/* tuple of strings (free variable names) */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    PyObject </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">co_cellvars;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      /* tuple of strings (cell variable names) */</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /* The rest aren&#39;t used in either hash or comparisons, except for</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       co_name (used in both) and co_firstlineno (used only in</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       comparisons).  This is done to preserve the name and line number</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       for tracebacks and debuggers; otherwise, constant de-duplication</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       would collapse identical functions/lambdas defined on different lines.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">co_cell2arg;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> /* Maps cell vars which are arguments. */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    PyObject </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">co_filename;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	/* unicode (where it was loaded from) */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    PyObject </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">co_name;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		/* unicode (name, for reference) */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> co_firstlineno;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		/* first source line number */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    PyObject </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">co_lnotab;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	/* string (encoding addr&lt;-&gt;lineno mapping) See</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">				   Objects/lnotab_notes.txt for details. */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    void</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">co_zombieframe;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     /* for optimization only (see frameobject.c) */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    PyObject </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">co_weakreflist;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   /* to support weakrefs to code objects */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} PyCodeObject;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><p>下面是 code object 当中各个字段的作用：</p><ul><li><p>首先需要了解一下代码块这个概念，所谓代码块就是一个小的 python 代码，被当做一个小的单元整体执行。在 python 当中常见的代码块块有：函数体、类的定义、一个模块。</p></li><li><p>argcount，这个表示一个代码块的参数个数，这个参数只对函数体代码块有用，因为函数可能会有参数，比如上面的 pycdemo.py 是一个模块而不是一个函数，因此这个参数对应的值为 0 。</p></li><li><p>co_code，这个对象的具体内容就是一个字节序列，存储真实的 python 字节码，主要是用于 python 虚拟机执行的，在本篇文章当中暂时不详细分析。</p></li><li><p>co_consts，这个字段是一个列表类型的字段，主要是包含一些字符串常量和数值常量，比如上面的 &quot;__main__&quot; 和 100 。</p></li><li><p>co_filename，这个字段的含义就是对应的源文件的文件名。</p></li><li><p>co_firstlineno，这个字段的含义为在 python 源文件当中第一行代码出现的行数，这个字段在进行调试的时候非常重要。</p></li><li><p>co_flags，这个字段的主要含义就是标识这个 code object 的类型。0x0080 表示这个 block 是一个协程，0x0010 表示这个 code object 是嵌套的等等。</p></li><li><p>co_lnotab，这个字段的含义主要是用于计算每个字节码指令对应的源代码行数。</p></li><li><p>co_varnames，这个字段的主要含义是表示在一个 code object 本地定义的一个名字。</p></li><li><p>co_names，和 co_varnames 相反，表示非本地定义但是在 code object 当中使用的名字。</p></li><li><p>co_nlocals，这个字段表示在一个 code object 当中本地使用的变量个数。</p></li><li><p>co_stackszie，因为 python 虚拟机是一个栈式计算机，这个参数的值表示这个栈需要的最大的值。</p></li><li><p>co_cellvars，co_freevars，这两个字段主要和嵌套函数和函数闭包有关，我们在后续的文章当中将详细解释这个字段。</p></li></ul><h2 id="codeobject-详细分析" tabindex="-1">CodeObject 详细分析 <a class="header-anchor" href="#codeobject-详细分析" aria-label="Permalink to &quot;CodeObject 详细分析&quot;">​</a></h2><p>现在我们使用一些实际的例子来分析具体的 code object 。</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dis</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> binascii</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> types</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">d </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test_co01</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(c):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> d</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>在前面的文章当中我们提到过一个函数是包括一个 code object 对象，test_co01 的 code object 对象的输出结果（完整代码见<a href="https://github.com/Chang-LeHung/dive-into-cpython/blob/master/code/codeobject/co01.py" target="_blank" rel="noreferrer">co01</a>）如下所示：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">code</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   argcount</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   nlocals</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   stacksize</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   flags</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0043</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0x43</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   code</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> b&#39;6401007d01006402007d02007c01007c0200177c0000177400001753&#39;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  9</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">           0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> LOAD_CONST</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">               1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (1)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">              3</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> STORE_FAST</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">               1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (a)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> 10</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">           6</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> LOAD_CONST</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">               2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (2)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">              9</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> STORE_FAST</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">               2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (b)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> 11</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">          12</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> LOAD_FAST</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (a)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">             15</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> LOAD_FAST</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (b)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">             18</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> BINARY_ADD</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">             19</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> LOAD_FAST</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (c)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">             22</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> BINARY_ADD</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">             23</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> LOAD_GLOBAL</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (d)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">             26</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> BINARY_ADD</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">             27</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> RETURN_VALUE</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   consts</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      None</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      2</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   names</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;d&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   varnames</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;c&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;a&#39;,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;b&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   freevars</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   cellvars</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   filename</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;/tmp/pycharm_project_396/co01.py&#39;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;test_co01&#39;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   firstlineno</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 8</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   lnotab</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> b&#39;000106010601&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br></div></div><ul><li>字段 argcount 的值等于 1，说明函数有一个参数，这个函数 test_co01 有一个参数 c 是相互对应的。</li><li>字段 nlocals 的值等于 3，说明在函数 test_co01 当中一个一共实现了三个函数本地变量 a, b, c 。</li><li>字段 names，对应代码代码当中的 co_names，根据前面的定义就是 d 这个全局变量在函数 test_co01 当中使用，但是却没有在函数当中定义了。</li><li>字段 varnames，这个就表示在本地定义使用的变量了，在函数 test_co01 当中主要有三个变量 a, b, c 。</li><li>字段 filename，就是 python 文件的地址了。</li><li>字段 firstlineno 说明函数的第一行出现在对应 python 代码的 第 8 行。</li></ul><h3 id="flags-字段详细分析" tabindex="-1">Flags 字段详细分析 <a class="header-anchor" href="#flags-字段详细分析" aria-label="Permalink to &quot;Flags 字段详细分析&quot;">​</a></h3><p>我们具体使用 python3.5 的源代码进行分析，在 cpython 虚拟机的具体实现如下所示（Include/code.h）：</p><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* Masks for co_flags above */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CO_OPTIMIZED</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0001</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CO_NEWLOCALS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0002</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CO_VARARGS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0004</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CO_VARKEYWORDS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0008</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CO_NESTED</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0010</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CO_GENERATOR</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0020</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* The CO_NOFREE flag is set if there are no free or cell variables.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   This information is redundant, but it allows a single flag test</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   to determine whether there is any extra work to be done when the</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   call frame it setup.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">*/</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CO_NOFREE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0040</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* The CO_COROUTINE flag is set for coroutine functions (defined with</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   \`\`async def\`\` keywords) */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CO_COROUTINE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0080</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CO_ITERABLE_COROUTINE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0100</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>如果 flags 字段和上面的各个宏定义进行 &amp; 运算，如果得到的结果大于 0，则说明符合对应的条件。</p><p>上面的宏定义的含义如下所示：</p><ul><li><p><strong>CO_OPTIMIZED</strong>，这个字段表示 code object 是被优化过的，使用函数本地定义的变量。</p></li><li><p><strong>CO_NEWLOCALS</strong>，这个字段的含义为当这个 code object 的代码被执行的时候会给栈帧当中的 f_locals 对象创建一个 dict 对象。</p></li><li><p><strong>CO_VARARGS</strong>，表示这个 code object 对象是否含有位置参数。</p></li><li><p><strong>CO_VARKEYWORDS</strong>，表示这个 code object 是否含有关键字参数。</p></li><li><p><strong>CO_NESTED</strong>，表示这个 code object 是一个嵌套函数。</p></li><li><p><strong>CO_GENERATOR</strong>，表示这个 code object 是一个生成器。</p></li><li><p><strong>CO_COROUTINE</strong>，表示这个 code object 是一个协程函数。</p></li><li><p><strong>CO_ITERABLE_COROUTINE</strong>，表示 code object 是一个可迭代的协程函数。</p></li><li><p><strong>CO_NOFREE</strong>，这个表示没有 freevars 和 cellvars，即没有函数闭包。</p></li></ul><p>现在再分析一下前面的函数 test_co01 的 flags，他对应的值等于 0x43，则说明这个函数满足三个特性分别是 CO_NEWLOCALS，CO_OPTIMIZED 和 CO_NOFREE。</p><h3 id="freevars-cellvars" tabindex="-1">freevars &amp; cellvars <a class="header-anchor" href="#freevars-cellvars" aria-label="Permalink to &quot;freevars &amp; cellvars&quot;">​</a></h3><p>我们使用下面的函数来对这两个字段进行分析：</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test_co02</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">():</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> g</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">():</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> g()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>上面的函数的信息如下所示（完整代码见<a href="https://github.com/Chang-LeHung/dive-into-cpython/blob/master/code/codeobject/co01.py" target="_blank" rel="noreferrer">co02</a>）：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">code</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   argcount</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   nlocals</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   stacksize</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   flags</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0003</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0x3</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   code</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      b</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&#39;640100890000640200890100870000870100660200640300640400860000&#39;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      b</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&#39;7d0000880000880100177c00008300001753&#39;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> 15</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">           0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> LOAD_CONST</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">               1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (1)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">              3</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> STORE_DEREF</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (a)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> 16</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">           6</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> LOAD_CONST</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">               2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (2)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">              9</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> STORE_DEREF</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (b)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> 18</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">          12</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> LOAD_CLOSURE</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">             0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (a)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">             15</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> LOAD_CLOSURE</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">             1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (b)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">             18</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> BUILD_TUPLE</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              2</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">             21</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> LOAD_CONST</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">               3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (&lt;code </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">object</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> g</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 0x7f133ff496f0,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> file</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;/tmp/pycharm_project_396/co01.py&quot;,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> line</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">8&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">             24</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> LOAD_CONST</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">               4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;test_co02.&lt;locals&gt;.g&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">             27</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> MAKE_CLOSURE</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">             0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">             30</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> STORE_FAST</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">               0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (g)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> 20</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">          33</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> LOAD_DEREF</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">               0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (a)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">             36</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> LOAD_DEREF</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">               1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (b)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">             39</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> BINARY_ADD</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">             40</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> LOAD_FAST</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (g)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">             43</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> CALL_FUNCTION</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (0 </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">positional,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> keyword</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pair</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">             46</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> BINARY_ADD</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">             47</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> RETURN_VALUE</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   consts</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      None</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      2</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      code</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">         argcount</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">         nlocals</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">         stacksize</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">         flags</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0013</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0x13</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">         code</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> b&#39;8800008801001753&#39;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> 19</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">           0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> LOAD_DEREF</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">               0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (a)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">              3</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> LOAD_DEREF</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">               1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (b)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">              6</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> BINARY_ADD</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">              7</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> RETURN_VALUE</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">         consts</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            None</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">         names</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">         varnames</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">         freevars</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;a&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;b&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">         cellvars</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">         filename</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;/tmp/pycharm_project_396/co01.py&#39;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">         name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;g&#39;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">         firstlineno</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 18</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">         lnotab</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> b&#39;0001&#39;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      &#39;test_co02.&lt;locals&gt;.g&#39;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   names</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   varnames</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;g&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   freevars</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   cellvars</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;a&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;b&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   filename</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;/tmp/pycharm_project_396/co01.py&#39;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;test_co02&#39;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   firstlineno</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 14</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   lnotab</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> b&#39;0001060106021502&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br></div></div><p>从上面的输出我们可以看到的是，函数 test_co02 的 cellvars 为 (&#39;a&#39;, &#39;b&#39;)，函数 g 的 freevars 为 (&#39;a&#39;, &#39;b&#39;)，cellvars 表示在其他函数当中会使用本地定义的变量，freevars 表示本地会使用其他函数定义的变量。</p><p>再来分析一下函数 test_co02 的 flags，他的 flags 等于 0x3 因为有闭包的存在因此 flags 不会存在 CO_NOFREE，也就是少了值 0x0040 。</p><h3 id="stacksize" tabindex="-1">stacksize <a class="header-anchor" href="#stacksize" aria-label="Permalink to &quot;stacksize&quot;">​</a></h3><p>这个字段存储的是在函数在被虚拟机执行的时候所需要的最大的栈空间的大小，这也是一种优化手段，因为在知道所需要的最大的栈空间，所以可以在函数执行的时候直接分配指定大小的空间不需要在函数执行的时候再去重新扩容。</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test_stack</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">():</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>上面的代码相关字节码等信息如下所示：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">code</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   argcount</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   nlocals</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   stacksize</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   flags</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0043</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0x43</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   code</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> b&#39;6401007d00006402007d01007c00007c01001753&#39;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   #					  字节码指令		 # 字节码指令参数 # 参数对应的值</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> 24</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">           0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> LOAD_CONST</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">               1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (1)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">              3</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> STORE_FAST</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">               0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (a)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> 25</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">           6</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> LOAD_CONST</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">               2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (2)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">              9</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> STORE_FAST</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">               1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (b)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> 26</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">          12</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> LOAD_FAST</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (a)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">             15</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> LOAD_FAST</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (b)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">             18</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> BINARY_ADD</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">             19</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> RETURN_VALUE</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   consts</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      None</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 下标等于 0 的常量</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      1</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> 	 # 下标等于 1 的常量</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      2</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		 # 下标等于 2 的常量</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   names</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   varnames</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;a&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;b&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   freevars</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   cellvars</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><p>我们现在来模拟一下执行过程，在模拟之前我们首先来了解一下上面几条字节码的作用：</p><ul><li>LOAD_CONST，将常量表当中的下标等于 i 个对象加载到栈当中，对应上面的代码 LOAD_CONST 的参数 i = 1。因此加载测常量等于 1 。因此现在栈空间如下所示：</li></ul><p><img src="`+e+'" alt="39-codeobject"></p><ul><li>STORE_FAST，将栈顶元素弹出并且保存到 co_varnames 对应的下标当中，根据上面的字节码参数等于 0 ，因此将 1 保存到 co_varnames[0] 对应的对象当中。</li></ul><p><img src="'+h+'" alt="39-codeobject"></p><ul><li>LOAD_CONST，将下标等于 2 的常量加载进入栈中。</li></ul><p><img src="'+t+'" alt="39-codeobject"></p><ul><li>STORE_FAST，将栈顶元素弹出，并且保存到 varnames 下标为 1 的对象。</li></ul><p><img src="'+k+'" alt="39-codeobject"></p><ul><li>LOAD_FAST，是取出 co_varnames 对应下标的数据，并且将其压入栈中。我们直接连续执行两个 LOAD_FAST 之后栈空间的布局如下：</li></ul><p><img src="'+r+'" alt="39-codeobject"></p><ul><li>BINARY_ADD，这个字节码指令是将栈空间的两个栈顶元素弹出，然后将两个数据进行相加操作，然后将相加得到的结果重新压入栈中。</li></ul><p><img src="'+c+'" alt="39-codeobject"></p><ul><li>RETURN_VALUE，将栈顶元素弹出并且作为返回值返回。</li></ul><p>从上面的整个执行过程来看整个栈空间使用的最大的空间长度为 2 ，因此 stacksize = 2 。</p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>在本篇文章当中主要分析了一些 code object 当中比较重要的字段，code object 是 cpython 虚拟机当中一个比较重要的数据结构，深入的去理解这里面的字段对于我们理解 python 虚拟机非常有帮助。</p><hr><p>本篇文章是深入理解 python 虚拟机系列文章之一，文章地址：<a href="https://github.com/Chang-LeHung/dive-into-cpython" target="_blank" rel="noreferrer">https://github.com/Chang-LeHung/dive-into-cpython</a></p><p>更多精彩内容合集可访问项目：<a href="https://github.com/Chang-LeHung/CSCore" target="_blank" rel="noreferrer">https://github.com/Chang-LeHung/CSCore</a></p><p>关注公众号：一无是处的研究僧，了解更多计算机（Java、Python、计算机系统基础、算法与数据结构）知识。</p><p><img src="'+i+'" alt=""></p>',53)]))}const B=a(d,[["render",F]]);export{u as __pageData,B as default};
