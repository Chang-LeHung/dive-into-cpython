import{_ as t}from"./qrcode2-187b7271.js";import{_ as e,r as p,o,c,a as n,d as a,b as l,e as i}from"./app-6b5e6c63.js";const u={},r=i(`<h1 id="深入理解-python-虚拟机-浮点数-float-的实现原理及源码剖析" tabindex="-1"><a class="header-anchor" href="#深入理解-python-虚拟机-浮点数-float-的实现原理及源码剖析" aria-hidden="true">#</a> 深入理解 Python 虚拟机：浮点数（float）的实现原理及源码剖析</h1><p>在本篇文章当中主要分析在 cpython 虚拟机当中 float 类型的实现原理以及与他相关的一些源代码。</p><h2 id="float-数据结构" tabindex="-1"><a class="header-anchor" href="#float-数据结构" aria-hidden="true">#</a> Float 数据结构</h2><p>在 cpython 虚拟机当中浮点数类型的数据结构定义如下所示：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    PyObject_HEAD
    <span class="token keyword">double</span> ob_fval<span class="token punctuation">;</span>
<span class="token punctuation">}</span> PyFloatObject<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的数据结构定义图示如下：</p><p><img src="https://img2023.cnblogs.com/blog/2519003/202303/2519003-20230312012231078-1046412986.png" alt=""></p><ul><li>在上面的数据结构当中最重要的一个字段就是 ob_fval，这个就是真实存储浮点数的地方。</li><li>ob_refcnt 就是对象的引用计数。</li><li>ob_type 就是对象的类型。</li></ul><h2 id="浮点数的相关方法" tabindex="-1"><a class="header-anchor" href="#浮点数的相关方法" aria-hidden="true">#</a> 浮点数的相关方法</h2><h3 id="创建-float-对象" tabindex="-1"><a class="header-anchor" href="#创建-float-对象" aria-hidden="true">#</a> 创建 float 对象</h3><p>和我们在前面所讨论到的元组和列表对象一样，在 cpython 内部实现 float 类型的时候也会给 float 对象做一层中间层以加快浮点数的内存分配，具体的相关代码如下所示：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PyFloat_MAXFREELIST</span>    <span class="token expression"><span class="token number">100</span></span></span>
<span class="token keyword">static</span> <span class="token keyword">int</span> numfree <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> PyFloatObject <span class="token operator">*</span>free_list <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 cpython 内部做多会缓存 100 个 float 对象的内存空间，如果超过 100 就会直接释放内存了，这里需要注意一点的是只用一个指针就可以将所有的 float 对象缓存起来，这一点是如何实现的。</p><p>这是使用在对象 PyFloatObject 当中的 struct _typeobject *ob_type; 这个字段实现的，用这个字段指向下一个 float 对象的内存空间，因为在 free_list 当中的数据并没有使用，因此可以利用这个特点节省一些内存空间。下面则是创建 float 对象的具体过程：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>PyObject <span class="token operator">*</span>
<span class="token function">PyFloat_FromDouble</span><span class="token punctuation">(</span><span class="token keyword">double</span> fval<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 首先查看 free_list 当中是否有空闲的 float 对象</span>
    PyFloatObject <span class="token operator">*</span>op <span class="token operator">=</span> free_list<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>op <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 如果有 那么就将让 free_list 指向 free_list 当中的下一个 float 对象 并且将对应的个数减 1</span>
        free_list <span class="token operator">=</span> <span class="token punctuation">(</span>PyFloatObject <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">Py_TYPE</span><span class="token punctuation">(</span>op<span class="token punctuation">)</span><span class="token punctuation">;</span>
        numfree<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      	<span class="token comment">// 否则的话就需要申请内存空间</span>
        op <span class="token operator">=</span> <span class="token punctuation">(</span>PyFloatObject<span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">PyObject_MALLOC</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>PyFloatObject<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>op<span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token function">PyErr_NoMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">/* Inline PyObject_New */</span>
    <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token function">PyObject_INIT</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> <span class="token operator">&amp;</span>PyFloat_Type<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// PyObject_INIT 这个宏的主要作用是将对象的引用计数设置成 1</span>
    op<span class="token operator">-&gt;</span>ob_fval <span class="token operator">=</span> fval<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>PyObject <span class="token operator">*</span><span class="token punctuation">)</span> op<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="加法" tabindex="-1"><a class="header-anchor" href="#加法" aria-hidden="true">#</a> 加法</h3><p>下面是在 cpython 当中浮点数的加法具体实现，整个过程比较简单就是得到新的值，并且创建一个新的 PyFloatObject 对象，并且将这个对象返回。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> PyObject <span class="token operator">*</span>
<span class="token function">float_add</span><span class="token punctuation">(</span>PyObject <span class="token operator">*</span>v<span class="token punctuation">,</span> PyObject <span class="token operator">*</span>w<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">double</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>
    <span class="token function">CONVERT_TO_DOUBLE</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// CONVERT_TO_DOUBLE 这个宏的主要作用就是将对象的 ob_fval 这个字段的值保存到 a 当中</span>
    <span class="token function">CONVERT_TO_DOUBLE</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 这个就是将 w 当中的 ob_fval 字段的值保存到 b 当中</span>
    a <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">PyFloat_FromDouble</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建一个新的 float 对象 并且将这个对象返回</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="减法" tabindex="-1"><a class="header-anchor" href="#减法" aria-hidden="true">#</a> 减法</h3><p>同理减法也是一样的。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> PyObject <span class="token operator">*</span>
<span class="token function">float_sub</span><span class="token punctuation">(</span>PyObject <span class="token operator">*</span>v<span class="token punctuation">,</span> PyObject <span class="token operator">*</span>w<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">double</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>
    <span class="token function">CONVERT_TO_DOUBLE</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">CONVERT_TO_DOUBLE</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    a <span class="token operator">=</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">PyFloat_FromDouble</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="乘法" tabindex="-1"><a class="header-anchor" href="#乘法" aria-hidden="true">#</a> 乘法</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>static PyObject *
float_mul(PyObject *v, PyObject *w)
{
    double a,b;
    CONVERT_TO_DOUBLE(v, a);
    CONVERT_TO_DOUBLE(w, b);
    PyFPE_START_PROTECT(&quot;multiply&quot;, return 0)
    a = a * b;
    PyFPE_END_PROTECT(a)
    return PyFloat_FromDouble(a);
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="除法" tabindex="-1"><a class="header-anchor" href="#除法" aria-hidden="true">#</a> 除法</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> PyObject <span class="token operator">*</span>
<span class="token function">float_div</span><span class="token punctuation">(</span>PyObject <span class="token operator">*</span>v<span class="token punctuation">,</span> PyObject <span class="token operator">*</span>w<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">double</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>
    <span class="token function">CONVERT_TO_DOUBLE</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">CONVERT_TO_DOUBLE</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token number">0.0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">PyErr_SetString</span><span class="token punctuation">(</span>PyExc_ZeroDivisionError<span class="token punctuation">,</span>
                        <span class="token string">&quot;float division by zero&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    a <span class="token operator">=</span> a <span class="token operator">/</span> b<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">PyFloat_FromDouble</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="取反" tabindex="-1"><a class="header-anchor" href="#取反" aria-hidden="true">#</a> 取反</h3><p>这里加入了一行输出语句，这个是为了后面方便我们进行测试的。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> PyObject <span class="token operator">*</span>
<span class="token function">float_neg</span><span class="token punctuation">(</span>PyFloatObject <span class="token operator">*</span>v<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%.2lf 正在进行取反运算\\n&quot;</span><span class="token punctuation">,</span> v<span class="token operator">-&gt;</span>ob_fval<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">PyFloat_FromDouble</span><span class="token punctuation">(</span><span class="token operator">-</span>v<span class="token operator">-&gt;</span>ob_fval<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="求绝对值" tabindex="-1"><a class="header-anchor" href="#求绝对值" aria-hidden="true">#</a> 求绝对值</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> PyObject <span class="token operator">*</span>
<span class="token function">float_abs</span><span class="token punctuation">(</span>PyFloatObject <span class="token operator">*</span>v<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%.2lf 正在进行取 abs 运算\\n&quot;</span><span class="token punctuation">,</span> v<span class="token operator">-&gt;</span>ob_fval<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">PyFloat_FromDouble</span><span class="token punctuation">(</span><span class="token function">fabs</span><span class="token punctuation">(</span>v<span class="token operator">-&gt;</span>ob_fval<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="求-bool-值" tabindex="-1"><a class="header-anchor" href="#求-bool-值" aria-hidden="true">#</a> 求 bool 值</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span>
<span class="token function">float_bool</span><span class="token punctuation">(</span>PyFloatObject <span class="token operator">*</span>v<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%.2lf 正在进行取 bool 运算\\n&quot;</span><span class="token punctuation">,</span> v<span class="token operator">-&gt;</span>ob_fval<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> v<span class="token operator">-&gt;</span>ob_fval <span class="token operator">!=</span> <span class="token number">0.0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下图是我们对于 cpython 对程序的修改！</p><p><img src="https://img2023.cnblogs.com/blog/2519003/202303/2519003-20230312012231529-1258902717.png" alt=""></p><p>下面是修改之后我们再次对浮点数进行操作的时候的输出，可以看到的是输出了我们在上面的代码当中加入的语句。</p><p><img src="https://img2023.cnblogs.com/blog/2519003/202303/2519003-20230312012232417-856773466.png" alt=""></p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>在本篇文章当总主要介绍了一些 float 类型在 cpython 内部是如何实现的以及和他相关的加减乘除方法是如何实现的，以及和部分和关键字有关的函数实现。本篇文章主要是讨论 float 数据类型本身，不涉及其他的东西，其实关于类型还有非常大一块，就是 cpython 内部对象系统是如何实现的，这一点在后面深入讨论对象系统的时候再进行深入分析，在回头来看 float 类型会有更加深刻的理解。</p><hr><p>本篇文章是深入理解 python 虚拟机系列文章之一，文章地址：https://github.com/Chang-LeHung/dive-into-cpython</p>`,40),d={href:"https://github.com/Chang-LeHung/CSCore",target:"_blank",rel:"noopener noreferrer"},k=n("p",null,"关注公众号：一无是处的研究僧，了解更多计算机（Java、Python、计算机系统基础、算法与数据结构）知识。",-1),v=n("p",null,[n("img",{src:t,alt:""})],-1);function b(m,h){const s=p("ExternalLinkIcon");return o(),c("div",null,[r,n("p",null,[a("更多精彩内容合集可访问项目："),n("a",d,[a("https://github.com/Chang-LeHung/CSCore"),l(s)])]),k,v])}const _=e(u,[["render",b],["__file","03float_upload.html.vue"]]);export{_ as default};
