import{_ as e}from"./qrcode2-187b7271.js";import{_ as p,r as t,o,c,a as n,d as s,b as l,e as i}from"./app-6b5e6c63.js";const u={},r=i(`<h1 id="深入理解-python-虚拟机-字节码教程-1-——原来装饰器是这样实现的" tabindex="-1"><a class="header-anchor" href="#深入理解-python-虚拟机-字节码教程-1-——原来装饰器是这样实现的" aria-hidden="true">#</a> 深入理解 python 虚拟机：字节码教程(1)——原来装饰器是这样实现的</h1><p>在本篇文章当中主要给大家介绍在 cpython 当中一些比较常见的字节码，从根本上理解 python 程序的执行。在本文当中主要介绍一些 python 基本操作的字节码，并且将从字节码的角度分析函数装饰器的原理！</p><h2 id="python-常见字节码" tabindex="-1"><a class="header-anchor" href="#python-常见字节码" aria-hidden="true">#</a> Python 常见字节码</h2><h3 id="load-const" tabindex="-1"><a class="header-anchor" href="#load-const" aria-hidden="true">#</a> LOAD_CONST</h3><p>这个指令用于将一个常量加载到栈中。常量可以是数字、字符串、元组、列表、字典等对象。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> dis<span class="token punctuation">.</span>dis<span class="token punctuation">(</span><span class="token keyword">lambda</span><span class="token punctuation">:</span> <span class="token number">42</span><span class="token punctuation">)</span>
  <span class="token number">1</span>           <span class="token number">0</span> LOAD_CONST               <span class="token number">1</span> <span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span>
              <span class="token number">2</span> RETURN_VALUE
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="load-name" tabindex="-1"><a class="header-anchor" href="#load-name" aria-hidden="true">#</a> LOAD_NAME</h3><p>这个指令用于将一个变量加载到栈中。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> dis<span class="token punctuation">.</span>dis<span class="token punctuation">(</span><span class="token keyword">lambda</span><span class="token punctuation">:</span> x<span class="token punctuation">)</span>
  <span class="token number">1</span>           <span class="token number">0</span> LOAD_GLOBAL              <span class="token number">0</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span>
              <span class="token number">2</span> RETURN_VALUE
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="store-name" tabindex="-1"><a class="header-anchor" href="#store-name" aria-hidden="true">#</a> STORE_NAME</h3><p>这个指令用于将栈顶的值存储到一个变量中。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> dis<span class="token punctuation">.</span>dis<span class="token punctuation">(</span><span class="token string">&quot;x=42&quot;</span><span class="token punctuation">)</span>
  <span class="token number">1</span>           <span class="token number">0</span> LOAD_CONST               <span class="token number">0</span> <span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span>
              <span class="token number">2</span> STORE_NAME               <span class="token number">0</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span>
              <span class="token number">4</span> LOAD_CONST               <span class="token number">1</span> <span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">)</span>
              <span class="token number">6</span> RETURN_VALUE
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="binary-add" tabindex="-1"><a class="header-anchor" href="#binary-add" aria-hidden="true">#</a> BINARY_ADD</h3><p>这个指令用于对栈顶的两个值进行加法运算并将结果推送到栈中。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> dis<span class="token punctuation">.</span>dis<span class="token punctuation">(</span><span class="token keyword">lambda</span><span class="token punctuation">:</span> x <span class="token operator">+</span> y<span class="token punctuation">)</span>
  <span class="token number">1</span>           <span class="token number">0</span> LOAD_GLOBAL              <span class="token number">0</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span>
              <span class="token number">2</span> LOAD_GLOBAL              <span class="token number">1</span> <span class="token punctuation">(</span>y<span class="token punctuation">)</span>
              <span class="token number">4</span> BINARY_ADD
              <span class="token number">6</span> RETURN_VALUE
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="binary-subtract" tabindex="-1"><a class="header-anchor" href="#binary-subtract" aria-hidden="true">#</a> BINARY_SUBTRACT</h3><p>这个指令用于对栈顶的两个值进行减法运算并将结果推送到栈中。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> dis<span class="token punctuation">.</span>dis<span class="token punctuation">(</span><span class="token keyword">lambda</span><span class="token punctuation">:</span> x <span class="token operator">-</span> y<span class="token punctuation">)</span>
  <span class="token number">1</span>           <span class="token number">0</span> LOAD_GLOBAL              <span class="token number">0</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span>
              <span class="token number">2</span> LOAD_GLOBAL              <span class="token number">1</span> <span class="token punctuation">(</span>y<span class="token punctuation">)</span>
              <span class="token number">4</span> BINARY_SUBTRACT
              <span class="token number">6</span> RETURN_VALUE
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同样的加减乘除取余数的字节码如下所示：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> dis<span class="token punctuation">.</span>dis<span class="token punctuation">(</span><span class="token keyword">lambda</span><span class="token punctuation">:</span> x <span class="token operator">+</span> y<span class="token punctuation">)</span>
  <span class="token number">1</span>           <span class="token number">0</span> LOAD_GLOBAL              <span class="token number">0</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span>
              <span class="token number">2</span> LOAD_GLOBAL              <span class="token number">1</span> <span class="token punctuation">(</span>y<span class="token punctuation">)</span>
              <span class="token number">4</span> BINARY_ADD
              <span class="token number">6</span> RETURN_VALUE
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> dis<span class="token punctuation">.</span>dis<span class="token punctuation">(</span><span class="token keyword">lambda</span><span class="token punctuation">:</span> x <span class="token operator">-</span> y<span class="token punctuation">)</span>
  <span class="token number">1</span>           <span class="token number">0</span> LOAD_GLOBAL              <span class="token number">0</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span>
              <span class="token number">2</span> LOAD_GLOBAL              <span class="token number">1</span> <span class="token punctuation">(</span>y<span class="token punctuation">)</span>
              <span class="token number">4</span> BINARY_SUBTRACT
              <span class="token number">6</span> RETURN_VALUE
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> dis<span class="token punctuation">.</span>dis<span class="token punctuation">(</span><span class="token keyword">lambda</span><span class="token punctuation">:</span> x <span class="token operator">*</span> y<span class="token punctuation">)</span>
  <span class="token number">1</span>           <span class="token number">0</span> LOAD_GLOBAL              <span class="token number">0</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span>
              <span class="token number">2</span> LOAD_GLOBAL              <span class="token number">1</span> <span class="token punctuation">(</span>y<span class="token punctuation">)</span>
              <span class="token number">4</span> BINARY_MULTIPLY
              <span class="token number">6</span> RETURN_VALUE
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> dis<span class="token punctuation">.</span>dis<span class="token punctuation">(</span><span class="token keyword">lambda</span><span class="token punctuation">:</span> x <span class="token operator">/</span> y<span class="token punctuation">)</span>
  <span class="token number">1</span>           <span class="token number">0</span> LOAD_GLOBAL              <span class="token number">0</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span>
              <span class="token number">2</span> LOAD_GLOBAL              <span class="token number">1</span> <span class="token punctuation">(</span>y<span class="token punctuation">)</span>
              <span class="token number">4</span> BINARY_TRUE_DIVIDE
              <span class="token number">6</span> RETURN_VALUE
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> dis<span class="token punctuation">.</span>dis<span class="token punctuation">(</span><span class="token keyword">lambda</span><span class="token punctuation">:</span> x <span class="token operator">//</span> y<span class="token punctuation">)</span>
  <span class="token number">1</span>           <span class="token number">0</span> LOAD_GLOBAL              <span class="token number">0</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span>
              <span class="token number">2</span> LOAD_GLOBAL              <span class="token number">1</span> <span class="token punctuation">(</span>y<span class="token punctuation">)</span>
              <span class="token number">4</span> BINARY_FLOOR_DIVIDE
              <span class="token number">6</span> RETURN_VALUE
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> dis<span class="token punctuation">.</span>dis<span class="token punctuation">(</span><span class="token keyword">lambda</span><span class="token punctuation">:</span> x <span class="token operator">%</span> y<span class="token punctuation">)</span>
  <span class="token number">1</span>           <span class="token number">0</span> LOAD_GLOBAL              <span class="token number">0</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span>
              <span class="token number">2</span> LOAD_GLOBAL              <span class="token number">1</span> <span class="token punctuation">(</span>y<span class="token punctuation">)</span>
              <span class="token number">4</span> BINARY_MODULO
              <span class="token number">6</span> RETURN_VALUE
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="compare-op" tabindex="-1"><a class="header-anchor" href="#compare-op" aria-hidden="true">#</a> COMPARE_OP</h3><p>这个指令用于比较栈顶的两个值，并且将比较得到的结果压入栈中，这个字节码后面后一个字节的参数，表示小于大于不等于等等比较符号。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> dis<span class="token punctuation">.</span>dis<span class="token punctuation">(</span><span class="token keyword">lambda</span><span class="token punctuation">:</span> x <span class="token operator">-</span> y<span class="token punctuation">)</span>
  <span class="token number">1</span>           <span class="token number">0</span> LOAD_GLOBAL              <span class="token number">0</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span>
              <span class="token number">2</span> LOAD_GLOBAL              <span class="token number">1</span> <span class="token punctuation">(</span>y<span class="token punctuation">)</span>
              <span class="token number">4</span> BINARY_SUBTRACT
              <span class="token number">6</span> RETURN_VALUE
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> dis<span class="token punctuation">.</span>dis<span class="token punctuation">(</span><span class="token keyword">lambda</span><span class="token punctuation">:</span> x <span class="token operator">&gt;</span> y<span class="token punctuation">)</span>
  <span class="token number">1</span>           <span class="token number">0</span> LOAD_GLOBAL              <span class="token number">0</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span>
              <span class="token number">2</span> LOAD_GLOBAL              <span class="token number">1</span> <span class="token punctuation">(</span>y<span class="token punctuation">)</span>
              <span class="token number">4</span> COMPARE_OP               <span class="token number">4</span> <span class="token punctuation">(</span><span class="token operator">&gt;</span><span class="token punctuation">)</span>
              <span class="token number">6</span> RETURN_VALUE
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> dis<span class="token punctuation">.</span>dis<span class="token punctuation">(</span><span class="token keyword">lambda</span><span class="token punctuation">:</span> x <span class="token operator">&lt;</span> y<span class="token punctuation">)</span>
  <span class="token number">1</span>           <span class="token number">0</span> LOAD_GLOBAL              <span class="token number">0</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span>
              <span class="token number">2</span> LOAD_GLOBAL              <span class="token number">1</span> <span class="token punctuation">(</span>y<span class="token punctuation">)</span>
              <span class="token number">4</span> COMPARE_OP               <span class="token number">0</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token punctuation">)</span>
              <span class="token number">6</span> RETURN_VALUE
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> dis<span class="token punctuation">.</span>dis<span class="token punctuation">(</span><span class="token keyword">lambda</span><span class="token punctuation">:</span> x <span class="token operator">!=</span> y<span class="token punctuation">)</span>
  <span class="token number">1</span>           <span class="token number">0</span> LOAD_GLOBAL              <span class="token number">0</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span>
              <span class="token number">2</span> LOAD_GLOBAL              <span class="token number">1</span> <span class="token punctuation">(</span>y<span class="token punctuation">)</span>
              <span class="token number">4</span> COMPARE_OP               <span class="token number">3</span> <span class="token punctuation">(</span><span class="token operator">!=</span><span class="token punctuation">)</span>
              <span class="token number">6</span> RETURN_VALUE
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> dis<span class="token punctuation">.</span>dis<span class="token punctuation">(</span><span class="token keyword">lambda</span><span class="token punctuation">:</span> x <span class="token operator">&lt;=</span> y<span class="token punctuation">)</span>
  <span class="token number">1</span>           <span class="token number">0</span> LOAD_GLOBAL              <span class="token number">0</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span>
              <span class="token number">2</span> LOAD_GLOBAL              <span class="token number">1</span> <span class="token punctuation">(</span>y<span class="token punctuation">)</span>
              <span class="token number">4</span> COMPARE_OP               <span class="token number">1</span> <span class="token punctuation">(</span><span class="token operator">&lt;=</span><span class="token punctuation">)</span>
              <span class="token number">6</span> RETURN_VALUE
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> dis<span class="token punctuation">.</span>dis<span class="token punctuation">(</span><span class="token keyword">lambda</span><span class="token punctuation">:</span> x <span class="token operator">&gt;=</span> y<span class="token punctuation">)</span>
  <span class="token number">1</span>           <span class="token number">0</span> LOAD_GLOBAL              <span class="token number">0</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span>
              <span class="token number">2</span> LOAD_GLOBAL              <span class="token number">1</span> <span class="token punctuation">(</span>y<span class="token punctuation">)</span>
              <span class="token number">4</span> COMPARE_OP               <span class="token number">5</span> <span class="token punctuation">(</span><span class="token operator">&gt;=</span><span class="token punctuation">)</span>
              <span class="token number">6</span> RETURN_VALUE
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> dis<span class="token punctuation">.</span>dis<span class="token punctuation">(</span><span class="token keyword">lambda</span><span class="token punctuation">:</span> x <span class="token operator">==</span> y<span class="token punctuation">)</span>
  <span class="token number">1</span>           <span class="token number">0</span> LOAD_GLOBAL              <span class="token number">0</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span>
              <span class="token number">2</span> LOAD_GLOBAL              <span class="token number">1</span> <span class="token punctuation">(</span>y<span class="token punctuation">)</span>
              <span class="token number">4</span> COMPARE_OP               <span class="token number">2</span> <span class="token punctuation">(</span><span class="token operator">==</span><span class="token punctuation">)</span>
              <span class="token number">6</span> RETURN_VALUE
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="return-value" tabindex="-1"><a class="header-anchor" href="#return-value" aria-hidden="true">#</a> RETURN_VALUE</h3><p>将栈顶元素弹出作为返回值。</p><h3 id="build-list" tabindex="-1"><a class="header-anchor" href="#build-list" aria-hidden="true">#</a> BUILD_LIST</h3><p>这个指令用于创建一个列表。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> dis<span class="token punctuation">.</span>dis<span class="token punctuation">(</span><span class="token keyword">lambda</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> e<span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token number">1</span>           <span class="token number">0</span> LOAD_GLOBAL              <span class="token number">0</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span>
              <span class="token number">2</span> LOAD_GLOBAL              <span class="token number">1</span> <span class="token punctuation">(</span>b<span class="token punctuation">)</span>
              <span class="token number">4</span> LOAD_GLOBAL              <span class="token number">2</span> <span class="token punctuation">(</span>c<span class="token punctuation">)</span>
              <span class="token number">6</span> LOAD_GLOBAL              <span class="token number">3</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span>
              <span class="token number">8</span> BUILD_LIST               <span class="token number">4</span>
             <span class="token number">10</span> RETURN_VALUE
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这条字节码指令有一个参数表示栈空间当中列表元素的个数，在上面的例子当中这个参数是 4 。</p><h3 id="build-tuple" tabindex="-1"><a class="header-anchor" href="#build-tuple" aria-hidden="true">#</a> BUILD_TUPLE</h3><p>这个指令用于创建一个元组。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> dis<span class="token punctuation">.</span>dis<span class="token punctuation">(</span><span class="token keyword">lambda</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token number">1</span>           <span class="token number">0</span> LOAD_GLOBAL              <span class="token number">0</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span>
              <span class="token number">2</span> LOAD_GLOBAL              <span class="token number">1</span> <span class="token punctuation">(</span>b<span class="token punctuation">)</span>
              <span class="token number">4</span> LOAD_GLOBAL              <span class="token number">2</span> <span class="token punctuation">(</span>c<span class="token punctuation">)</span>
              <span class="token number">6</span> BUILD_TUPLE              <span class="token number">3</span>
              <span class="token number">8</span> RETURN_VALUE
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同样的这个字节码也有一个参数，表示创建元组的元素个数。</p><h3 id="build-map" tabindex="-1"><a class="header-anchor" href="#build-map" aria-hidden="true">#</a> BUILD_MAP</h3><p>这个指令用于创建一个字典。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="build-set" tabindex="-1"><a class="header-anchor" href="#build-set" aria-hidden="true">#</a> BUILD_SET</h3><p>和 list 和 tuple 一样，这条指令是用于创建一个集合对象，同样的这条指令也有一个参数表示用于创建集合的元素的个数。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> dis<span class="token punctuation">.</span>dis<span class="token punctuation">(</span><span class="token keyword">lambda</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token number">1</span>           <span class="token number">0</span> LOAD_GLOBAL              <span class="token number">0</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span>
              <span class="token number">2</span> LOAD_GLOBAL              <span class="token number">1</span> <span class="token punctuation">(</span>b<span class="token punctuation">)</span>
              <span class="token number">4</span> LOAD_GLOBAL              <span class="token number">2</span> <span class="token punctuation">(</span>c<span class="token punctuation">)</span>
              <span class="token number">6</span> LOAD_GLOBAL              <span class="token number">3</span> <span class="token punctuation">(</span>d<span class="token punctuation">)</span>
              <span class="token number">8</span> BUILD_SET                <span class="token number">4</span>
             <span class="token number">10</span> RETURN_VALUE
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="build-const-key-map" tabindex="-1"><a class="header-anchor" href="#build-const-key-map" aria-hidden="true">#</a> BUILD_CONST_KEY_MAP</h3><p>这条指令是用于创建一个字典对象，同样的这条指令也有一个参数，表示字典当中元素的个数。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> dis<span class="token punctuation">.</span>dis<span class="token punctuation">(</span><span class="token keyword">lambda</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token number">1</span>           <span class="token number">0</span> LOAD_CONST               <span class="token number">1</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
              <span class="token number">2</span> LOAD_CONST               <span class="token number">2</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>
              <span class="token number">4</span> LOAD_CONST               <span class="token number">3</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
              <span class="token number">6</span> BUILD_CONST_KEY_MAP      <span class="token number">2</span>
              <span class="token number">8</span> RETURN_VALUE
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="从字节码角度分析装饰器的原理" tabindex="-1"><a class="header-anchor" href="#从字节码角度分析装饰器的原理" aria-hidden="true">#</a> 从字节码角度分析装饰器的原理</h2><p>如果你是一个 pythoner 那么你肯定或多或少听说过装饰器，这是一个 python 的语法糖我们可以用它来做很多有趣的事情，比如在不修改源代码的基础之上给函数附加一些功能，比如说计算时间。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> time

<span class="token keyword">def</span> <span class="token function">eval_time</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>
    
    <span class="token keyword">def</span> <span class="token function">cal_time</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
        start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>
        r <span class="token operator">=</span> func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>
        end <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> r<span class="token punctuation">,</span> end <span class="token operator">-</span> start
    <span class="token keyword">return</span> cal_time


<span class="token decorator annotation punctuation">@eval_time</span>
<span class="token keyword">def</span> <span class="token function">fib</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
    a <span class="token operator">=</span> <span class="token number">0</span>
    b <span class="token operator">=</span> <span class="token number">1</span>
    <span class="token keyword">while</span> n <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
        n <span class="token operator">-=</span> <span class="token number">1</span>
        a<span class="token punctuation">,</span> b <span class="token operator">=</span> b<span class="token punctuation">,</span> a <span class="token operator">+</span> b
    <span class="token keyword">return</span> a
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的代码当中我们实现了一个计算斐波拉契数列的函数，除此之外还写了一个 eval_time 函数用于计算函数执行的时间，现在调用函数 fib(10)，程序的输出如下所示：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>fib<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
<span class="token punctuation">(</span><span class="token number">55</span>, <span class="token number">5</span>.9604644775390625e-06<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到实现了我们想要的效果。</p><p>现在我们使用一个更加简单的例子来模拟上面的代码结构，方便我们对上面函数执行的过程进行分析：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>s <span class="token operator">=</span> <span class="token triple-quoted-string string">&quot;&quot;&quot;
def decorator(func):
    print(&quot;Hello&quot;)
    return func

@decorator
def fib(n):
    pass
&quot;&quot;&quot;</span>
dis<span class="token punctuation">.</span>dis<span class="token punctuation">(</span>s<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的 dis 函数的输出对应代码的字节码如下所示：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>  <span class="token number">2</span>           <span class="token number">0</span> LOAD_CONST               <span class="token number">0</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span>code object decorator at 0x108068d40, <span class="token function">file</span> <span class="token string">&quot;&lt;dis&gt;&quot;</span>, line <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token punctuation">)</span>
              <span class="token number">2</span> LOAD_CONST               <span class="token number">1</span> <span class="token punctuation">(</span><span class="token string">&#39;decorator&#39;</span><span class="token punctuation">)</span>
              <span class="token number">4</span> MAKE_FUNCTION            <span class="token number">0</span>
              <span class="token number">6</span> STORE_NAME               <span class="token number">0</span> <span class="token punctuation">(</span>decorator<span class="token punctuation">)</span>

  <span class="token number">6</span>           <span class="token number">8</span> LOAD_NAME                <span class="token number">0</span> <span class="token punctuation">(</span>decorator<span class="token punctuation">)</span>

  <span class="token number">7</span>          <span class="token number">10</span> LOAD_CONST               <span class="token number">2</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span>code object fib at 0x1075c1710, <span class="token function">file</span> <span class="token string">&quot;&lt;dis&gt;&quot;</span>, line <span class="token operator"><span class="token file-descriptor important">6</span>&gt;</span><span class="token punctuation">)</span>
             <span class="token number">12</span> LOAD_CONST               <span class="token number">3</span> <span class="token punctuation">(</span><span class="token string">&#39;fib&#39;</span><span class="token punctuation">)</span>
             <span class="token number">14</span> MAKE_FUNCTION            <span class="token number">0</span>
             <span class="token number">16</span> CALL_FUNCTION            <span class="token number">1</span>
             <span class="token number">18</span> STORE_NAME               <span class="token number">1</span> <span class="token punctuation">(</span>fib<span class="token punctuation">)</span>
             <span class="token number">20</span> LOAD_CONST               <span class="token number">4</span> <span class="token punctuation">(</span>None<span class="token punctuation">)</span>
             <span class="token number">22</span> RETURN_VALUE

Disassembly of <span class="token operator">&lt;</span>code object decorator at 0x108068d40, <span class="token function">file</span> <span class="token string">&quot;&lt;dis&gt;&quot;</span>, line <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span>:
  <span class="token number">3</span>           <span class="token number">0</span> LOAD_GLOBAL              <span class="token number">0</span> <span class="token punctuation">(</span>print<span class="token punctuation">)</span>
              <span class="token number">2</span> LOAD_CONST               <span class="token number">1</span> <span class="token punctuation">(</span><span class="token string">&#39;Hello&#39;</span><span class="token punctuation">)</span>
              <span class="token number">4</span> CALL_FUNCTION            <span class="token number">1</span>
              <span class="token number">6</span> POP_TOP

  <span class="token number">4</span>           <span class="token number">8</span> LOAD_FAST                <span class="token number">0</span> <span class="token punctuation">(</span>func<span class="token punctuation">)</span>
             <span class="token number">10</span> RETURN_VALUE

Disassembly of <span class="token operator">&lt;</span>code object fib at 0x1075c1710, <span class="token function">file</span> <span class="token string">&quot;&lt;dis&gt;&quot;</span>, line <span class="token operator"><span class="token file-descriptor important">6</span>&gt;</span>:
  <span class="token number">8</span>           <span class="token number">0</span> LOAD_CONST               <span class="token number">0</span> <span class="token punctuation">(</span>None<span class="token punctuation">)</span>
              <span class="token number">2</span> RETURN_VALUE
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>执行第一条指令 LOAD_CONST，这条指令主要是加载一个 code object 对象，这个对象里面主要是包含函数 decorator 的字节码，主要是上面字节码的第二块内容。在执行完这条字节码之后栈空间如下所示：</li></ul><p><img src="https://img2023.cnblogs.com/blog/2519003/202304/2519003-20230409030901431-154231358.png" alt=""></p><ul><li>执行完第二条指令 LOAD_CONST 之后，会将字符串 decorator 加载进入栈空间当中。</li></ul><p><img src="https://img2023.cnblogs.com/blog/2519003/202304/2519003-20230409030901924-573245237.png" alt=""></p><ul><li>执行第三条指令 MAKE_FUNCTION，这条字节码的作用是在虚拟机内部创建一个函数，函数的名称为 decorator，函数对应的字节码则是在先前压入栈空间当中的 code object 对象，这条指令还会将创建好的函数对象压入栈中。</li></ul><p><img src="https://img2023.cnblogs.com/blog/2519003/202304/2519003-20230409030902258-376072254.png" alt=""></p><ul><li>STORE_NAME，条字节码会将栈顶的元素弹出，并且将 co_names[oparg] 指向这个对象，在上面的字节码当中 co_names[oparg] 就是 decorator 。</li></ul><p><img src="https://img2023.cnblogs.com/blog/2519003/202304/2519003-20230409030902628-506028538.png" alt=""></p><ul><li>LOAD_NAME，这条字节码就是将 co_names[oparg] 对应的名字指向的对象重新加载进入栈空间当中，也就是上面的 decorator 函数加入进行栈空间当中。</li></ul><p><img src="https://img2023.cnblogs.com/blog/2519003/202304/2519003-20230409030903013-743191138.png" alt=""></p><ul><li>接下来的三条字节码 LOAD_CONST，LOAD_CONST 和 MAKE_FUNCTION，在执行这三条字节码之后，栈空间如下所示：</li></ul><p><img src="https://img2023.cnblogs.com/blog/2519003/202304/2519003-20230409030903345-1985889220.png" alt=""></p><ul><li>接下来的一条指令非常重要，这条指令便是装饰器的核心原理，CALL_FUNCTION 这条指令有一个参数 i，在上面的字节码当中为 1，也就是说从栈顶开始的前 i 个元素都是函数参数，调用的函数在栈空间的位置为 i + 1 （从栈顶往下数），那么在上面的情况下就是说调用 decorator 函数，并且将 fib 函数作为 decorator 函数的参数，decorator 函数的返回值再压入栈顶。在上面的代码当中 decorator 函数返回值也是一个函数，也就是 decorator 函数的参数，即 fib 函数。</li></ul><p><img src="https://img2023.cnblogs.com/blog/2519003/202304/2519003-20230409030903670-1102092163.png" alt=""></p><ul><li>接下来便是 STORE_NAME 字节码，这条字节码的含义我们在前面已经说过了，就是将栈顶元素弹出，保存到 co_names[oparg] 指向的对象当中，在上面的代码当中也就是将栈顶的对象保存到 fib 当中。栈顶元素 fib 函数是调用函数 decorator 的返回值。</li></ul><p>看到这里就能够理解了原来装饰器的最根本的原理不就是函数调用嘛，比如我们最前面的用于计算函数执行时间的装饰器的原理就是：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>fib <span class="token operator">=</span> eval_time<span class="token punctuation">(</span>fib<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>将 fib 函数作为 eval_time 函数的参数，再将这个函数的返回值保存到 fib 当中，当然这个对象必须是可调用的，不然后面使用 fib() 就会保存，我们可以使用下面的代码来验证这个效果。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">decorator</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> func<span class="token punctuation">(</span><span class="token punctuation">)</span>


<span class="token decorator annotation punctuation">@decorator</span>
<span class="token keyword">def</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token string">&quot;function demo return string : Demo&quot;</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>demo<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行上面的程序结果为：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token keyword">function</span> demo <span class="token builtin class-name">return</span> string <span class="token builtin class-name">:</span> Demo
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可以看到 demo 已经变成了一个字符串对象而不再是一个函数了，因为 <code>demo = decorator(demo)</code>，而在函数 decorator 当中返回值是 demo 函数自己的返回值，因此才打印了字符串。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>在本篇文章当中主要给大家介绍了 python 当中一些基础的字节码对应的含义以及示例代码，本篇文章最重要的便是从字节码的角度解释了装饰器的本质原理，这对我们以后使用装饰器非常有帮助，可以灵活的控制和了解装饰器其中发生的故事。</p><hr><p>本篇文章是深入理解 python 虚拟机系列文章之一，文章地址：https://github.com/Chang-LeHung/dive-into-cpython</p>`,78),d={href:"https://github.com/Chang-LeHung/CSCore",target:"_blank",rel:"noopener noreferrer"},k=n("p",null,"关注公众号：一无是处的研究僧，了解更多计算机（Java、Python、计算机系统基础、算法与数据结构）知识。",-1),m=n("p",null,[n("img",{src:e,alt:""})],-1);function b(v,g){const a=t("ExternalLinkIcon");return o(),c("div",null,[r,n("p",null,[s("更多精彩内容合集可访问项目："),n("a",d,[s("https://github.com/Chang-LeHung/CSCore"),l(a)])]),k,m])}const _=p(u,[["render",b],["__file","04bytecode_tutorial_upload.html.vue"]]);export{_ as default};
