import{_ as t}from"./qrcode2-187b7271.js";import{_ as p,r as e,o,c,a as n,d as s,b as i,e as l}from"./app-6b5e6c63.js";const u="/dive-into-cpython/assets/22-int-40d1d4b7.png",r="/dive-into-cpython/assets/16-int-7cd90a77.png",k="/dive-into-cpython/assets/17-int-9f30540c.png",d="/dive-into-cpython/assets/18-int-1eb4857a.png",v="/dive-into-cpython/assets/19-int-bb4dff4a.png",b="/dive-into-cpython/assets/20-int-3bcf29e7.png",m="/dive-into-cpython/assets/21-int-b11f28ab.png",g={},y=l(`<h1 id="深入理解-python-虚拟机-整型-int-的实现原理及源码剖析" tabindex="-1"><a class="header-anchor" href="#深入理解-python-虚拟机-整型-int-的实现原理及源码剖析" aria-hidden="true">#</a> 深入理解 Python 虚拟机：整型（int）的实现原理及源码剖析</h1><p>在本篇文章当中主要给大家介绍在 cpython 内部是如何实现整型数据 int 的，主要是分析 int 类型的表示方式，分析 int 类型的巧妙设计。</p><h2 id="数据结构" tabindex="-1"><a class="header-anchor" href="#数据结构" aria-hidden="true">#</a> 数据结构</h2><p>在 cpython 内部的 int 类型的实现数据结构如下所示：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">_longobject</span> PyLongObject<span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">_longobject</span> <span class="token punctuation">{</span>
	PyObject_VAR_HEAD
	digit ob_digit<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PyObject_VAR_HEAD</span>      <span class="token expression">PyVarObject ob_base<span class="token punctuation">;</span></span></span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    PyObject ob_base<span class="token punctuation">;</span>
    Py_ssize_t ob_size<span class="token punctuation">;</span> <span class="token comment">/* Number of items in variable part */</span>
<span class="token punctuation">}</span> PyVarObject<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">_object</span> <span class="token punctuation">{</span>
    _PyObject_HEAD_EXTRA
    Py_ssize_t ob_refcnt<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">_typeobject</span> <span class="token operator">*</span>ob_type<span class="token punctuation">;</span>
<span class="token punctuation">}</span> PyObject<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的数据结构用图的方式表示出来如下图所示：</p><p><img src="`+u+'" alt="15-int"></p><ul><li>ob_refcnt，表示对象的引用记数的个数，这个对于垃圾回收很有用处，后面我们分析虚拟机中垃圾回收部分在深入分析。</li><li>ob_type，表示这个对象的数据类型是什么，在 python 当中有时候需要对数据的数据类型进行判断比如 isinstance, type 这两个关键字就会使用到这个字段。</li><li>ob_size，这个字段表示这个整型对象数组 ob_digit 当中一共有多少个元素。</li><li>digit 类型其实就是 uint32_t 类型的一个 宏定义，表示 32 位的整型数据。</li></ul><h2 id="深入分析-pylongobject-字段的语意" tabindex="-1"><a class="header-anchor" href="#深入分析-pylongobject-字段的语意" aria-hidden="true">#</a> 深入分析 PyLongObject 字段的语意</h2><p>首先我们知道在 python 当中的整数是不会溢出的，这正是 PyLongObject 使用数组的原因。在 cpython 内部的实现当中，整数有 0 、正数、负数，对于这一点在 cpython 当中有以下几个规定：</p><ul><li>ob_size，保存的是数组的长度，ob_size 大于 0 时保存的是正数，当 ob_size 小于 0 时保存的是负数。</li><li>ob_digit，保存的是整数的绝对值。在前面我们谈到了，ob_digit 是一个 32 位的数据，但是在 cpython 内部只会使用其中的前 30 位，这只为了避免溢出的问题。</li></ul><p>我们下面使用几个例子来深入理解一下上面的规则：</p><p><img src="'+r+'" alt="15-int"></p><p>在上图当中 ob_size 大于 0 ，说明这个数是一个正数，而 ob_digit 指向一个 int32 的数据，数的值等于 10，因此上面这个数表示整数 10 。</p><p><img src="'+k+'" alt="15-int"></p><p>同理 ob_size 小于 0，而 ob_digit 等于 10，因此上图当中的数据表示 -10 。</p><p><img src="'+d+'" alt="15-int"></p><p>上面是一个 ob_digit 数组长度为 2 的例子，上面所表示数据如下所示： $$ 1 \\cdot2^0 + 1 \\cdot2^1 + 1 \\cdot2^2 + ... + 1 \\cdot2^{29} + 0 \\cdot2^{30} + 0 \\cdot2^{31} + 1 \\cdot2^{32} $$</p><p>因为对于每一个数组元素来说我们只使用前 30 位，因此到第二个整型数据的时候正好对应着 $2^{30}$，大家可以对应着上面的结果了解整个计算过程。</p><p><img src="'+v+`" alt="15-int"></p><p>上面也就很简单了： $$ -(1 \\cdot2^0 + 1 \\cdot2^1 + 1 \\cdot2^2 + ... + 1 \\cdot2^{29} + 0 \\cdot2^{30} + 0 \\cdot2^{31} + 1 \\cdot2^{32}) $$</p><h2 id="小整数池" tabindex="-1"><a class="header-anchor" href="#小整数池" aria-hidden="true">#</a> 小整数池</h2><p>为了避免频繁的创建一些常用的整数，加快程序执行的速度，我们可以将一些常用的整数先缓存起来，如果需要的话就直接将这个数据返回即可。在 cpython 当中相关的代码如下所示：（小整数池当中缓存数据的区间为[-5, 256]）</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">NSMALLPOSINTS</span>           <span class="token expression"><span class="token number">257</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">NSMALLNEGINTS</span>           <span class="token expression"><span class="token number">5</span></span></span>

<span class="token keyword">static</span> PyLongObject small_ints<span class="token punctuation">[</span>NSMALLNEGINTS <span class="token operator">+</span> NSMALLPOSINTS<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+b+`" alt="15-int"></p><p>我们使用下面的代码进行测试，看是否使用了小整数池当中的数据，如果使用的话，对于使用小整数池当中的数据，他们的 id() 返回值是一样的，id 这个内嵌函数返回的是 python 对象的内存地址。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a <span class="token operator">=</span> <span class="token number">1</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> b <span class="token operator">=</span> <span class="token number">2</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> c <span class="token operator">=</span> <span class="token number">1</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">id</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>
<span class="token punctuation">(</span><span class="token number">4343136496</span><span class="token punctuation">,</span> <span class="token number">4343136496</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">6</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> c <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">6</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">id</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>
<span class="token punctuation">(</span><span class="token number">4346020624</span><span class="token punctuation">,</span> <span class="token number">4346021072</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a <span class="token operator">=</span> <span class="token number">257</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> b <span class="token operator">=</span> <span class="token number">257</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">id</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>
<span class="token punctuation">(</span><span class="token number">4346021104</span><span class="token punctuation">,</span> <span class="token number">4346021072</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从上面的结果我们可以看到的是，对于区间[-5, 256]当中的值，id 的返回值确实是一样的，不在这个区间之内的返回值就是不一样的。</p><p>我们还可以这个特性实现一个小的 trick，就是求一个 PyLongObject 对象所占的内存空间大小，因为我们可以使用 -5 和 256 这两个数据的内存首地址，然后将这个地址相减就可以得到 261 个 PyLongObject 所占的内存空间大小（注意虽然小整数池当中一共有 262 个数据，但是最后一个数据是内存首地址，并不是尾地址，因此只有 261 个数据），这样我们就可以求一个 PyLongObject 对象的内存大小。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">5</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> b <span class="token operator">=</span> <span class="token number">256</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token builtin">id</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">261</span>
<span class="token number">32.0</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从上面的输出结果我们可以看到一个 PyLongObject 对象占 32 个字节。我们可以使用下面的 C 程序查看一个 PyLongObject 真实所占的内存空间大小。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;Python.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%ld\\n&quot;</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>PyLongObject<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的程序的输出结果如下所示：</p><p><img src="`+m+`" alt="15-int"></p><p>上面两个结果是相等的，因此也验证了我们的想法。</p><p>从小整数池当中获取数据的核心代码如下所示：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> PyObject <span class="token operator">*</span>
<span class="token function">get_small_int</span><span class="token punctuation">(</span>sdigit ival<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    PyObject <span class="token operator">*</span>v<span class="token punctuation">;</span>
    <span class="token function">assert</span><span class="token punctuation">(</span><span class="token operator">-</span>NSMALLNEGINTS <span class="token operator">&lt;=</span> ival <span class="token operator">&amp;&amp;</span> ival <span class="token operator">&lt;</span> NSMALLPOSINTS<span class="token punctuation">)</span><span class="token punctuation">;</span>
    v <span class="token operator">=</span> <span class="token punctuation">(</span>PyObject <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>small_ints<span class="token punctuation">[</span>ival <span class="token operator">+</span> NSMALLNEGINTS<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">Py_INCREF</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> v<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="整数的加法实现" tabindex="-1"><a class="header-anchor" href="#整数的加法实现" aria-hidden="true">#</a> 整数的加法实现</h2><p>关于 PyLongObject 的操作有很多，我们看一下加法的实现，见微知著，剩下的其他的方法我们就不介绍了，大家感兴趣可以去看具体的源代码。</p><p>如果你了解过大整数加法就能够知道，大整数加法的具体实现过程了，在 cpython 内部的实现方式其实也是一样的，就是不断的进行加法操作然后进行进位操作。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">Py_ABS</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token operator">-</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> </span><span class="token comment">// 返回 x 的绝对值</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PyLong_BASE</span>	<span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">(</span>digit<span class="token punctuation">)</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> PyLong_SHIFT<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PyLong_MASK</span>	<span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">(</span>digit<span class="token punctuation">)</span><span class="token punctuation">(</span>PyLong_BASE <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>


<span class="token keyword">static</span> PyLongObject <span class="token operator">*</span>
<span class="token function">x_add</span><span class="token punctuation">(</span>PyLongObject <span class="token operator">*</span>a<span class="token punctuation">,</span> PyLongObject <span class="token operator">*</span>b<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 首先获得两个整型数据的 size </span>
    Py_ssize_t size_a <span class="token operator">=</span> <span class="token function">Py_ABS</span><span class="token punctuation">(</span><span class="token function">Py_SIZE</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> size_b <span class="token operator">=</span> <span class="token function">Py_ABS</span><span class="token punctuation">(</span><span class="token function">Py_SIZE</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    PyLongObject <span class="token operator">*</span>z<span class="token punctuation">;</span>
    Py_ssize_t i<span class="token punctuation">;</span>
    digit carry <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">// 确保 a 保存的数据 size 是更大的</span>
    <span class="token comment">/* Ensure a is the larger of the two: */</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>size_a <span class="token operator">&lt;</span> size_b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">{</span> PyLongObject <span class="token operator">*</span>temp <span class="token operator">=</span> a<span class="token punctuation">;</span> a <span class="token operator">=</span> b<span class="token punctuation">;</span> b <span class="token operator">=</span> temp<span class="token punctuation">;</span> <span class="token punctuation">}</span>
        <span class="token punctuation">{</span> Py_ssize_t size_temp <span class="token operator">=</span> size_a<span class="token punctuation">;</span>
            size_a <span class="token operator">=</span> size_b<span class="token punctuation">;</span>
            size_b <span class="token operator">=</span> size_temp<span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 创建一个新的 PyLongObject 对象，而且数组的长度是 size_a + 1</span>
    z <span class="token operator">=</span> <span class="token function">_PyLong_New</span><span class="token punctuation">(</span>size_a<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>z <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token comment">// 下面就是整个加法操作的核心</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size_b<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        carry <span class="token operator">+=</span> a<span class="token operator">-&gt;</span>ob_digit<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> b<span class="token operator">-&gt;</span>ob_digit<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token comment">// 将低 30 位的数据保存下来</span>
        z<span class="token operator">-&gt;</span>ob_digit<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> carry <span class="token operator">&amp;</span> PyLong_MASK<span class="token punctuation">;</span>
        <span class="token comment">// 将 carry 右移 30 位，如果上面的加法有进位的话 刚好可以在下一次加法当中使用（注意上面的 carry）</span>
        <span class="token comment">// 使用的是 += 而不是 =</span>
        carry <span class="token operator">&gt;&gt;=</span> PyLong_SHIFT<span class="token punctuation">;</span> <span class="token comment">// PyLong_SHIFT = 30</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 将剩下的长度保存 （因为 a 的 size 是比 b 大的）</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size_a<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        carry <span class="token operator">+=</span> a<span class="token operator">-&gt;</span>ob_digit<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        z<span class="token operator">-&gt;</span>ob_digit<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> carry <span class="token operator">&amp;</span> PyLong_MASK<span class="token punctuation">;</span>
        carry <span class="token operator">&gt;&gt;=</span> PyLong_SHIFT<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 最后保存高位的进位</span>
    z<span class="token operator">-&gt;</span>ob_digit<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> carry<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">long_normalize</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// long_normalize 这个函数的主要功能是保证 ob_size 保存的是真正的数据的长度 因为可以是一个正数加上一个负数 size 还变小了</span>
<span class="token punctuation">}</span>

PyLongObject <span class="token operator">*</span>
<span class="token function">_PyLong_New</span><span class="token punctuation">(</span>Py_ssize_t size<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    PyLongObject <span class="token operator">*</span>result<span class="token punctuation">;</span>
    <span class="token comment">/* Number of bytes needed is: offsetof(PyLongObject, ob_digit) +
       sizeof(digit)*size.  Previous incarnations of this code used
       sizeof(PyVarObject) instead of the offsetof, but this risks being
       incorrect in the presence of padding between the PyVarObject header
       and the digits. */</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">&gt;</span> <span class="token punctuation">(</span>Py_ssize_t<span class="token punctuation">)</span>MAX_LONG_DIGITS<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">PyErr_SetString</span><span class="token punctuation">(</span>PyExc_OverflowError<span class="token punctuation">,</span>
                        <span class="token string">&quot;too many digits in integer&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// offsetof 会调用 gcc 的一个内嵌函数 __builtin_offsetof </span>
    <span class="token comment">// offsetof(PyLongObject, ob_digit)  这个功能是得到 PyLongObject 对象 字段 ob_digit 之前的所有字段所占的内存空间的大小</span>
    result <span class="token operator">=</span> <span class="token function">PyObject_MALLOC</span><span class="token punctuation">(</span><span class="token function">offsetof</span><span class="token punctuation">(</span>PyLongObject<span class="token punctuation">,</span> ob_digit<span class="token punctuation">)</span> <span class="token operator">+</span>
                             size<span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>digit<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">PyErr_NoMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 将对象的 result 的引用计数设置成 1</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>PyLongObject<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">PyObject_INIT_VAR</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> <span class="token operator">&amp;</span>PyLong_Type<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token keyword">static</span> PyLongObject <span class="token operator">*</span>
<span class="token function">long_normalize</span><span class="token punctuation">(</span>PyLongObject <span class="token operator">*</span>v<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Py_ssize_t j <span class="token operator">=</span> <span class="token function">Py_ABS</span><span class="token punctuation">(</span><span class="token function">Py_SIZE</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Py_ssize_t i <span class="token operator">=</span> j<span class="token punctuation">;</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> v<span class="token operator">-&gt;</span>ob_digit<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token operator">--</span>i<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> j<span class="token punctuation">)</span>
        <span class="token function">Py_SIZE</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">Py_SIZE</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token operator">-</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">:</span> i<span class="token punctuation">;</span>
    <span class="token keyword">return</span> v<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>在本篇文章当中主要给大家介绍了 cpython 内部是如何实现整型数据 int 的，分析了 int 类型的表示方式和设计。int 内部使用 digit 来表示 32 位的整型数据，同时为了避免溢出的问题，只会使用其中的前 30 位。在 cpython 内部的实现当中，整数有 0 、正数、负数，对于这一点有以下几个规定：</p><ul><li>ob_size，保存的是数组的长度，ob_size 大于 0 时保存的是正数，当 ob_size 小于 0 时保存的是负数。</li><li>ob_digit，保存的是整数的绝对值。</li><li>此外，为避免频繁创建一些常用的整数，cpython 使用了小整数池的技术，将一些常用的整数先缓存起来。最后，本文还介绍了整数的加法实现，即不断进行加法操作然后进行进位操作。</li></ul><p>cpython 使用这种方式的主要原理就是大整数的加减乘除，本篇文章主要是介绍了加法操作，大家如果感兴趣可以自行阅读其他的源程序。</p><hr><p>本篇文章是深入理解 python 虚拟机系列文章之一，文章地址：https://github.com/Chang-LeHung/dive-into-cpython</p>`,47),_={href:"https://github.com/Chang-LeHung/CSCore",target:"_blank",rel:"noopener noreferrer"},h=n("p",null,"关注公众号：一无是处的研究僧，了解更多计算机（Java、Python、计算机系统基础、算法与数据结构）知识。",-1),f=n("p",null,[n("img",{src:t,alt:""})],-1);function P(L,z){const a=e("ExternalLinkIcon");return o(),c("div",null,[y,n("p",null,[s("更多精彩内容合集可访问项目："),n("a",_,[s("https://github.com/Chang-LeHung/CSCore"),i(a)])]),h,f])}const w=p(g,[["render",P],["__file","04long.html.vue"]]);export{w as default};
