import{_ as a,c as i,a2 as n,o as e}from"./chunks/framework.BEX9PuV7.js";const c=JSON.parse('{"title":"深入理解Python虚拟机：super的超级魔法","description":"","frontmatter":{},"headers":[],"relativePath":"obsy/07super.md","filePath":"obsy/07super.md","lastUpdated":1759939656000}'),p={name:"obsy/07super.md"};function l(h,s,t,r,k,d){return e(),i("div",null,s[0]||(s[0]=[n(`<h1 id="深入理解python虚拟机-super的超级魔法" tabindex="-1">深入理解Python虚拟机：super的超级魔法 <a class="header-anchor" href="#深入理解python虚拟机-super的超级魔法" aria-label="Permalink to &quot;深入理解Python虚拟机：super的超级魔法&quot;">​</a></h1><h2 id="介绍" tabindex="-1">介绍 <a class="header-anchor" href="#介绍" aria-label="Permalink to &quot;介绍&quot;">​</a></h2><p>在本篇文章中，我们将深入探讨Python中的<code>super</code>函数的使用和原理。<code>super</code>函数作为Python虚拟机中强大的功能之一，可以帮助我们更灵活地使用继承和多重继承。</p><h2 id="super函数的使用" tabindex="-1">super函数的使用 <a class="header-anchor" href="#super函数的使用" aria-label="Permalink to &quot;super函数的使用&quot;">​</a></h2><p>在Python中，我们经常使用继承来构建类的层次结构。当子类继承了父类的属性和方法时，有时我们需要在子类中调用父类的方法或属性。这就是<code>super</code>函数的用武之地。</p><p><code>super</code>函数的一般用法是在子类中调用父类的方法，格式为<code>super().method()</code>。这样可以方便地使用父类的实现，并在子类中添加自己的特定行为。</p><p>下面是一个示例代码，演示了<code>super</code>函数的使用：</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Parent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> __init__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, name):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> say_hello</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, I&#39;m </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.name</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Child</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Parent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> __init__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, name, age):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        super</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">__init__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> say_hello</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        super</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().say_hello()</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;I&#39;m </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.name</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> and I&#39;m </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.age</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> years old&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">child </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Child(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Alice&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">child.say_hello()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>输出结果为：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Hello, I&#39;m Alice</span></span>
<span class="line"><span>I&#39;m Alice and I&#39;m 10 years old</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>在上述示例中，<code>Child</code>类继承自<code>Parent</code>类。在<code>Child</code>类的构造函数中，我们使用<code>super().__init__(name)</code>来调用父类<code>Parent</code>的构造函数，以便在子类中初始化父类的属性。在<code>say_hello</code>方法中，我们使用<code>super().say_hello()</code>调用父类<code>Parent</code>的<code>say_hello</code>方法，并在子类中添加了额外的输出。</p><p>除了调用父类的方法，<code>super</code>函数还可以用于访问父类的属性。例如，<code>super().attribute</code>可以用来获取父类的属性值。</p><h2 id="super函数的原理" tabindex="-1">super函数的原理 <a class="header-anchor" href="#super函数的原理" aria-label="Permalink to &quot;super函数的原理&quot;">​</a></h2><p>要理解<code>super</code>函数的原理，我们需要了解Python中的多重继承和方法解析顺序（Method Resolution Order，MRO）。</p><p>多重继承是指一个类可以同时继承多个父类。在Python中，每个类都有一个内置属性<code>__mro__</code>，它记录了方法解析顺序。MRO是根据C3线性化算法生成的，它决定了在多重继承中调用方法的顺序。</p><p><code>super</code>函数的实现原理是根据当前类的MRO找到下一个要调用的方法。它通过检查当前类的MRO列表，找到下一个类的方法，并返回一个绑定了下一个类的实例。这意味着当我们在子类中调用<code>super().method()</code>时，实际上是在调用父类的方法。</p><h2 id="cpython的实现" tabindex="-1">CPython的实现 <a class="header-anchor" href="#cpython的实现" aria-label="Permalink to &quot;CPython的实现&quot;">​</a></h2><p>CPython是Python的默认解释器，它使用C语言实现。在CPython中，<code>super</code>函数的实现是通过查找对象的<code>__class__</code>属性来确定下一个要调用的方法。<code>__class__</code>属性指向对象所属的类。</p><p>CPython使用<code>PyTypeObject</code>结构体来表示每个类。该结构体包含了类的名称、父类、方法表等信息。在方法表中，每个方法都有一个指向实际函数的指针。</p><p>当使用<code>super</code>函数时，CPython会根据当前对象的<code>__class__</code>属性和方法名，在父类的方法表中找到对应的方法，并调用它。</p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p><code>super</code>函数是Python中重要的功能之一，它允许我们方便地调用父类的方法和访问父类的属性。它的实现原理是根据当前类的MRO找到下一个要调用的方法。在CPython中，<code>super</code>函数的实现是通过查找对象的<code>__class__</code>属性来确定下一个要调用的方法。</p><p>通过深入理解<code>super</code>函数的使用和原理，我们可以更好地利用继承和多重继承的强大功能，编写出更灵活、可维护的Python代码。</p><p>希望本文对您对<code>super</code>函数有所帮助。如有任何疑问，请随时提问。</p>`,24)]))}const E=a(p,[["render",l]]);export{c as __pageData,E as default};
