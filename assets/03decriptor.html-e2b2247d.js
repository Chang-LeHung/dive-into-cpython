import{_ as t}from"./qrcode2-187b7271.js";import{_ as p,r as e,o,c,a as n,d as s,b as i,e as l}from"./app-6b5e6c63.js";const u={},r=l(`<h1 id="深入理解-python-虚拟机-描述器实现原理与源码分析" tabindex="-1"><a class="header-anchor" href="#深入理解-python-虚拟机-描述器实现原理与源码分析" aria-hidden="true">#</a> 深入理解 python 虚拟机：描述器实现原理与源码分析</h1><p>在本篇文章当中主要给大家介绍描述器背后的实现原理，通过分析 cpython 对应的源代码了解与描述器相关的字节码的指令，我们就可以真正了解到描述器背后的原理！</p><h2 id="从字节码角度看描述器" tabindex="-1"><a class="header-anchor" href="#从字节码角度看描述器" aria-hidden="true">#</a> 从字节码角度看描述器</h2><p>在前面的内容当中我们已经详细分析了描述器的使用和其相关的应用，我们通常使用描述器都是将其作为类的一个类属性使用，而使用的方式就是 <code>a.attr</code>，而这个使用方式使用的字节码如下所示：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>Python <span class="token number">3.10</span>.9 <span class="token punctuation">(</span>main, Jan <span class="token number">11</span> <span class="token number">2023</span>, 09:18:18<span class="token punctuation">)</span> <span class="token punctuation">[</span>Clang <span class="token number">14.0</span>.6 <span class="token punctuation">]</span> on darwin
Type <span class="token string">&quot;help&quot;</span>, <span class="token string">&quot;copyright&quot;</span>, <span class="token string">&quot;credits&quot;</span> or <span class="token string">&quot;license&quot;</span> <span class="token keyword">for</span> <span class="token function">more</span> information.
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token function">import</span> dis
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> dis.dis<span class="token punctuation">(</span><span class="token string">&quot;a.attr&quot;</span><span class="token punctuation">)</span>
  <span class="token number">1</span>           <span class="token number">0</span> LOAD_NAME                <span class="token number">0</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span>
              <span class="token number">2</span> LOAD_ATTR                <span class="token number">1</span> <span class="token punctuation">(</span>attr<span class="token punctuation">)</span>
              <span class="token number">4</span> RETURN_VALUE
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到的是真正调用的字节码是 <code>LOAD_ATTR</code>，因此只需要我们深入 <code>LOAD_ATTR</code> 指令我们就能够了解这其中所有发生的内容，了解魔法背后的神秘。</p><h2 id="描述器源码分析" tabindex="-1"><a class="header-anchor" href="#描述器源码分析" aria-hidden="true">#</a> 描述器源码分析</h2><p>cpython 虚拟机当中执行这个字节码的内容如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">TARGET</span><span class="token punctuation">(</span>LOAD_ATTR<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    PyObject <span class="token operator">*</span>name <span class="token operator">=</span> <span class="token function">GETITEM</span><span class="token punctuation">(</span>names<span class="token punctuation">,</span> oparg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    PyObject <span class="token operator">*</span>owner <span class="token operator">=</span> <span class="token function">TOP</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    PyObject <span class="token operator">*</span>res <span class="token operator">=</span> <span class="token function">PyObject_GetAttr</span><span class="token punctuation">(</span>owner<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">Py_DECREF</span><span class="token punctuation">(</span>owner<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">SET_TOP</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
        <span class="token keyword">goto</span> error<span class="token punctuation">;</span>
    <span class="token function">DISPATCH</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>owner</code> 对应上面的代码当中的 <code>a</code> 对象，<code>name</code> 对应上面的字符串 <code>attr</code> 。从上面的代码分析我们可以知道真正获取属性的函数为 <code>PyObject_GetAttr</code> ，这个函数的源程序如下所示：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>PyObject <span class="token operator">*</span>
<span class="token function">PyObject_GetAttr</span><span class="token punctuation">(</span>PyObject <span class="token operator">*</span>v<span class="token punctuation">,</span> PyObject <span class="token operator">*</span>name<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 首先获取对象 v 的类型 ，对应上面的代码的话就是找到对象 a 的类型</span>
    PyTypeObject <span class="token operator">*</span>tp <span class="token operator">=</span> <span class="token function">Py_TYPE</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">PyUnicode_Check</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">PyErr_Format</span><span class="token punctuation">(</span>PyExc_TypeError<span class="token punctuation">,</span>
                     <span class="token string">&quot;attribute name must be string, not &#39;%.200s&#39;&quot;</span><span class="token punctuation">,</span>
                     name<span class="token operator">-&gt;</span>ob_type<span class="token operator">-&gt;</span>tp_name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 获取对象的 tp_getattro 函数 这个函数就是负责属性查找的函数 我们一般使用的这个属性查找函数都是</span>
    <span class="token comment">// object 这个基类的属性查找函数</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>tp<span class="token operator">-&gt;</span>tp_getattro <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">*</span>tp<span class="token operator">-&gt;</span>tp_getattro<span class="token punctuation">)</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>tp<span class="token operator">-&gt;</span>tp_getattr <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name_str <span class="token operator">=</span> <span class="token function">PyUnicode_AsUTF8</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>name_str <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">*</span>tp<span class="token operator">-&gt;</span>tp_getattr<span class="token punctuation">)</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>name_str<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">PyErr_Format</span><span class="token punctuation">(</span>PyExc_AttributeError<span class="token punctuation">,</span>
                 <span class="token string">&quot;&#39;%.50s&#39; object has no attribute &#39;%U&#39;&quot;</span><span class="token punctuation">,</span>
                 tp<span class="token operator">-&gt;</span>tp_name<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的代码当中我们提到了 object 这个基类，因为我们需要找到他的属性查找函数，因此我们看一下这个基类在 cpython 内部的定义，在 cpython 内部 object 基类定义为 <code>PyBaseObject_Type</code>：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>PyTypeObject PyBaseObject_Type <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token function">PyVarObject_HEAD_INIT</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>PyType_Type<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token string">&quot;object&quot;</span><span class="token punctuation">,</span>                                   <span class="token comment">/* tp_name */</span>
    <span class="token keyword">sizeof</span><span class="token punctuation">(</span>PyObject<span class="token punctuation">)</span><span class="token punctuation">,</span>                           <span class="token comment">/* tp_basicsize */</span>
    <span class="token number">0</span><span class="token punctuation">,</span>                                          <span class="token comment">/* tp_itemsize */</span>
    object_dealloc<span class="token punctuation">,</span>                             <span class="token comment">/* tp_dealloc */</span>
    <span class="token number">0</span><span class="token punctuation">,</span>                                          <span class="token comment">/* tp_print */</span>
    <span class="token number">0</span><span class="token punctuation">,</span>                                          <span class="token comment">/* tp_getattr */</span>
    <span class="token number">0</span><span class="token punctuation">,</span>                                          <span class="token comment">/* tp_setattr */</span>
    <span class="token number">0</span><span class="token punctuation">,</span>                                          <span class="token comment">/* tp_reserved */</span>
    object_repr<span class="token punctuation">,</span>                                <span class="token comment">/* tp_repr */</span>
    <span class="token number">0</span><span class="token punctuation">,</span>                                          <span class="token comment">/* tp_as_number */</span>
    <span class="token number">0</span><span class="token punctuation">,</span>                                          <span class="token comment">/* tp_as_sequence */</span>
    <span class="token number">0</span><span class="token punctuation">,</span>                                          <span class="token comment">/* tp_as_mapping */</span>
    <span class="token punctuation">(</span>hashfunc<span class="token punctuation">)</span>_Py_HashPointer<span class="token punctuation">,</span>                  <span class="token comment">/* tp_hash */</span>
    <span class="token number">0</span><span class="token punctuation">,</span>                                          <span class="token comment">/* tp_call */</span>
    object_str<span class="token punctuation">,</span>                                 <span class="token comment">/* tp_str */</span>
    <span class="token comment">// 这个就是真正的属性查找函数</span>
    PyObject_GenericGetAttr<span class="token punctuation">,</span>                    <span class="token comment">/* tp_getattro */</span>
    PyObject_GenericSetAttr<span class="token punctuation">,</span>                    <span class="token comment">/* tp_setattro */</span>
    <span class="token number">0</span><span class="token punctuation">,</span>                                          <span class="token comment">/* tp_as_buffer */</span>
    Py_TPFLAGS_DEFAULT <span class="token operator">|</span> Py_TPFLAGS_BASETYPE<span class="token punctuation">,</span>   <span class="token comment">/* tp_flags */</span>
    <span class="token function">PyDoc_STR</span><span class="token punctuation">(</span><span class="token string">&quot;object()\\n--\\n\\nThe most base type&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment">/* tp_doc */</span>
    <span class="token number">0</span><span class="token punctuation">,</span>                                          <span class="token comment">/* tp_traverse */</span>
    <span class="token number">0</span><span class="token punctuation">,</span>                                          <span class="token comment">/* tp_clear */</span>
    object_richcompare<span class="token punctuation">,</span>                         <span class="token comment">/* tp_richcompare */</span>
    <span class="token number">0</span><span class="token punctuation">,</span>                                          <span class="token comment">/* tp_weaklistoffset */</span>
    <span class="token number">0</span><span class="token punctuation">,</span>                                          <span class="token comment">/* tp_iter */</span>
    <span class="token number">0</span><span class="token punctuation">,</span>                                          <span class="token comment">/* tp_iternext */</span>
    object_methods<span class="token punctuation">,</span>                             <span class="token comment">/* tp_methods */</span>
    <span class="token number">0</span><span class="token punctuation">,</span>                                          <span class="token comment">/* tp_members */</span>
    object_getsets<span class="token punctuation">,</span>                             <span class="token comment">/* tp_getset */</span>
    <span class="token number">0</span><span class="token punctuation">,</span>                                          <span class="token comment">/* tp_base */</span>
    <span class="token number">0</span><span class="token punctuation">,</span>                                          <span class="token comment">/* tp_dict */</span>
    <span class="token number">0</span><span class="token punctuation">,</span>                                          <span class="token comment">/* tp_descr_get */</span>
    <span class="token number">0</span><span class="token punctuation">,</span>                                          <span class="token comment">/* tp_descr_set */</span>
    <span class="token number">0</span><span class="token punctuation">,</span>                                          <span class="token comment">/* tp_dictoffset */</span>
    object_init<span class="token punctuation">,</span>                                <span class="token comment">/* tp_init */</span>
    PyType_GenericAlloc<span class="token punctuation">,</span>                        <span class="token comment">/* tp_alloc */</span>
    object_new<span class="token punctuation">,</span>                                 <span class="token comment">/* tp_new */</span>
    PyObject_Del<span class="token punctuation">,</span>                               <span class="token comment">/* tp_free */</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 从上面的 object 定义可以看到真正的查找函数为 PyObject_GenericGetAttr 其函数内容如下所示：</span>
PyObject <span class="token operator">*</span>
<span class="token function">PyObject_GenericGetAttr</span><span class="token punctuation">(</span>PyObject <span class="token operator">*</span>obj<span class="token punctuation">,</span> PyObject <span class="token operator">*</span>name<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">_PyObject_GenericGetAttrWithDict</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> name<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>_PyObject_GenericGetAttrWithDict</code> 函数定义如下所示：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">/* Generic GetAttr functions - put these in your tp_[gs]etattro slot. */</span>

PyObject <span class="token operator">*</span>
<span class="token function">_PyObject_GenericGetAttrWithDict</span><span class="token punctuation">(</span>PyObject <span class="token operator">*</span>obj<span class="token punctuation">,</span> PyObject <span class="token operator">*</span>name<span class="token punctuation">,</span>
                                 PyObject <span class="token operator">*</span>dict<span class="token punctuation">,</span> <span class="token keyword">int</span> suppress<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">/* Make sure the logic of _PyObject_GetMethod is in sync with
       this method.

       When suppress=1, this function suppress AttributeError.
    */</span>
    <span class="token comment">// 首先获取对象的类型 针对于上面的源代码来说就是找到对象 a 的类型</span>
    PyTypeObject <span class="token operator">*</span>tp <span class="token operator">=</span> <span class="token function">Py_TYPE</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
    PyObject <span class="token operator">*</span>descr <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    PyObject <span class="token operator">*</span>res <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    descrgetfunc f<span class="token punctuation">;</span>
    Py_ssize_t dictoffset<span class="token punctuation">;</span>
    PyObject <span class="token operator">*</span><span class="token operator">*</span>dictptr<span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">PyUnicode_Check</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">PyErr_Format</span><span class="token punctuation">(</span>PyExc_TypeError<span class="token punctuation">,</span>
                     <span class="token string">&quot;attribute name must be string, not &#39;%.200s&#39;&quot;</span><span class="token punctuation">,</span>
                     name<span class="token operator">-&gt;</span>ob_type<span class="token operator">-&gt;</span>tp_name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">Py_INCREF</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>tp<span class="token operator">-&gt;</span>tp_dict <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">PyType_Ready</span><span class="token punctuation">(</span>tp<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token keyword">goto</span> done<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 这个是从所有的基类当中找到一个名字为 name 的对象 如果没有就返回 NULL</span>
    <span class="token comment">// 这里的过程还是比较复杂 需要从类的 mro 序列当中进行查找</span>
    descr <span class="token operator">=</span> <span class="token function">_PyType_Lookup</span><span class="token punctuation">(</span>tp<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>

    f <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token comment">// 如果找到的类对象不为空 也就是在类本身或者基类当中找到一个名为 name 的对象</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>descr <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">Py_INCREF</span><span class="token punctuation">(</span>descr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 得到类对象的 __get__ 函数</span>
        f <span class="token operator">=</span> descr<span class="token operator">-&gt;</span>ob_type<span class="token operator">-&gt;</span>tp_descr_get<span class="token punctuation">;</span>
        <span class="token comment">// 如果对象有 __get__ 函数则进行进一步判断</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>f <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> <span class="token function">PyDescr_IsData</span><span class="token punctuation">(</span>descr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// PyDescr_IsData(descr) 这个宏是查看对象是否有 __set__ 函数</span>
            <span class="token comment">// 如果是类对象又有 __get__ 函数 又有 __set__ 函数 则直接调用对象的 __get__ 函数 并且将结果返回</span>
            <span class="token comment">// 这里需要注意一下优先级 这个优先级是最高的 如果一个类对象定义了 __set__ 和 __get__ 函数，那么</span>
            <span class="token comment">// 就会直接调用类对象的 __get__ 函数并且将这个函数的返回值返回</span>
            res <span class="token operator">=</span> <span class="token function">f</span><span class="token punctuation">(</span>descr<span class="token punctuation">,</span> obj<span class="token punctuation">,</span> <span class="token punctuation">(</span>PyObject <span class="token operator">*</span><span class="token punctuation">)</span>obj<span class="token operator">-&gt;</span>ob_type<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> suppress <span class="token operator">&amp;&amp;</span>
                    <span class="token function">PyErr_ExceptionMatches</span><span class="token punctuation">(</span>PyExc_AttributeError<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">PyErr_Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">goto</span> done<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 如果没有名为 name 的类对象 或者虽然有名为 name 的对象 但是只要没有同时定义 __get__ 和 __set__ 函数就需要</span>
    <span class="token comment">// 继续往下执行 从对象本省的 dict 当中寻找</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>dict <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">/* Inline _PyObject_GetDictPtr */</span>
        <span class="token comment">// 这部分代码就是从对象 obj 当中找到对象的 __dict__ 字段</span>
        dictoffset <span class="token operator">=</span> tp<span class="token operator">-&gt;</span>tp_dictoffset<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>dictoffset <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>dictoffset <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                Py_ssize_t tsize<span class="token punctuation">;</span>
                <span class="token class-name">size_t</span> size<span class="token punctuation">;</span>

                tsize <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>PyVarObject <span class="token operator">*</span><span class="token punctuation">)</span>obj<span class="token punctuation">)</span><span class="token operator">-&gt;</span>ob_size<span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>tsize <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
                    tsize <span class="token operator">=</span> <span class="token operator">-</span>tsize<span class="token punctuation">;</span>
                size <span class="token operator">=</span> <span class="token function">_PyObject_VAR_SIZE</span><span class="token punctuation">(</span>tp<span class="token punctuation">,</span> tsize<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">assert</span><span class="token punctuation">(</span>size <span class="token operator">&lt;=</span> PY_SSIZE_T_MAX<span class="token punctuation">)</span><span class="token punctuation">;</span>

                dictoffset <span class="token operator">+=</span> <span class="token punctuation">(</span>Py_ssize_t<span class="token punctuation">)</span>size<span class="token punctuation">;</span>
                <span class="token function">assert</span><span class="token punctuation">(</span>dictoffset <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">assert</span><span class="token punctuation">(</span>dictoffset <span class="token operator">%</span> SIZEOF_VOID_P <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            dictptr <span class="token operator">=</span> <span class="token punctuation">(</span>PyObject <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>obj <span class="token operator">+</span> dictoffset<span class="token punctuation">)</span><span class="token punctuation">;</span>
            dict <span class="token operator">=</span> <span class="token operator">*</span>dictptr<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 如果对象 obj 存在 __dict__ 字段 那么就返回 __dict__ 字段当中名字等于 name 的对象</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>dict <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">Py_INCREF</span><span class="token punctuation">(</span>dict<span class="token punctuation">)</span><span class="token punctuation">;</span>
        res <span class="token operator">=</span> <span class="token function">PyDict_GetItem</span><span class="token punctuation">(</span>dict<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">Py_INCREF</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">Py_DECREF</span><span class="token punctuation">(</span>dict<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">goto</span> done<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">Py_DECREF</span><span class="token punctuation">(</span>dict<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 如果类对象定义了 __get__ 函数没有定义 __set__ 函数而且在 dict 当中没有找到名为 name 的对象的话</span>
    <span class="token comment">// 那么久调用类对象的 __get__ 函数</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>f <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        res <span class="token operator">=</span> <span class="token function">f</span><span class="token punctuation">(</span>descr<span class="token punctuation">,</span> obj<span class="token punctuation">,</span> <span class="token punctuation">(</span>PyObject <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">Py_TYPE</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> suppress <span class="token operator">&amp;&amp;</span>
                <span class="token function">PyErr_ExceptionMatches</span><span class="token punctuation">(</span>PyExc_AttributeError<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">PyErr_Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">goto</span> done<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 如果类对象没有定义 __get__ 函数那么就直接将这个类对象返回</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>descr <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        res <span class="token operator">=</span> descr<span class="token punctuation">;</span>
        descr <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
        <span class="token keyword">goto</span> done<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>suppress<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">PyErr_Format</span><span class="token punctuation">(</span>PyExc_AttributeError<span class="token punctuation">,</span>
                     <span class="token string">&quot;&#39;%.50s&#39; object has no attribute &#39;%U&#39;&quot;</span><span class="token punctuation">,</span>
                     tp<span class="token operator">-&gt;</span>tp_name<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  done<span class="token operator">:</span>
    <span class="token function">Py_XDECREF</span><span class="token punctuation">(</span>descr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">Py_DECREF</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>根据对上面的程序进行分析，我们可以到得到从对象当中获取属性的顺序和优先级如下所示（以 <code>a.attr</code> 为例子）：</p><ul><li>如果属性不是类属性，那么很简单就是直接从对象本身的 <code>__dict__</code> 当中获取这个对象。</li><li>如果属性是类属性，如果同时定义了 <code>__get__</code> 和 <code>__set__</code> 函数，那么就会调用这个类对象的 <code>__get__</code> 函数，将这个函数的返回值作为 <code>a.attr</code> 的返回值。</li><li>如果属性是类属性，如果只定义了 <code>__get__</code> 函数，那么就会从对象 <code>a</code> 本身的 <code>__dict__</code> 当中获取 <code>attr</code> ，如果 <code>attr</code> 存在与 <code>a.__dict__</code> 当中，那么久返回这个结果，如果不存在的话那么就会调用 <code>__get__</code> 函数，将这个函数的返回值作为 <code>a.attr</code> 的结果，如果连 <code>__get__</code> 都没有定义，那么就会直接返回这个类对象。</li></ul><p>上面的函数过程用 python 语言来描述的话如下所示：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">find_name_in_mro</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> name<span class="token punctuation">,</span> default<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token string">&quot;Emulate _PyType_Lookup() in Objects/typeobject.c&quot;</span>
    <span class="token keyword">for</span> base <span class="token keyword">in</span> cls<span class="token punctuation">.</span>__mro__<span class="token punctuation">:</span>
        <span class="token keyword">if</span> name <span class="token keyword">in</span> <span class="token builtin">vars</span><span class="token punctuation">(</span>base<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token builtin">vars</span><span class="token punctuation">(</span>base<span class="token punctuation">)</span><span class="token punctuation">[</span>name<span class="token punctuation">]</span>
    <span class="token keyword">return</span> default

<span class="token keyword">def</span> <span class="token function">object_getattribute</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token string">&quot;Emulate PyObject_GenericGetAttr() in Objects/object.c&quot;</span>
    null <span class="token operator">=</span> <span class="token builtin">object</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    objtype <span class="token operator">=</span> <span class="token builtin">type</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>
    cls_var <span class="token operator">=</span> find_name_in_mro<span class="token punctuation">(</span>objtype<span class="token punctuation">,</span> name<span class="token punctuation">,</span> null<span class="token punctuation">)</span>
    descr_get <span class="token operator">=</span> <span class="token builtin">getattr</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>cls_var<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;__get__&#39;</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span>
    <span class="token keyword">if</span> descr_get <span class="token keyword">is</span> <span class="token keyword">not</span> null<span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token builtin">hasattr</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>cls_var<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;__set__&#39;</span><span class="token punctuation">)</span>
            <span class="token keyword">or</span> <span class="token builtin">hasattr</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>cls_var<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;__delete__&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> descr_get<span class="token punctuation">(</span>cls_var<span class="token punctuation">,</span> obj<span class="token punctuation">,</span> objtype<span class="token punctuation">)</span>     <span class="token comment"># data descriptor</span>
    <span class="token keyword">if</span> <span class="token builtin">hasattr</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">&#39;__dict__&#39;</span><span class="token punctuation">)</span> <span class="token keyword">and</span> name <span class="token keyword">in</span> <span class="token builtin">vars</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token builtin">vars</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">[</span>name<span class="token punctuation">]</span>                          <span class="token comment"># instance variable</span>
    <span class="token keyword">if</span> descr_get <span class="token keyword">is</span> <span class="token keyword">not</span> null<span class="token punctuation">:</span>
        <span class="token keyword">return</span> descr_get<span class="token punctuation">(</span>cls_var<span class="token punctuation">,</span> obj<span class="token punctuation">,</span> objtype<span class="token punctuation">)</span>         <span class="token comment"># non-data descriptor</span>
    <span class="token keyword">if</span> cls_var <span class="token keyword">is</span> <span class="token keyword">not</span> null<span class="token punctuation">:</span>
        <span class="token keyword">return</span> cls_var                                  <span class="token comment"># class variable</span>
    <span class="token keyword">raise</span> AttributeError<span class="token punctuation">(</span>name<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>仔细分析上面的 python 代码，他的整个逻辑和我们前面分析的 c 代码的逻辑是一样的。首先是获取对象的类型，然后从类型当中获取名字为 name 的属性，如果类属性定义了 <code>__get__</code> 函数，则需要进行描述器的判断，否则直接从对象的 <code>__dict__</code> 当中获取，如果其中没有则返回类对象。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>在本篇文章当中主要给大家深入分析了在 cpython 的内部对于描述器的实现原理，其中最重要的就是在获取属性的时候的优先级了。我们直接从 c 代码的层面分析了整个获取属性的优先级，并且给出了 python 层面的代码帮助大家理解。</p><hr><p>本篇文章是深入理解 python 虚拟机系列文章之一，文章地址：https://github.com/Chang-LeHung/dive-into-cpython</p>`,24),k={href:"https://github.com/Chang-LeHung/CSCore",target:"_blank",rel:"noopener noreferrer"},d=n("p",null,"关注公众号：一无是处的研究僧，了解更多计算机（Java、Python、计算机系统基础、算法与数据结构）知识。",-1),m=n("p",null,[n("img",{src:t,alt:""})],-1);function v(b,_){const a=e("ExternalLinkIcon");return o(),c("div",null,[r,n("p",null,[s("更多精彩内容合集可访问项目："),n("a",k,[s("https://github.com/Chang-LeHung/CSCore"),i(a)])]),d,m])}const g=p(u,[["render",v],["__file","03decriptor.html.vue"]]);export{g as default};
