import{_ as p}from"./qrcode2-187b7271.js";import{_ as t,r as e,o,c,a as n,d as s,b as i,e as l}from"./app-6b5e6c63.js";const u={},r=l(`<h1 id="深入理解-python-虚拟机-元组-tuple-的实现原理及源码剖析" tabindex="-1"><a class="header-anchor" href="#深入理解-python-虚拟机-元组-tuple-的实现原理及源码剖析" aria-hidden="true">#</a> 深入理解 Python 虚拟机：元组（tuple）的实现原理及源码剖析</h1><p>在本篇文章当中主要给大家介绍 cpython 虚拟机当中针对列表的实现，在 Python 中，tuple 是一种非常常用的数据类型，在本篇文章当中将深入去分析这一点是如何实现的。</p><h2 id="元组的结构" tabindex="-1"><a class="header-anchor" href="#元组的结构" aria-hidden="true">#</a> 元组的结构</h2><p>在这一小节当中主要介绍在 python 当中元组的数据结构：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    PyObject_VAR_HEAD
    PyObject <span class="token operator">*</span>ob_item<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token comment">/* ob_item contains space for &#39;ob_size&#39; elements.
     * Items must normally not be NULL, except during construction when
     * the tuple is not yet visible outside the function that builds it.
     */</span>
<span class="token punctuation">}</span> PyTupleObject<span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PyObject_VAR_HEAD</span>      <span class="token expression">PyVarObject ob_base<span class="token punctuation">;</span></span></span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    PyObject ob_base<span class="token punctuation">;</span>
    Py_ssize_t ob_size<span class="token punctuation">;</span> <span class="token comment">/* Number of items in variable part */</span>
<span class="token punctuation">}</span> PyVarObject<span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">_object</span> <span class="token punctuation">{</span>
    _PyObject_HEAD_EXTRA
    Py_ssize_t ob_refcnt<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">_typeobject</span> <span class="token operator">*</span>ob_type<span class="token punctuation">;</span>
<span class="token punctuation">}</span> PyObject<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从上面的数据结构来看和 list 的数据结构基本上差不多，最终的使用方法也差不多。将上面的结构体展开之后，PyTupleObject 的结构大致如下所示：</p><p><img src="https://img2023.cnblogs.com/blog/2519003/202303/2519003-20230311004156070-455030022.png" alt=""></p><p>现在来解释一下上面的各个字段的含义：</p><ul><li><p>Py_ssize_t，一个整型数据类型。</p></li><li><p>ob_refcnt，表示对象的引用记数的个数，这个对于垃圾回收很有用处，后面我们分析虚拟机中垃圾回收部分在深入分析。</p></li><li><p>ob_type，表示这个对象的数据类型是什么，在 python 当中有时候需要对数据的数据类型进行判断比如 isinstance, type 这两个关键字就会使用到这个字段。</p></li><li><p>ob_size，这个字段表示这个元组当中有多少个元素。</p></li><li><p>ob_item，这是一个指针，指向真正保存 python 对象数据的地址，大致的内存他们之间大致的内存布局如下所示：</p></li></ul><p><img src="https://img2023.cnblogs.com/blog/2519003/202303/2519003-20230311004156534-1891365141.png" alt=""></p><p>需要注意的是元组的数组大小是不能够进行更改的，这一点和 list 不一样，我们可以注意到在 list 的数据结构当中还有一个 allocated 字段，但是在元组当中是没有的，这主要是因为元组的数组大小是固定的，而列表的数组大小是可以更改的。</p><h2 id="元组操作函数源码剖析" tabindex="-1"><a class="header-anchor" href="#元组操作函数源码剖析" aria-hidden="true">#</a> 元组操作函数源码剖析</h2><h3 id="创建元组" tabindex="-1"><a class="header-anchor" href="#创建元组" aria-hidden="true">#</a> 创建元组</h3><p>首先我们需要了解一下在 cpython 内部关于元组内存分配的问题，首先和 list 一样，在 cpython 当中对于分配的好的元组进行释放的时候，并不会直接进行释放，而是会先保存下来，当下次又有元组申请内存的时候，直接将这块内存进行返回即可。</p><p>在 cpython 内部会进行缓存的元组大小为 20，如果元组的长度为 0 - 19 那么在申请分配内存之后释放并不会直接释放，而是将其先保存下来，下次有需求的时候直接分配，而不需要申请。在 cpython 内部，相关的定义如下所示：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> PyTupleObject <span class="token operator">*</span>free_list<span class="token punctuation">[</span>PyTuple_MAXSAVESIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token keyword">int</span> numfree<span class="token punctuation">[</span>PyTuple_MAXSAVESIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>free_list，保存指针——指向被释放的元组。</li><li>numfree，对应的下标表示元组当中元素的个数，numfree[i] 表示有 i 个元素的元组的个数。</li></ul><p>下面是新建 tuple 对象的源程序：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>PyObject <span class="token operator">*</span>
<span class="token function">PyTuple_New</span><span class="token punctuation">(</span>Py_ssize_t size<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    PyTupleObject <span class="token operator">*</span>op<span class="token punctuation">;</span>
    Py_ssize_t i<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">PyErr_BadInternalCall</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">PyTuple_MAXSAVESIZE <span class="token operator">&gt;</span> <span class="token number">0</span></span></span>
    <span class="token comment">// 如果申请一个空的元组对象 当前的 free_list 当中是否存在空元组对象 如果存在则直接返回</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> free_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> k
        op <span class="token operator">=</span> free_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token function">Py_INCREF</span><span class="token punctuation">(</span>op<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>PyObject <span class="token operator">*</span><span class="token punctuation">)</span> op<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 如果元组的对象元素个数小于 20 而且对应的 free_list 当中还有余下的元组对象 则不需要进行内存申请直接返回</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">&lt;</span> PyTuple_MAXSAVESIZE <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>op <span class="token operator">=</span> free_list<span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        free_list<span class="token punctuation">[</span>size<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>PyTupleObject <span class="token operator">*</span><span class="token punctuation">)</span> op<span class="token operator">-&gt;</span>ob_item<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        numfree<span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>
        <span class="token comment">/* Inline PyObject_InitVar */</span>
        <span class="token function">_Py_NewReference</span><span class="token punctuation">(</span><span class="token punctuation">(</span>PyObject <span class="token operator">*</span><span class="token punctuation">)</span>op<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// _Py_NewReference 这个宏是将对象 op 的引用计数设置成 1</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
    <span class="token punctuation">{</span>
        <span class="token comment">/* Check for overflow */</span>
        <span class="token comment">// 如果元组的元素个数大或者等于 20 或者 当前 free_list 当中没有没有剩余的对象则需要进行内存申请</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">size_t</span><span class="token punctuation">)</span>size <span class="token operator">&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">size_t</span><span class="token punctuation">)</span>PY_SSIZE_T_MAX <span class="token operator">-</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>PyTupleObject<span class="token punctuation">)</span> <span class="token operator">-</span>
                    <span class="token keyword">sizeof</span><span class="token punctuation">(</span>PyObject <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>PyObject <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          	<span class="token comment">// 如果元组长度大于某个值直接报内存错误</span>
            <span class="token keyword">return</span> <span class="token function">PyErr_NoMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 申请元组大小的内存空间</span>
        op <span class="token operator">=</span> <span class="token function">PyObject_GC_NewVar</span><span class="token punctuation">(</span>PyTupleObject<span class="token punctuation">,</span> <span class="token operator">&amp;</span>PyTuple_Type<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>op <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
		<span class="token comment">// 初始化内存空间</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
        op<span class="token operator">-&gt;</span>ob_item<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">PyTuple_MAXSAVESIZE <span class="token operator">&gt;</span> <span class="token number">0</span></span></span>
    <span class="token comment">// 因为 size == 0 的元组不会进行修改操作 因此可以直接将这个申请到的对象放到 free_list 当中以备后续使用</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        free_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> op<span class="token punctuation">;</span>
        <span class="token operator">++</span>numfree<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token function">Py_INCREF</span><span class="token punctuation">(</span>op<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">/* extra INCREF so that this is never freed */</span>
    <span class="token punctuation">}</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
    <span class="token function">_PyObject_GC_TRACK</span><span class="token punctuation">(</span>op<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// _PyObject_GC_TRACK 这个宏是将对象 op 将入到垃圾回收队列当中</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>PyObject <span class="token operator">*</span><span class="token punctuation">)</span> op<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>新建元组对象的流程如下所示：</p><ul><li>查看 free_list 当中是否已经存在空闲的元组，如果有则直接进行返回。</li><li>如果没有，则进行内存分配，然后将申请的内存空间进行初始化操作。</li><li>如果 size == 0，则可以将新分配的元组对象放到 free_list 当中。</li></ul><h3 id="查看元组的长度" tabindex="-1"><a class="header-anchor" href="#查看元组的长度" aria-hidden="true">#</a> 查看元组的长度</h3><p>这个功能比较简单，直接只用 cpython 当中的宏 Py_SIZE 即可。他的宏定义为 #define Py_SIZE(ob) (((PyVarObject*)(ob))-&gt;ob_size)。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> Py_ssize_t
<span class="token function">tuplelength</span><span class="token punctuation">(</span>PyTupleObject <span class="token operator">*</span>a<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">Py_SIZE</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="元组当中是否包含数据" tabindex="-1"><a class="header-anchor" href="#元组当中是否包含数据" aria-hidden="true">#</a> 元组当中是否包含数据</h3><p>这个其实和 list 一样，就是遍历元组当中的数据，然后进行比较即可。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span>
<span class="token function">tuplecontains</span><span class="token punctuation">(</span>PyTupleObject <span class="token operator">*</span>a<span class="token punctuation">,</span> PyObject <span class="token operator">*</span>el<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Py_ssize_t i<span class="token punctuation">;</span>
    <span class="token keyword">int</span> cmp<span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> cmp <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> cmp <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> <span class="token function">Py_SIZE</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>
        cmp <span class="token operator">=</span> <span class="token function">PyObject_RichCompareBool</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> <span class="token function">PyTuple_GET_ITEM</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">,</span>
                                           Py_EQ<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> cmp<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="获取和设置元组中的数据" tabindex="-1"><a class="header-anchor" href="#获取和设置元组中的数据" aria-hidden="true">#</a> 获取和设置元组中的数据</h3><p>这两个方法也比较简单，首先检查数据类型是不是元组类型，然后判断是否越界，之后就返回数据，或者设置对应的数据。</p><p>这里在设置数据数据的时候需要注意一点的是，当设置新的数据的时候，原来的 python 对象引用计数需要减去一，同理如果设置没有成功的话传入的新的数据的引用计数也需要减去一。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>PyObject <span class="token operator">*</span>
<span class="token function">PyTuple_GetItem</span><span class="token punctuation">(</span>PyObject <span class="token operator">*</span>op<span class="token punctuation">,</span> Py_ssize_t i<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">PyTuple_Check</span><span class="token punctuation">(</span>op<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">PyErr_BadInternalCall</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> i <span class="token operator">&gt;=</span> <span class="token function">Py_SIZE</span><span class="token punctuation">(</span>op<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">PyErr_SetString</span><span class="token punctuation">(</span>PyExc_IndexError<span class="token punctuation">,</span> <span class="token string">&quot;tuple index out of range&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>PyTupleObject <span class="token operator">*</span><span class="token punctuation">)</span>op<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> ob_item<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span>
<span class="token function">PyTuple_SetItem</span><span class="token punctuation">(</span>PyObject <span class="token operator">*</span>op<span class="token punctuation">,</span> Py_ssize_t i<span class="token punctuation">,</span> PyObject <span class="token operator">*</span>newitem<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    PyObject <span class="token operator">*</span>olditem<span class="token punctuation">;</span>
    PyObject <span class="token operator">*</span><span class="token operator">*</span>p<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">PyTuple_Check</span><span class="token punctuation">(</span>op<span class="token punctuation">)</span> <span class="token operator">||</span> op<span class="token operator">-&gt;</span>ob_refcnt <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">Py_XDECREF</span><span class="token punctuation">(</span>newitem<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">PyErr_BadInternalCall</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> i <span class="token operator">&gt;=</span> <span class="token function">Py_SIZE</span><span class="token punctuation">(</span>op<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">Py_XDECREF</span><span class="token punctuation">(</span>newitem<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">PyErr_SetString</span><span class="token punctuation">(</span>PyExc_IndexError<span class="token punctuation">,</span>
                        <span class="token string">&quot;tuple assignment index out of range&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>PyTupleObject <span class="token operator">*</span><span class="token punctuation">)</span>op<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> ob_item <span class="token operator">+</span> i<span class="token punctuation">;</span>
    olditem <span class="token operator">=</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>
    <span class="token operator">*</span>p <span class="token operator">=</span> newitem<span class="token punctuation">;</span>
    <span class="token function">Py_XDECREF</span><span class="token punctuation">(</span>olditem<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="释放元组内存空间" tabindex="-1"><a class="header-anchor" href="#释放元组内存空间" aria-hidden="true">#</a> 释放元组内存空间</h3><p>当我们在进行垃圾回收的时候，判定一个对象的引用计数等于 0 的时候就需要释放这块内存空间（相当于析构函数），下面就是释放 tuple 内存空间的函数。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span>
<span class="token function">tupledealloc</span><span class="token punctuation">(</span>PyTupleObject <span class="token operator">*</span>op<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Py_ssize_t i<span class="token punctuation">;</span>
    Py_ssize_t len <span class="token operator">=</span>  <span class="token function">Py_SIZE</span><span class="token punctuation">(</span>op<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">PyObject_GC_UnTrack</span><span class="token punctuation">(</span>op<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// PyObject_GC_UnTrack 将对象从垃圾回收队列当中移除</span>
    <span class="token function">Py_TRASHCAN_SAFE_BEGIN</span><span class="token punctuation">(</span>op<span class="token punctuation">)</span> 
    <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        i <span class="token operator">=</span> len<span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">--</span>i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token comment">// 将这个元组指向的对象的引用计数减去一</span>
            <span class="token function">Py_XDECREF</span><span class="token punctuation">(</span>op<span class="token operator">-&gt;</span>ob_item<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">PyTuple_MAXSAVESIZE <span class="token operator">&gt;</span> <span class="token number">0</span></span></span>
        <span class="token comment">// 如果这个元组对象满足加入 free_list  的条件，则将这个元组对象加入到 free_list 当中</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">&lt;</span> PyTuple_MAXSAVESIZE <span class="token operator">&amp;&amp;</span>
            numfree<span class="token punctuation">[</span>len<span class="token punctuation">]</span> <span class="token operator">&lt;</span> PyTuple_MAXFREELIST <span class="token operator">&amp;&amp;</span>
            <span class="token function">Py_TYPE</span><span class="token punctuation">(</span>op<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">&amp;</span>PyTuple_Type<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            op<span class="token operator">-&gt;</span>ob_item<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>PyObject <span class="token operator">*</span><span class="token punctuation">)</span> free_list<span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">;</span>
            numfree<span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
            free_list<span class="token punctuation">[</span>len<span class="token punctuation">]</span> <span class="token operator">=</span> op<span class="token punctuation">;</span>
            <span class="token keyword">goto</span> done<span class="token punctuation">;</span> <span class="token comment">/* return */</span>
        <span class="token punctuation">}</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
    <span class="token punctuation">}</span>
    <span class="token function">Py_TYPE</span><span class="token punctuation">(</span>op<span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">tp_free</span><span class="token punctuation">(</span><span class="token punctuation">(</span>PyObject <span class="token operator">*</span><span class="token punctuation">)</span>op<span class="token punctuation">)</span><span class="token punctuation">;</span>
done<span class="token operator">:</span>
    <span class="token function">Py_TRASHCAN_SAFE_END</span><span class="token punctuation">(</span>op<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将元组的内存空间回收的时候，主要有以下几个步骤：</p><ul><li>将元组对象从垃圾回收链表当中移除。</li><li>将元组指向的所有对象的引用计数减一。</li><li>判断元组是否满足保存到 free_list 当中的条件，如果满足就将他加入到 free_list 当中去，否则回收这块内存。加入到 free_list 当中整个元组当中 ob_item 指向变化如下所示：</li></ul><p><img src="https://img2023.cnblogs.com/blog/2519003/202303/2519003-20230311004157092-1733131271.png" alt=""></p><ul><li>如果不能够将释放的元组对象加入到 free_list 当中，否则将内存释放回收。</li></ul><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>在本篇文章当中主要介绍了在 cpython 当中是如何实现 tuple 的，以及相关的数据结构和一些基本的使用函数，最后简单谈了关于元组内存释放的问题，这里面还是涉及一些其他的知识点，不能够在这篇文章进行分析，在本文内存分配主要是聚焦在元组身上，主要是分析内存分配和 tuple 的 free_list 是如何交互的。</p><hr><p>本篇文章是深入理解 python 虚拟机系列文章之一，文章地址：https://github.com/Chang-LeHung/dive-into-cpython</p>`,42),k={href:"https://github.com/Chang-LeHung/CSCore",target:"_blank",rel:"noopener noreferrer"},d=n("p",null,"关注公众号：一无是处的研究僧，了解更多计算机（Java、Python、计算机系统基础、算法与数据结构）知识。",-1),v=n("p",null,[n("img",{src:p,alt:""})],-1);function m(b,y){const a=e("ExternalLinkIcon");return o(),c("div",null,[r,n("p",null,[s("更多精彩内容合集可访问项目："),n("a",k,[s("https://github.com/Chang-LeHung/CSCore"),i(a)])]),d,v])}const h=t(u,[["render",m],["__file","02tuple_upload.html.vue"]]);export{h as default};
